function FindBleach()
global UserValues;

addpath(genpath(['.' filesep 'functions']));

h=findobj('Name','FindBleach');
if isempty(h)
    LSUserValues(0);

    handles.AxesColor = [0.9 0.9 0.9];
    handles.BackColor = [0.2 0.2 0.2];
    handles.ControlColor = [0.4 0.4 0.4];
    handles.DisabledColor = [0 0 0];
    handles.ShadowColor = [0.4 0.4 0.4];
    handles.ForeColor = [1 1 1];

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Figure Definition %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Figure = figure(...
    'Units','normalized',...
    'Name','FindBleach',...
    'Units', 'normalized',...
    'NumberTitle','off',...
    'Outerposition',[0.05 0.05 0.95 0.95],...
    'Tag','BleachFinder',...
    'MenuBar','none',...
    'BusyAction','cancel',...
    'Interruptible','off',...
    'Visible','on',...
    'toolbar','figure');

    whitebg(Figure, handles.AxesColor);
    set(Figure,'Color',handles.BackColor);
    %%% Remove unneeded items from toolbar
    toolbar = findall(Figure,'Type','uitoolbar');
    toolbar_items = findall(toolbar);
    delete(toolbar_items([2:7 9 13:17]));
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Other Controls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for i=1
    handles.Ctrl_Pressed = uicontrol(...
    'Parent',Figure,...
    'Position',[0 0 1 1],...
    'Style','checkbox',...
    'HitTest','off',...
    'Tag','Ctrl_Pressed',...
    'Visible','off');


    handles.Shift_Pressed = uicontrol(...
    'Parent',Figure,...
    'Position',[0 0 1 1],...
    'Style','checkbox',...
    'HitTest','off',...
    'Tag','Shift_Pressed',...
    'Visible','off');

    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% First Tabgroup %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    handles.Bleach_First_Tab = uitabgroup(...
    'Tag','Bleach_First_Tab',...
    'Units','normalized',...
    'Position',[0.001 0.68 0.142 0.32]);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Main Tab
    for i=1
    handles.Bleach_Main_Tab= uitab(handles.Bleach_First_Tab,...
    'title','Main',...
    'Tag','Bleach_Main_Tab');


    handles.Bleach_Main_Panel = uibuttongroup(...
    'Parent',handles.Bleach_Main_Tab,...
    'Title',blanks(0),...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Clipping','on',...
    'Tag','Bleach_Main_Panel');


    handles.Bleach_Load = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'Callback',@Bleach_Load_Callback,...
    'FontSize',16,...
    'FontWeight','bold',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Position',[0.05 0.87 0.9 0.1],...
    'String','Load Files',...
    'Tag','Bleach_Load');


    handles.Bleach_Bin = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.55 0.77 0.4 0.07],...
    'String','50',...
    'Style','edit',...
    'Tag','Bleach_Bin');


    handles.TextBS= uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.05 0.77 0.45 0.07],...
    'String','Bin Size [ms]',...
    'Style','text',...
    'Tag','TextBS');

    handles.Use_Second = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.05 0.67 0.9 0.07],...
    'String','Use Second Color',...
    'Style','checkbox',...
    'Tag','Use_Second',...
    'Callback', @Use_Second_Callback);

    handles.Use_Direct = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.05 0.57 0.9 0.07],...
    'String','Use Direct Excitation',...
    'Style','checkbox',...
    'Tag','Use_Second',...
    'Callback', @Use_Second_Callback);

    handles.Bleach_Channel = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'FontUnits','pixels',...
    'BackgroundColor',[0.5 0.5 1],...
    'Callback',@Bleach_Channel_Callback,...
    'FontSize',14,...
    'Position',[0.05 0.44 0.9 0.1],...
    'String',UserValues.PIE.Name,...
    'Value',UserValues.Trace.DonPar,...
    'Style','popupmenu',...
    'Tag','Bleach_Channel');

    handles.Bleach_Second = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'FontUnits','pixels',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Callback',@Bleach_Second_Callback,...
    'FontSize',14,...
    'Position',[0.05 0.31 0.9 0.1],...
    'String',UserValues.PIE.Name,...
    'Value',UserValues.Trace.AccPar,...
    'Style','popupmenu',...
    'Tag','Bleach_Second',...
    'Enable', 'inactive');

    handles.Bleach_Direct = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'FontUnits','pixels',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Callback',@Bleach_Direct_Callback,...
    'FontSize',14,...
    'Position',[0.05 0.17 0.9 0.1],...
    'String',UserValues.PIE.Name',...
    'Value',1,...
    'Style','popupmenu',...
    'Tag','Bleach_Direct',...
    'Enable', 'inactive');

    handles.Colors2Plot = uicontrol(...
    'Parent',handles.Bleach_Main_Panel,...
    'Units','normalized',...
    'FontUnits','pixels',...
    'BackgroundColor',[0.5,0.5,1],...
    'ForegroundColor',handles.DisabledColor,...
    'Callback',@Colors2Plot_Callback,...
    'FontSize',14,...
    'Position',[0.05 0.03 0.9 0.1],...
    'String','Blue only',...
    'Style','popupmenu',...
    'Tag','Colors2Plot');

    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Blue Tab
    for i=1
    handles.Bleach_Blue_Tab= uitab(handles.Bleach_First_Tab,...
    'title','Blue',...
    'Tag','Bleach_Blue_Tab');
    handles.Bleach_Blue_Panel = uibuttongroup(...
    'Parent',handles.Bleach_Blue_Tab,...
    'Title',blanks(0),...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Clipping','on',...
    'Tag','Bleach_Blue_Panel');

    handles.Bleach_TH = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Callback',@Bleach_TH_Callback,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.9 0.3 0.07],...
    'String','500',...
    'Style','edit',...
    'Tag','Bleach_TH');

    handles.TSB = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'FontUnits','pixels',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.9 0.64 0.07],...
    'String','Threshold [Hz]',...
    'Style','text',...
    'Tag','TSB');


    handles.Bleach_MP = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.8 0.3 0.07],...
    'String','0',...
    'Style','edit',...
    'Tag','Bleach_MP');

    handles.MPB = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.8 0.64 0.07],...
    'String','Min Photons',...
    'Style','text',...
    'Tag','MPB');


    handles.Bleach_MD = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.7 0.3 0.07],...
    'String','0',...
    'Style','edit',...
    'Tag','Bleach_MD');


    handles.MDB = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.7 0.64 0.07],...
    'String','Min Duration [ms]',...
    'Style','text',...
    'Tag','MDB');


    handles.text_blue_min_step = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.6 0.64 0.07],...
    'String','Min Step Size [counts]',...
    'Style','text',...
    'Tag','text_blue_min_step');


    handles.Bleach_Step = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'FontSize',11,...
    'Position',[0.67 0.6 0.3 0.07],...
    'Enable','inactive',...
    'String','500',...
    'Style','edit',...
    'Tag','Bleach_Step');


    handles.text_blue_ml = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.5 0.64 0.07],...
    'String','Min Step Length [ms]',...
    'Style','text',...
    'Tag','ttext_blue_ml');


    handles.Bleach_ML = uicontrol(...
    'Parent',handles.Bleach_Blue_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'FontSize',11,...
    'Position',[0.67 0.5 0.3 0.07],...
    'Enable','inactive',...
    'String','0',...
    'Style','edit',...
    'Tag','Bleach_ML');

    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% FRET Tab
    for i=1
    handles.Bleach_BlueRed_Tab= uitab(handles.Bleach_First_Tab,...
    'title','Red',...
    'Tag','Bleach_BlueRed_Tab');
    handles.Bleach_BlueRed_Panel = uibuttongroup(...
    'Parent',handles.Bleach_BlueRed_Tab,...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Tag','Bleach_BlueRed_Panel');

    handles.TSR = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.9 0.64 0.07],...
    'String','Threshold [Hz]',...
    'Style','text',...
    'Tag','TSR');

    handles.Second_TH = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Callback',@Second_TH_Callback,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.9 0.3 0.07],...
    'String','500',...
    'Style','edit',...
    'Tag','Second_TH');

    handles.MPR = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.8 0.64 0.07],...
    'String','Min Photons',...
    'Style','text',...
    'Tag','MPR');

    handles.Second_MP = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.8 0.3 0.07],...
    'String','0',...
    'Style','edit',...
    'Tag','Second_MP');

    handles.MDR = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.7 0.64 0.07],...
    'String','Min Duration [ms]',...
    'Style','text',...
    'Tag','MDR');

    handles.Second_MD = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.7 0.3 0.07],...
    'String','0',...
    'Style','edit',...
    'Tag','Second_MD');

    handles.text_min_step = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.6 0.64 0.07],...
    'String','Min Step Size [counts]',...
    'Style','text',...
    'Tag','text_min_step');

    handles.Second_Step = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.6 0.3 0.07],...
    'String','500',...
    'Style','edit',...
    'Tag','Second_Step');

    handles.text_red_ml = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'HorizontalAlignment','left',...
    'Position',[0.03 0.5 0.64 0.07],...
    'String','Min Step Length [ms]',...
    'Style','text',...
    'Tag','text_red_ml');

    handles.Second_ML = uicontrol(...
    'Parent',handles.Bleach_BlueRed_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.67 0.5 0.3 0.07],...
    'String','0',...
    'Style','edit',...
    'Tag','Second_ML');
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Red Tab (currently unused)
     for i=1
%     handles.Bleach_Red_Tab= uitab(handles.Bleach_First_Tab,...
%     'title','Red',...
%     'Tag','Bleach_Red_Tab');
%     handles.Bleach_Red_Panel = uibuttongroup(...
%     'Parent',handles.Bleach_Red_Tab,...
%     'BackgroundColor',handles.BackColor,...
%     'HighlightColor',handles.ControlColor,...
%     'ShadowColor',handles.ShadowColor,...
%     'Title',blanks(0),...
%     'Clipping','on',...
%     'Tag','Bleach_Red_Panel');
% 
%     handles.TSR2 = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.ForeColor,...
%     'FontSize',11,...
%     'HorizontalAlignment','left',...
%     'Position',[0.03 0.9 0.64 0.07],...
%     'String','Threshold [Hz]',...
%     'Style','text',...
%     'Tag','TSR2');
% 
%     handles.Direct_TH = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.DisabledColor,...
%     'Callback',@Direct_TH_Callback,...
%     'Enable','inactive',...
%     'FontSize',11,...
%     'Position',[0.67 0.9 0.3 0.07],...
%     'String','500',...
%     'Style','edit',...
%     'Tag','Direct_TH');
% 
%     handles.MPR2 = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.ForeColor,...
%     'FontSize',11,...
%     'HorizontalAlignment','left',...
%     'Position',[0.03 0.8 0.64 0.07],...
%     'String','Min Photons',...
%     'Style','text',...
%     'Tag','MPR2');
% 
%     handles.Direct_MP = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.DisabledColor,...
%     'Enable','inactive',...
%     'FontSize',11,...
%     'Position',[0.67 0.8 0.3 0.07],...
%     'String','0',...
%     'Style','edit',...
%     'Tag','Direct_MP');
% 
%     handles.MDR2 = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.ForeColor,...
%     'FontSize',11,...
%     'HorizontalAlignment','left',...
%     'Position',[0.03 0.7 0.64 0.07],...
%     'String','Min Duration [ms]',...
%     'Style','text',...
%     'Tag','MDR2');
% 
%     handles.Direct_MD = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.DisabledColor,...
%     'Enable','inactive',...
%     'FontSize',11,...
%     'Position',[0.67 0.7 0.3 0.07],...
%     'String','0',...
%     'Style','edit',...
%     'Tag','Direct_MD');
% 
%     handles.text_min_step2 = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.ForeColor,...
%     'FontSize',11,...
%     'HorizontalAlignment','left',...
%     'Position',[0.03 0.6 0.64 0.07],...
%     'String','Min Step Size [counts]',...
%     'Style','text',...
%     'Tag','text_min_step2');
% 
%     handles.Direct_Step = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.DisabledColor,...
%     'Enable','inactive',...
%     'FontSize',11,...
%     'Position',[0.67 0.6 0.3 0.07],...
%     'String','500',...
%     'Style','edit',...
%     'Tag','Direct_Step');
% 
%     handles.text_red_ml2 = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.ForeColor,...
%     'FontSize',11,...
%     'HorizontalAlignment','left',...
%     'Position',[0.03 0.5 0.64 0.07],...
%     'String','Min Step Length [ms]',...
%     'Style','text',...
%     'Tag','text_red_ml2');
% 
%     handles.Direct_ML = uicontrol(...
%     'Parent',handles.Bleach_Red_Panel,...
%     'Units','normalized',...
%     'BackgroundColor',handles.BackColor,...
%     'ForegroundColor',handles.DisabledColor,...
%     'Enable','inactive',...
%     'FontSize',11,...
%     'Position',[0.67 0.5 0.3 0.07],...
%     'String','0',...
%     'Style','edit',...
%     'Tag','Direct_ML');
     end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Misc Tab
    for i=1
    handles.Bleach_Misc_Tab= uitab(handles.Bleach_First_Tab,...
    'title','Misc',...
    'Tag','Bleach_Misc_Tab');
    handles.Bleach_Misc_Panel = uibuttongroup(...
    'Parent',handles.Bleach_Misc_Tab,...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Tag','Bleach_Misc_Panel');

    handles.Bleach_Save = uicontrol(...
    'Parent',handles.Bleach_Misc_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Callback',@Bleach_Save_Callback,...
    'FontSize',16,...
    'FontWeight','bold',...
    'Position',[0.05 0.87 0.9 0.1],...
    'String','Save Files',...
    'Tag','Bleach_Save');

    handles.Bleach_Reload = uicontrol(...
    'Parent',handles.Bleach_Misc_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Callback',@Bleach_Load_Callback,...
    'FontSize',16,...
    'FontWeight','bold',...
    'Position',[0.05 0.74 0.9 0.1],...
    'String','Reload Files',...
    'Tag','Bleach_Reload');
    end


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Second Tabgroup %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    handles.Bleach_Second_Tab = uitabgroup(...
    'Units','normalized',...
    'Position',[0 0 1 0.3],...
    'Tag','Bleach_Second_Tab');


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Count Tab
    for i=1
    handles.Bleach_Count_Tab= uitab(handles.Bleach_Second_Tab,...
    'title','Count',...
    'Tag','Bleach_Count_Tab');
    handles.Bleach_Count_Panel = uibuttongroup(...
    'Parent',handles.Bleach_Count_Tab,...
    'Title',blanks(0),...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Clipping','on',...
    'Position',[0 0 1 1],...
    'Tag','Bleach_Count_Panel');

    handles.Bleach_Popup_Count = uicontrol(...
    'Parent',handles.Bleach_Count_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Callback',@Bleach_Counts_Callback,...
    'FontSize',11,...
    'Position',[0.005 0.82 0.15 0.15],...
    'String',{  'Plot Bleach Duration Green'; 'Plot Number of Photons Green'; 'Plot Bleach Duration Red'; 'Plot Number of Photons Red';'Plot Lifetime Green';'Plot Lifetime Green Framewise'},...
    'Style','popupmenu',...
    'Value',1,...
    'Tag','Bleach_Popup_Count');

    handles.Text_Counts = uicontrol(...
    'Parent',handles.Bleach_Count_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',12,...
    'HorizontalAlignment','left',...
    'Position',[0.005 0.695 0.07 0.15],...
    'String','Average [s]',...
    'Style','text',...
    'Tag','Text_Counts');

    handles.Bleach_Counts_Avg = uicontrol(...
    'Parent',handles.Bleach_Count_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Counts_Avg_Callback,...
    'FontSize',11,...
    'Position',[0.08 0.72 0.075 0.1],...
    'String','0',...
    'Style','edit',...
    'Tag','Bleach_Counts_Avg');

    handles.Bleach_Count_Plot = axes(...
    'Parent',handles.Bleach_Count_Panel,...
    'Position',[0.22 0.18 0.76 0.745],...
    'Color', handles.AxesColor,...
    'XColor', handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'FontSize',13,...
    'Tag','Bleach_Count_Plot');
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% FRET Tab
    for i=1
    handles.Bleach_FRET_Tab= uitab(handles.Bleach_Second_Tab,...
    'title','FRET',...
    'Tag','Bleach_FRET_Tab');
    handles.Bleach_FRET_Panel = uibuttongroup(...
    'Parent',handles.Bleach_FRET_Tab,...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Position',[0 0 1 1],...
    'Tag','Bleach_FRET_Panel');

    handles.Bleach_FRET_Plot2 = axes(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Position',[0.05 0.18 0.20 0.745],...
    'Color',handles.AxesColor,...
    'XColor', handles.ForeColor,...
    'YColor', handles.ForeColor,...
    'FontSize',13,...
    'Tag','Bleach_FRET_Plot2');

    handles.Bleach_FRET_Plot3 = axes(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Position',[0.30 0.18 0.20 0.745],...
    'Color',handles.AxesColor,...
    'XColor', handles.ForeColor,...
    'YColor', handles.ForeColor,...
    'FontSize',13,...
    'Tag','Bleach_FRET_Plot3');

    handles.Bleach_FRET_Plot4 = axes(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Position',[0.55 0.18 0.20 0.745],...
    'Color',handles.AxesColor,...
    'FontSize',13,...
    'XColor',handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'Tag','Bleach_FRET_Plot4');

    handles.Bleach_Gamma_Text = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.BackColor,...
    'ForegroundColor', handles.ForeColor,...
    'HorizontalAlignment', 'left',...
    'FontSize',12,...
    'Position',[0.775 0.85 0.2 0.1],...
    'String','',...
    'Style','text',...
    'Tag','Bleach_Gamma_Text');

    handles.Bleach_CT_Text = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.BackColor,...
    'ForegroundColor', handles.ForeColor,...
    'HorizontalAlignment', 'left',...
    'FontSize',12,...
    'Position',[0.775 0.75 0.2 0.1],...
    'String','',...
    'Style','text',...
    'Tag','Bleach_CT_Text');

    handles.Total_Intensity = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.BackColor,...
    'ForegroundColor', handles.ForeColor,...
    'FontSize',11,...
    'Callback',@UpdateBleach,...
    'Position',[0.775 0.65 0.2 0.1],...
    'String','Show total intensity',...
    'Style','checkbox',...
    'Value',0,...
    'Tag','Total_Intensity');

    handles.Avg_CT = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.BackColor,...
    'ForegroundColor', handles.ForeColor,...
    'FontSize',11,...
    'Callback',@Correction_BG_Callback,...
    'Position',[0.775 0.55 0.2 0.1],...
    'String','Use avegage Crosstalk:',...
    'Style','checkbox',...
    'Value',0,...
    'Tag','Avg_CT');

    handles.Avg_Gamma = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.BackColor,...
    'ForegroundColor', handles.ForeColor,...
    'FontSize',11,...
    'Callback',@Correction_BG_Callback,...
    'Position',[0.775 0.45 0.20 0.1],...
    'String','Use avegage Gamma:',...
    'Style','checkbox',...
    'Value',0,...
    'Tag','Avg_Gamma');     

    handles.Extraplot = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.ControlColor,...
    'ForegroundColor', handles.DisabledColor,...
    'FontSize',11,...
    'Callback',@UpdateBleach,...
    'Position',[0.775 0.325 0.20 0.1],...
    'String',{'Int vs. Lifetime (Bin)','Int vs. Lifetime (Trace)' 'Int vs. Gamma','Int vs. Beta', 'Beta vs. Gamma'},...
    'Style','popupmenu',...
    'Value',1,...
    'Tag','Extraplot'); 

    handles.Fitted_Lifetime = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.BackColor,...
    'ForegroundColor', handles.ForeColor,...
    'FontSize',11,...
    'Callback',@UpdateBleach,...
    'Position',[0.775 0.2 0.20 0.1],...
    'String','Use fitted lifetimes',...
    'Style','checkbox',...
    'Value',0,...
    'Tag','Fitted_Lifetime');  

    handles.Fitted_Delay = uicontrol(...
    'Parent',handles.Bleach_FRET_Panel,...
    'Units','normalized',...
    'BackgroundColor', handles.BackColor,...
    'ForegroundColor', handles.ForeColor,...
    'FontSize',11,...
    'Callback',@UpdateBleach,...
    'Position',[0.775 0.075 0.20 0.1],...
    'String','Use fitted delay',...
    'Style','checkbox',...
    'Value',0,...
    'Tag','Fitted_Delay'); 


    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Correlation Tab
    for i=1
    handles.Bleach_Cor_Tab= uitab(handles.Bleach_Second_Tab,...
    'title','Cor',...
    'Tag','Bleach_Cor_Tab');
    handles.Bleach_Cor_Panel = uibuttongroup(...
    'Parent',handles.Bleach_Cor_Tab,...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Position',[0 0 1 1],...
    'Tag','Bleach_Cor_Panel');

    handles.Bleach_Cor = uicontrol(...
    'Parent',handles.Bleach_Cor_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Cor_Callback,...
    'FontSize',11,...
    'Position',[0.01 0.85 0.1 0.1],...
    'String','Correlate',...
    'Tag','Bleach_Cor');

    handles.Bleach_Cor_Save = uicontrol(...
    'Parent',handles.Bleach_Cor_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Cor_Save_Callback,...
    'FontSize',11,...
    'Position',[0.01 0.4 0.1 0.1],...
    'String','Save Correlation',...
    'Tag','Bleach_Cor_Save');

    handles.Cor_Average = uicontrol(...
    'Parent',handles.Bleach_Cor_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'Enable','on',...
    'Value',0,...
    'Callback',@Update_Cor_Plot,...
    'FontSize',11,...
    'Position',[0.01 0.7 0.1 0.1],...
    'String','Show average',...
    'Style','checkbox',...
    'Tag','Cor_Number');

    handles.Bleach_ACF1 = uicontrol(...
    'Parent',handles.Bleach_Cor_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.12 0.85 0.06 0.1],...
    'String','ACF1',...
    'Style','radiobutton',...
    'Value',1,...
    'Tag','Bleach_ACF1');

    handles.Bleach_ACF2 = uicontrol(...
    'Parent',handles.Bleach_Cor_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.12 0.7 0.06 0.1],...
    'String','ACF2',...
    'Style','radiobutton',...
    'Tag','Bleach_ACF2');

    handles.Bleach_CCF = uicontrol(...
    'Parent',handles.Bleach_Cor_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.12 0.55 0.06 0.1],...
    'String','CCF',...
    'Style','radiobutton',...
    'Tag','Bleach_CCF');

    handles.Bleach_Cor_Plot = axes(...
    'Parent',handles.Bleach_Cor_Panel,...
    'Position',[0.22 0.18 0.76 0.745],...
    'Color',handles.AxesColor,...
    'FontSize',13,...
    'XColor',handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'XScale','log',...
    'Tag','Bleach_Cor_Plot');
    handles.Bleach_Cor_Plot.XLabel.String = 'time lag [s]';
    handles.Bleach_Cor_Plot.YLabel.String = 'G(\tau)';
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Buttons Tab
    for i=1

    handles.Bleach_Button_Tab= uitab(handles.Bleach_Second_Tab,...
    'title','Buttons',...
    'Tag','Bleach_Button_Tab');
    handles.Bleach_Buttons_Panel = uibuttongroup(...
    'Parent',handles.Bleach_Button_Tab,...
    'BackgroundColor', handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Position',[0 0 1 1],...
    'Tag','Bleach_Buttons_Panel');

    handles.Bleach_Previous = uicontrol(...
    'Parent',handles.Bleach_Buttons_Panel,...
    'Units','normalized',...
    'Callback',@Bleach_Previous_Callback,...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.01 0.825 0.125 0.125],...
    'String','Previous (left)',...
    'Tag','Bleach_Previous');

    handles.Bleach_Next = uicontrol(...
    'Parent',handles.Bleach_Buttons_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Next_Callback,...
    'FontSize',11,...
    'Position',[0.15 0.825 0.125 0.125],...
    'String','Next (right)',...
    'Tag','Bleach_Next');

    handles.Bleach_Delete = uicontrol(...
    'Parent',handles.Bleach_Buttons_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Delete_Callback,...
    'FontSize',11,...
    'Position',[0.01 0.3 0.125 0.125],...
    'String','Delete (del)',...
    'Tag','Bleach_Delete');

    handles.Bleach_Find = uicontrol(...
    'Parent',handles.Bleach_Buttons_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Find_Callback,...
    'FontSize',11,...
    'Position',[0.15 0.65 0.125 0.125],...
    'String','Find Bleach (up)',...
    'Tag','Bleach_Find');

    handles.Bleach_Undo = uicontrol(...
    'Parent',handles.Bleach_Buttons_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Undo_Callback,...
    'FontSize',11,...
    'Position',[0.01 0.65 0.125 0.125],...
    'String','Undo Find (down)',...
    'Tag','Bleach_Undo');

    handles.Bleach_FindAll = uicontrol(...
    'Parent',handles.Bleach_Buttons_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_FindAll_Callback,...
    'FontSize',11,...
    'Position',[0.15 0.475 0.125 0.125],...
    'String','Find all (end)',...
    'Tag','Bleach_FindAll');

    handles.Bleach_UndoAll = uicontrol(...
    'Parent',handles.Bleach_Buttons_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_UndoAll_Callback,...
    'FontSize',11,...
    'Position',[0.01 0.475 0.125 0.125],...
    'String','Undo All (insert)',...
    'Tag','Bleach_UndoAll');  
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Lifetime Tab
    for i=1

    handles.Bleach_Lifetime_Tab= uitab(handles.Bleach_Second_Tab,...
    'title','Lifetime',...
    'Tag','Bleach_Lifetime_Tab');
    handles.Bleach_Lifetime_Panel = uibuttongroup(...
    'Parent',handles.Bleach_Lifetime_Tab,...
    'BackgroundColor', handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Position',[0 0 1 1],...
    'Tag','Bleach_Lifetime_Panel');

    handles.Load_Lifetime_D = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Callback',@Bleach_Reload_Lifetime_D,...
    'FontSize',11,...
    'Position',[0.01 0.85 0.12 0.1],...
    'String','Load donor lifetimes',...
    'Tag','Load_Lifetime_D');

    handles.Load_Lifetime_All = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Reload_Lifetime_All,...
    'FontSize',11,...
    'Position',[0.14 0.85 0.12 0.1],...
    'String','Load all PIE channels',...
    'Tag','Load_Lifetime_D');


    handles.Load_IRF_D = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Callback',@Bleach_Load_IRF_D,...
    'FontSize',11,...
    'Position',[0.01 0.7 0.12 0.1],...
    'String','Load donor IRF',...
    'Tag','Load_IRF_D');

    handles.Load_IRF_All = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Bleach_Load_IRF_All,...
    'FontSize',11,...
    'Position',[0.14 0.7 0.12 0.1],...
    'String','Load all PIE channels',...
    'Tag','Load_IRF_All');

    handles.Fit_Lifetime_D = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Callback',@Fit_Lifetime_D,...
    'Enable','inactive',...
    'FontSize',11,...
    'Position',[0.01 0.55 0.12 0.1],...
    'String','Load IRF first',...
    'Tag','Fit_Lifetime_D');

    handles.Fit_Lifetime_All = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.DisabledColor,...
    'Enable','inactive',...
    'Callback',@Fit_Lifetime_All,...
    'FontSize',11,...
    'Position',[0.14 0.55 0.12 0.1],...
    'String','Load IRFs first',...
    'Tag','Fit_Lifetime_All');

    handles.D_Lifetime_text = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'FontSize',11,...
    'Position',[0.01 0.425 0.175 0.1],...
    'String','Donor only lifetime [ns]:',...
    'Tag','D_Lifetime_text');

    handles.D_Lifetime = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Enable','inactive',...
    'Style','edit',...
    'FontSize',11,...
    'Position',[0.01 0.325 0.12 0.1],...
    'String','-/-',...
    'Tag','D_Lifetime');

    handles.DA_Lifetime_text = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'FontSize',11,...
    'Position',[0.01 0.2 0.175 0.1],...
    'String','Donor/Acceptor Lifetime [ns]:',...
    'Tag','DA_Lifetime_text');

    handles.DA_Lifetime = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Enable','inactive',...
    'Style','edit',...
    'FontSize',11,...
    'Position',[0.01 0.1 0.12 0.1],...
    'String','-/-',...
    'Tag','DA_Lifetime');

    handles.A_Lifetime = uicontrol(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Enable','inactive',...
    'Style','edit',...
    'FontSize',11,...
    'Position',[0.14 0.1 0.12 0.1],...
    'String','-/-',...
    'Tag','A_Lifetime');

    handles.Lifetime_Plot = axes(...
    'Parent',handles.Bleach_Lifetime_Panel,...
    'Position',[0.42 0.18 0.56 0.745],...
    'Color',handles.AxesColor,...
    'FontSize',13,...
    'XColor',handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'Tag','Lifetime_Plot');

    end

    %J_Bleach_Second_Tab = getappdata(handle(handles.Bleach_Second_Tab),'JTabbedPane');
    %J_Bleach_Second_Tab.setEnabledAt(1,false)
    %J_Bleach_Second_Tab.setEnabledAt(2,false)
    %J_Bleach_Second_Tab.setEnabledAt(3,false)
    %J_Bleach_Second_Tab.setEnabledAt(4,false)

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Main Plots %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for i=1

    handles.Bleach_Plot_Panel = uipanel(...
    'Parent',Figure,...
    'BackgroundColor', handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Position',[0.15 0.2975 0.8475 0.672],...
    'Tag','Bleach_Plot_Panel' );

    handles.Bleach_Plot = axes(...
    'Parent',handles.Bleach_Plot_Panel,...
    'Position',[0.05 0.43 0.7 0.5],...
    'Color',handles.AxesColor,...
    'FontSize',13,...
    'XColor',handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'ButtonDownFcn',@Bleach_Plot_ButtonDownFcn,...
    'Tag','Bleach_Plot');
    set(get(gca,'XLabel'),'String','time [s]','Color',handles.ForeColor)
    set(get(gca,'YLabel'),'String','kCounts per second','Color',handles.ForeColor)

    handles.Bleach_Hist = axes(...
    'Parent',handles.Bleach_Plot_Panel,...
    'Position',[0.76 0.43 0.19 0.5],...
    'Color',handles.AxesColor,...
    'FontSize',13,...
    'XColor',handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'Tag','Bleach_Hist',...
    'XTick',[],...
    'YTick',[],...
    'box', 'on');

    handles.Bleach_FRET = axes(...
    'Parent',handles.Bleach_Plot_Panel,...
    'Position',[0.05 0.08 0.7 0.275],...
    'Color',handles.AxesColor,...
    'FontSize',13,...
    'XColor',handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'Tag','Bleach_FRET');
    %set(gca,'XAxisLocation','top');
    %set(gca,'XTickLabel',[]);
    set(get(gca,'YLabel'),'String','Proximity Ratio','Color',handles.ForeColor)
    
    handles.Bleach_FRET_Hist = axes(...
    'Parent',handles.Bleach_Plot_Panel,...
    'Position',[0.76 0.08 0.19 0.275],...
    'Color',handles.AxesColor,...
    'FontSize',13,...
    'XColor',handles.ForeColor,...
    'YColor',handles.ForeColor,...
    'Tag','Bleach_FRET_Hist',...
    'XTick',[],...
    'YTick',[],...
    'box', 'on');
    
    linkaxes([handles.Bleach_Plot,handles.Bleach_FRET],'x');
    
    handles.Bleach_Progressbar = uipanel(...
    'Parent',handles.Bleach_Plot_Panel,...
    'BackgroundColor', handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Units','normalized',...
    'Position', [0.099 0.944 0.802 0.047],...
    'Tag','Bleach_Progressbar');

    handles.Text_Filename = uicontrol(...
    'Parent',handles.Bleach_Progressbar,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.01 0.01 0.98 0.80],...
    'String','',...
    'Style','text',...
    'Tag','Text_Filename');
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Info Panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for i=1
    handles.Bleach_Info_Panel = uipanel(...
    'Parent',Figure,...
    'Title',blanks(0),...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Clipping','on',...
    'Position',[0.00205 0.49 0.13925 0.19],...
    'Tag','Bleach_Info_Panel');

    handles.AIB = uicontrol(...
    'Parent',handles.Bleach_Info_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',12,...
    'Position',[0.05 0.75 0.9 0.2],...
    'String','Average Intensity / Background',...
    'Style','text',...
    'Tag','AIB');

    handles.Bleach_Avg = uicontrol(...
    'Parent',handles.Bleach_Info_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',10,...
    'Position',[0.25 0.525 0.7 0.2],...
    'String',{  '0/0'; '0/0' },...
    'Style','text',...
    'Tag','Bleach_Avg');

    handles.BT = uicontrol(...
    'Parent',handles.Bleach_Info_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',10,...
    'HorizontalAlignment','left',...
    'Position',[0.05 0.625 0.2 0.1],...
    'String','Blue',...
    'Style','text',...
    'Tag','BT');

    handles.RT = uicontrol(...
    'Parent',handles.Bleach_Info_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',10,...
    'HorizontalAlignment','left',...
    'Position',[0.05 0.525 0.2 0.1],...
    'String','Red',...
    'Style','text',...
    'Tag','RT');

    handles.SF = uicontrol(...
    'Parent',handles.Bleach_Info_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',12,...
    'HorizontalAlignment','left',...
    'Position',[0.05 0.375 0.5 0.1],...
    'String','Selected File',...
    'Style','text',...
    'Tag','SF');

    handles.Bleach_Show = uicontrol(...
    'Parent',handles.Bleach_Info_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'Enable','inactive',...
    'FontSize',12,...
    'Callback',@Bleach_Show_Callback,...
    'Position',[0.05 0.25 0.5 0.1],...
    'String','0/0',...
    'Style','edit',...
    'Tag','Bleach_Show');      
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Additional Panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for i=1

    handles.Bleach_Additional_Panel = uipanel(...
    'Parent',Figure,...
    'BackgroundColor',handles.BackColor,...
    'HighlightColor',handles.ControlColor,...
    'ShadowColor',handles.ShadowColor,...
    'Title',blanks(0),...
    'Clipping','on',...
    'Position',[0.00205 0.297 0.13925 0.19],...
    'Tag','Bleach_Additional_Panel');

    handles.Subtract_BG = uicontrol(...
    'Parent',handles.Bleach_Additional_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Callback',@Correction_BG_Callback,...
    'Position',[0.03 0.875 0.94 0.1],...
    'String','Subtract background',...
    'Style','checkbox',...
    'Value',1,...
    'Tag','Subtract_BG');

    handles.Subtract_CT = uicontrol(...
    'Parent',handles.Bleach_Additional_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Callback',@Correction_BG_Callback,...
    'Position',[0.03 0.75 0.94 0.1],...
    'String','Subtract cross talk',...
    'Style','checkbox',...
    'Value',1,...
    'Tag','Subtract_CT');

    handles.Correct_Gamma = uicontrol(...
    'Parent',handles.Bleach_Additional_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Callback',@Correction_BG_Callback,...
    'Position',[0.03 0.625 0.94 0.1],...
    'String','Correct for gamma',...
    'Style','checkbox',...
    'Value',1,...
    'Tag','Correct_Gamma'); 

    handles.Popup_SecondPlot = uicontrol(...
    'Parent',handles.Bleach_Additional_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.DisabledColor,...
    'FontSize',11,...
    'Callback',@UpdateBleach,...
    'Position',[0.03 0.5 0.94 0.1],...
    'String','Plot Microtime',...
    'Style','popupmenu',...
    'Value',1,...
    'Tag','Popup_SecondPlot'); 

    handles.Lifetime_Text = uicontrol(...
    'Parent',handles.Bleach_Additional_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.03 0.325 0.94 0.1],...
    'String','Donor Lifetime [ns]:',...
    'HorizontalAlignment','left',...
    'Style','text',...
    'Tag','Lifetime_Text'); 

    handles.Lifetime = uicontrol(...
    'Parent',handles.Bleach_Additional_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',12,...
    'Callback',@Correct_Lifetime,...
    'Position',[0.03 0.2 0.3 0.1],...
    'String','3.4',...
    'Style','edit',...
    'Tag','Lifetime');

    handles.Avg_Lifetime = uicontrol(...
    'Parent',handles.Bleach_Additional_Panel,...
    'Units','normalized',...
    'BackgroundColor',handles.BackColor,...
    'ForegroundColor',handles.ForeColor,...
    'FontSize',11,...
    'Position',[0.03 0.075 0.94 0.1],...
    'String','Use Average Delay',...
    'Style','checkbox',...
    'Callback',@UpdateBleach,...
    'Value',1,...
    'Tag','Avg_Lifetime');

    end
    


    guidata(Figure,handles);
else
    figure(h);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Functions to Load and Bin Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%% Select MT Channel for analysis
function Bleach_Channel_Callback(~,~)
handles = guidata(gcbo);

global UserValues


UserValues.Trace.DonPar=get(handles.Bleach_Channel, 'Value');
%UserValues.Trace.DonPar.Name=UserValues.PIE.Name{get(handles.Bleach_Channel, 'Value')};
LSUserValues(1);
function Bleach_Second_Callback(~,~)
handles = guidata(gcbo);
global UserValues

UserValues.Trace.AccPar=get(handles.Bleach_Second, 'Value');
UserValues.Trace.AccPar.Name=UserValues.PIE.Name{get(handles.Bleach_Second, 'Value')};
LSUserValues(1);
function Bleach_Direct_Callback(~,~)
handles = guidata(gcbo);
global UserValues

UserValues.Trace.DirPar.Value=get(handles.Bleach_Direct, 'Value');
UserValues.Trace.DirPar.Name=UserValues.PIE.Name{get(handles.Bleach_Direct, 'Value')};
LSUserValues(1);
%%%% Set Bin Size for trace generation
function Bleach_Bin_Callback(~,~)
handles = guidata(gcbo);
number=str2double(get(handles.Bleach_Bin,'String'));
if numel(number)==0
    set(handles.Bleach_Bin,'String','50')
elseif numel(number)>1
    set(handles.Bleach_Bin,'String',num2str(number(1)))
end

%%%% Select, if second color should be Used
function Use_Second_Callback(~,~)
handles = guidata(gcbo);
if get(handles.Use_Second,'Value')
    set(handles.Bleach_Second,...
        'Enable','on',...
        'BackgroundColor',[1,1,0.5],...
        'ForegroundColor',[0 0 0]);
        set(handles.Use_Direct,...
        'Enable','on')
    if get(handles.Use_Direct,'Value')
        set(handles.Bleach_Direct,...
        'Enable','on',...
        'BackgroundColor',[1,0.5,0.5],...
        'ForegroundColor',[0 0 0]);
    else
        set(handles.Bleach_Direct,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);        
    end
else
    set(handles.Bleach_Second,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);
    set(handles.Bleach_Direct,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);
    set(handles.Use_Direct,...
        'Value',0,...
        'Enable','inactive')
end


%%%% Loads Data and generates trace structure
function Bleach_Load_Callback(hObject,~)
handles = guidata(gcbo);
global UserValues;
global Trace;
global PamMeta;


if strcmp(get(hObject,'Tag'),'Bleach_Reload') 
    FileName=cell(size(Trace.FullFileName,1),1);  
    for i=1:size(Trace.FullFileName,1)
          [PathName,FileName{i},ext] = fileparts(Trace.FullFileName{i,1});
          FileName{i} = [FileName{i} ext];
%         pos=strfind(Trace.FullFileName{i,1},'\');
%         FileName{i}=Trace.FullFileName{i,1}(pos(end)+1:end);
%         PathName=Trace.FullFileName{i,1}(1:pos(end));
    end
    FilterIndex=1;
else
    LSUserValues(0);
    [FileName, PathName, FilterIndex] = uigetfile({'*1.spc', 'Becker&Hickl SPC 140/150 file (*1.spc)';...
                                         '*_BF.mat', 'Bleach Finder Analysis File (*_BF.m)'},...
                                         'Choose files to load',...
                                         UserValues.File.Path, 'MultiSelect', 'on');
end   
    
if ~isequal(FileName,0)
    arrayfun(@cla,findall(gcf,'type','axes'));
    %set(handles.Bleach_Second_Tab,'SelectedIndex',1);
    if ~iscell(FileName)
        FileName = {FileName};
    end
    
    if FilterIndex==1
    
        FileName = sort(FileName);
        
        PamMeta.Selected_MT_Patches(:) = 1;
        UserValues.PathName = PathName;
        
        set(get(handles.Bleach_Progressbar,'Children'),'Visible','off');
        %%progressbar(0,1,handles.Bleach_Progressbar);
        
        Trace=[];
        Trace.Data=[];
        Trace.Microtime=[];
        Trace.Bleach=[];
        Trace.Smooth=[];
        Trace.FullFileName=[];
        Trace.G_array=[];
        Trace.BG=[];
        Trace.Abort=[];
        Trace.Manual=[];
        Trace.Bin=0;
        Trace.TH=[0 0 0 0 0 0 0 0 0 0];
        Trace.CT=[];
        Trace.Gamma=[];
        Trace.Delay=[];
        Trace.Lifetime=[];
        Trace.MT=[];
        Trace.MT_Hist_before=[];
        Trace.MT_Hist_after=[];
        Trace.IRF=[];
        if get(handles.Use_Direct, 'Value')
            Trace.SecondColor=2;
        elseif get(handles.Use_Second, 'Value')
            Trace.SecondColor=1;
        else
            Trace.SecondColor=0;
        end
        k=1;
        
        for h = 1:numel(FileName)
            UserValues.FullFileName = fullfile(PathName, FileName{h}); 
            LSUserValues(1);
            
            FullFileName{1}=fullfile(PathName,[FileName{h}(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.DonPar))-1) '.spc']);
            if get(handles.Use_Second, 'Value')
                FullFileName{2}=fullfile(PathName,[FileName{h}(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.AccPar))-1) '.spc']);
            else
                FullFileName{2}=FullFileName{1};
            end            
                
            UserValues.PIE.NumMicrotimeBins = 4096;

            fid1 = fopen([FullFileName{1}(1:end-9) '_Track_info' FullFileName{1}(end-8:end-6) '.txt']);
            fid2 = fopen([FullFileName{1}(1:end-9) '_Track_Abort_info' FullFileName{1}(end-8:end-6) '.txt']);
            fid3 = fopen([FullFileName{1}(1:end-9) '_MeasureCursor_info' FullFileName{1}(end-8:end-6) '.txt']);
            fid4 = fopen([FullFileName{1}(1:end-10) '_Track_info' FullFileName{1}(end-9:end-6) '.txt']);
            fid5 = fopen([FullFileName{1}(1:end-10) '_Track_Abort_info' FullFileName{1}(end-9:end-6) '.txt']);
            fid6 = fopen([FullFileName{1}(1:end-10) '_MeasureCursor_info' FullFileName{1}(end-9:end-6) '.txt']);

            if fid1~=-1 || fid2~=-1 || fid3~=-1 || fid4~=-1 || fid5~=-1 || fid6~=-1
                Header = FabsurfInfo(UserValues.FullFileName,[1 4 7] );
                Imagetime = Header.Imagetime;
                Freq=1/(Header.RepRate/1000);
                Tracktime=Header.MTime;
                if fid1~=-1 || fid2~=-1 || fid4~=-1 || fid5~=-1
                    Imagetime=Tracktime*1000;
                end
                ImageCounts=Imagetime/1000*Freq;
                BinNum=Imagetime/str2double(get(handles.Bleach_Bin, 'String'));
                %HistBins=0:(ImageCounts/BinNum):(ImageCounts-(ImageCounts/BinNum));
                HistBins = linspace(0,ImageCounts,BinNum);
                if exist(FullFileName{1}, 'file') && exist(FullFileName{2}, 'file')                      
                    From=(UserValues.PIE.From(UserValues.Trace.DonPar));
                    To=(UserValues.PIE.To(UserValues.Trace.DonPar));
                    [MacroTimeArray,MicroTimeArray,~,~,~]= Read_BH(FullFileName{1}, Inf,[0 0 0],'SPC-140/150/830/130');
                    if isempty(MacroTimeArray{1})
                        continue;
                    end
                    Microtime{1}=(MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To)-From)*40/4096;
                    Macrotime{1}=MacroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To);

                    Trace.Data{k,1}=histc(Macrotime{1},HistBins);
                    j=0;
                    nonneg=Trace.Data{k,1}>0;
                    for i=1:numel(Trace.Data{k,1})
                        if nonneg(i)
                            Trace.Microtime{k,1}(i)=mean(Microtime{1}(j+1:j+Trace.Data{k,1}(i)));
                            j=j+Trace.Data{k,1}(i);
                        else
                            Trace.Microtime{k,1}(i)=0;
                        end
                    end    

                    Trace.Abort{k}=find(Trace.Data{k,1},1,'last');

                    lmax = tvdiplmax(Trace.Data{k,1}(1:Trace.Abort{k}));
                    [Smooth, ~, ~] = tvdip(Trace.Data{k,1}(1:Trace.Abort{k}),lmax*1e-2,0,1e-3,100);
                    Dif=(max(Smooth)-min(Smooth))/10;
                    l=1;steps=0;
                    while l<numel(Smooth)
                        step=find(((abs(Smooth(l+1:end)-Smooth(l))>Dif) & (Smooth(l+1:end)>0)),1,'first')+l;
                        if isempty(step)
                            step=numel(Smooth);
                        end
                        steps=[steps step];
                        l=step;
                    end
                    for i=1:(numel(steps)-1)
                        Trace.Smooth{k,1}(steps(i)+1:steps(i+1))=mean(Smooth(steps(i)+1:steps(i+1)));
                    end

                    Trace.FullFileName{k,1} = FullFileName{1};
                    Trace.Manual{k}=0;
                    Trace.Bleach{k,1}=[];
                    Trace.BG{k,1}=[0 0];
                    Trace.Delay(k)=0;
                    Trace.CT{k,1}=0;
                    Trace.CT{k,2}=0;
                    Trace.Gamma{k,1}=1;
                    Trace.Gamma{k,2}=1;
                end

                if get(handles.Use_Second, 'Value') && exist(FullFileName{1}, 'file') && exist(FullFileName{2}, 'file')
                    From=(UserValues.PIE.From(UserValues.Trace.AccPar));
                    To=(UserValues.PIE.To(UserValues.Trace.AccPar));
                    [MacroTimeArray,MicroTimeArray,~,~,~]= Read_BH(FullFileName{2}, Inf,[0 0 0],'SPC-140/150/830/130');
                    Microtime{2}=(MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To)-From)*40/4096;
                    Macrotime{2}=MacroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To);

                    Trace.Data{k,2}=histc(Macrotime{2},HistBins);
                    j=0;
                    nonneg=Trace.Data{k,2}>0;
                    for i=1:numel(Trace.Data{k,2})
                        if nonneg(i)
                            Trace.Microtime{k,2}(i)=mean(Microtime{2}(j+1:j+Trace.Data{k,2}(i)));
                            j=j+Trace.Data{k,2}(i);
                        else
                            Trace.Microtime{k,2}(i)=0;
                        end
                    end

                    Trace.FullFileName{k,2} = FullFileName{2};
                    Trace.Bleach{k,2}=[];
                    Trace.BG{k,2}=[0 0];



                    lmax = tvdiplmax(Trace.Data{k,2}(1:Trace.Abort{k}));
                    [Smooth, ~, ~] = tvdip(Trace.Data{k,2}(1:Trace.Abort{k}),lmax*1e-2,0,1e-3,100);

                    Dif=(max(Smooth)-min(Smooth))/10;
                    l=1;steps=0;
                    while l<numel(Smooth)
                        step=find(((abs(Smooth(l+1:end)-Smooth(l))>Dif) & (Smooth(l+1:end)>0)),1,'first')+l;
                        if isempty(step)
                            step=numel(Smooth);
                        end
                        steps=[steps step];
                        l=step;                    
                    end
                    for i=1:(numel(steps)-1)
                        Trace.Smooth{k,2}(steps(i)+1:steps(i+1))=mean(Smooth(steps(i)+1:steps(i+1)));
                    end

                end

                if get(handles.Use_Direct, 'Value') && exist(FullFileName{1}, 'file') && exist(FullFileName{2}, 'file')
                    From=(UserValues.PIE.From(UserValues.Trace.DirPar.Value));
                    To=(UserValues.PIE.To(UserValues.Trace.DirPar.Value));
                    Microtime{3}=(MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To)-From)*40/4096;
                    Macrotime{3}=MacroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To);

                    Trace.Data{k,3}=histc(Macrotime{3},HistBins);
                    j=0;
                    nonneg=Trace.Data{k,3}>0;
                    for i=1:numel(Trace.Data{k,3})
                        if nonneg(i)
                            Trace.Microtime{k,3}(i)=mean(Microtime{3}(j+1:j+Trace.Data{k,3}(i)));
                            j=j+Trace.Data{k,3}(i);
                        else
                            Trace.Microtime{k,3}(i)=0;
                        end
                    end

                    Trace.FullFileName{k,3} = FullFileName{2};
                    Trace.Bleach{k,3}=[];
                    Trace.BG{k,3}=[0 0];                       

                    lmax = tvdiplmax(Trace.Data{k,3}(1:Trace.Abort{k}));
                    [Smooth, ~, ~] = tvdip(Trace.Data{k,3}(1:Trace.Abort{k}),lmax*1e-2,0,1e-3,100);

                    Dif=(max(Smooth)-min(Smooth))/10;
                    l=1;steps=0;
                    while l<numel(Smooth)
                        step=find(((abs(Smooth(l+1:end)-Smooth(l))>Dif) & (Smooth(l+1:end)>0)),1,'first')+l;
                        if isempty(step)
                            step=numel(Smooth);
                        end
                        steps=[steps step];
                        l=step;                    
                    end
                    for i=1:(numel(steps)-1)
                        Trace.Smooth{k,3}(steps(i)+1:steps(i+1))=mean(Smooth(steps(i)+1:steps(i+1)));
                    end

                end                    




                %%progressbar((h-1)/numel(FileName),0,handles.Bleach_Progressbar);
                k=k+1;
            end
            fclose('all');
        end
        
        Trace.Length = numel(HistBins);
            
        %%progressbar(1);
        a=get(handles.Bleach_Progressbar,'Children');
        delete(a(1:end-1));
        set(handles.Bleach_Progressbar, 'Title',blanks(0));
        set(a(end),'Visible', 'on');   
 
        
        
        Trace.Bin=str2double(get(handles.Bleach_Bin, 'String'));
        Trace.TH(1)=str2double(get(handles.Bleach_TH,'String'));
        Trace.TH(2)=str2double(get(handles.Bleach_MP,'String'));
        Trace.TH(3)=str2double(get(handles.Bleach_MD,'String'));
        Trace.TH(4)=str2double(get(handles.Bleach_Step,'String'));
        Trace.TH(5)=str2double(get(handles.Bleach_ML,'String'));
        Trace.TH(6)=str2double(get(handles.Second_TH,'String'));
        Trace.TH(7)=str2double(get(handles.Second_MP,'String'));
        Trace.TH(8)=str2double(get(handles.Second_MD,'String'));
        Trace.TH(9)=str2double(get(handles.Second_Step,'String'));
        Trace.TH(10)=str2double(get(handles.Second_ML,'String'));

        Trace.Number = 1;
    
    else
        UserValues.FullFileName = fullfile(PathName, FileName{1});
        UserValues.PathName = PathName;
        LSUserValues(1);
        load(fullfile(PathName, FileName{1}));
        
        set(handles.Bleach_Bin,'String', num2str(Trace.Bin));
        set(handles.Bleach_TH,'String', num2str(Trace.TH(1)));
        set(handles.Bleach_MP,'String', num2str(Trace.TH(2)));
        set(handles.Bleach_MD,'String', num2str(Trace.TH(3)));
        set(handles.Bleach_Step,'String', num2str(Trace.TH(4)));
        set(handles.Bleach_ML,'String', num2str(Trace.TH(5)));
        if Trace.SecondColor == 1
            set(handles.Second_TH,'String', num2str(Trace.TH(6)));
            set(handles.Second_MP,'String', num2str(Trace.TH(7)));
            set(handles.Second_MD,'String', num2str(Trace.TH(8)));
            set(handles.Second_Step,'String', num2str(Trace.TH(9)));
            set(handles.Second_ML,'String', num2str(Trace.TH(10)));
            set(handles.Use_Second,'Value', 1);
        else
            set(handles.Use_Second,'Value', 0);
        end      
    end
    
    switch Trace.SecondColor
        case 0
            set(handles.Colors2Plot,...
                'Value',1,...
                'String','Blue only');
        case 1
            set(handles.Colors2Plot,...
                'String',{'Blue only';'Blue/FRET';'FRET only'},...       
                'Value',2);
        case 2
            set(handles.Colors2Plot,...
                'String',{'Blue only';'Blue/FRET';'FRET only';'Full PIE';'Red';'Direct only'},...       
                'Value',4);
    end   
    
%%% Activates or deactivates certain controls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    for i=1
    set(handles.Bleach_Previous,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Next,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Find,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_FindAll,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Undo,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_UndoAll,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Delete,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Cor,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_TH,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Show,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Save,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_MP,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_MD,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_Step,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);
    set(handles.Bleach_ML,...
    'Enable','on',...
    'BackgroundColor',handles.ControlColor,...
    'ForegroundColor',handles.ForeColor);

    if ~isempty(Trace.MT)
        set(handles.Fit_Lifetime_D,...
            'String','Fit donor lifetime',...    
            'Enable','on',...
            'BackgroundColor',handles.ControlColor,...
            'ForegroundColor',handles.ForeColor);
        set(handles.Fit_Lifetime_D,...
            'String','Fit global lifetime',...    
            'Enable','on',...
            'BackgroundColor',handles.ControlColor,...
            'ForegroundColor',handles.ForeColor);            
    else
        set(handles.Fit_Lifetime_D,...
            'String','Load IRF first',...    
            'Enable','inactive',...
            'BackgroundColor',handles.BackColor,...
            'ForegroundColor',handles.DisabledColor);
        set(handles.Fit_Lifetime_All,...
            'String','Load IRFs first',...    
            'Enable','inactive',...
            'BackgroundColor',handles.BackColor,...
            'ForegroundColor',handles.DisabledColor); 
    end
    
    
    if Trace.SecondColor>0
        set(handles.Second_TH,...
        'Enable','on',...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor);
        set(handles.Second_MP,...
        'Enable','on',...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor);
        set(handles.Second_MD,...
        'Enable','on',...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor);
        set(handles.Second_Step,...
        'Enable','on',...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor);
        set(handles.Second_ML,...
        'Enable','on',...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor);
        set(handles.Bleach_Second,...
        'Enable','on',...
        'BackgroundColor',[1 1 0.5],...
        'ForegroundColor',[0 0 0]);
        set(handles.Popup_SecondPlot,...
            'String',{'Plot Microtime','Plot FRET (Int)','Plot FRET (LT)','Plot FRET (Both)'},...
            'Value',1,...
            'Enable','on');
        set(handles.Load_Lifetime_All,...
            'Enable','on',...
            'String', 'Load all lifetimes',...
            'BackgroundColor',handles.ControlColor,...
            'ForegroundColor',handles.ForeColor);
        set(handles.Load_IRF_All,...
            'Enable','on',...
            'String', 'Load all IRF',...
            'BackgroundColor',handles.ControlColor,...
            'ForegroundColor',handles.ForeColor);
        
        
        set(handles.Bleach_Plot,'Position',[0.05 0.43 0.7 0.5]);
        set(handles.Bleach_Hist,'Position', [0.76 0.43 0.19 0.5]);
        set(handles.Bleach_FRET,'Visible','on');
        set(handles.Bleach_FRET_Hist,'Visible','on');
        %J_Bleach_Second_Tab = getappdata(handle(handles.Bleach_Second_Tab),'JTabbedPane');
        %J_Bleach_Second_Tab.setEnabledAt(1,true);
        %J_Bleach_Second_Tab.setEnabledAt(2,true);
        %J_Bleach_Second_Tab.setEnabledAt(3,true);
        %J_Bleach_Second_Tab.setEnabledAt(4,true);
        
    else
        set(handles.Second_TH,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);
        set(handles.Second_MP,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);
        set(handles.Second_MD,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);
        set(handles.Second_Step,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);
        set(handles.Second_ML,...
        'Enable','inactive',...
        'BackgroundColor',handles.BackColor,...
        'ForegroundColor',handles.DisabledColor);
        set(handles.Popup_SecondPlot,...
            'String',{'Plot Microtime'},...
            'Value',1,...
            'Enable','inactive');
             
        set(handles.Bleach_Plot,'Position',[0.05 0.43 0.7 0.5]);
        set(handles.Bleach_Hist,'Position', [0.76 0.43 0.19 0.5]);
        set(handles.Bleach_FRET,'Visible','on');
        set(handles.Bleach_FRET_Hist,'Visible','on');
        
        set(handles.Load_Lifetime_All,...
            'Enable','inactive',...
            'String', 'Load all PIE channels',...
            'BackgroundColor',handles.BackColor,...
            'ForegroundColor',handles.DisabledColor);
        set(handles.Load_IRF_All,...
            'Enable','inactive',...
            'String', 'Load all PIE channels',...
            'BackgroundColor',handles.BackColor,...
            'ForegroundColor',handles.DisabledColor);
        %J_Bleach_Second_Tab = getappdata(handle(handles.Bleach_Second_Tab),'JTabbedPane');
        %J_Bleach_Second_Tab.setEnabledAt(1,false)
        %J_Bleach_Second_Tab.setEnabledAt(2,true);
        %J_Bleach_Second_Tab.setEnabledAt(3,true);
        %J_Bleach_Second_Tab.setEnabledAt(4,true);
    end
    
    set(gcf,'WindowKeyPressFcn',@figure1_KeyPressFcn);
    set(gcf,'WindowKeyReleaseFcn',@figure1_WindowKeyReleaseFcn);
    set(gcf,'WindowScrollWheelFcn',@figure1_WindowScrollWheelFcn);

    end
    
    Trace.Red=Trace.SecondColor+1;
    Colors2Plot_Callback;
end

%%%% Saves Current Analysis
function Bleach_Save_Callback(~,~)
handles = guidata(gcbo);
global UserValues Trace


[FileName,PathName]=uiputfile({'*_BF.mat', 'Bleach Finder Analysis File'},'Save Bleach Finder Analysis', [UserValues.PathName]);

Trace.TH(1)=str2double(get(handles.Bleach_TH,'String'));
Trace.TH(2)=str2double(get(handles.Bleach_MP,'String'));
Trace.TH(3)=str2double(get(handles.Bleach_MD,'String'));
Trace.TH(4)=str2double(get(handles.Second_TH,'String'));
Trace.TH(5)=str2double(get(handles.Second_MP,'String'));
Trace.TH(6)=str2double(get(handles.Second_MD,'String'));

if FileName~=0
    UserValues.PathName=PathName;
    LSUserValues(1);
    
    if strcmp(FileName(end-6:end), '_BF.mat')
        save(fullfile(PathName,FileName), 'Trace');
    else
        save(fullfile(PathName,[FileName(1:end-4), '_BF.mat']), 'Trace');
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Functions to Plot Data and Finding Bleach %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    


%%%% Set Theshold for Bleach finding
function Bleach_TH_Callback(~,~)
handles = guidata(gcbo);
global Trace;

number=str2double(get(handles.Bleach_TH,'String'));
if numel(number)==0
    set(handles.Bleach_TH,'String','50')
elseif numel(number)>1
    set(handles.Bleach_TH,'String',num2str(number(1)))
else
    set(handles.Bleach_TH,'String',num2str(round(number)))
end
UpdateBleach(1,1,Trace.Number, handles)
function Second_TH_Callback(~,~)
handles = guidata(gcbo);
global Trace;

number=str2double(get(handles.Second_TH,'String'));
if numel(number)==0
    set(handles.Second_TH,'String','50')
elseif numel(number)>1
    set(handles.Second_TH,'String',num2str(number(1)))
else
    set(handles.Second_TH,'String',num2str(round(number)))
end
UpdateBleach(1,1,Trace.Number, handles)

%%%% Determines colors to be plotted
function Colors2Plot_Callback(~,~)
global Trace
handles = guidata(gcbo);
switch get(handles.Colors2Plot,'Value')
    case 1
        set(handles.Colors2Plot,'BackgroundColor',[0.5 0.5 1])
        Trace.Colors=1;
    case 2
        set(handles.Colors2Plot,'BackgroundColor',[0.5 1 0.5])
        Trace.Colors=1:2;
    case 3
        set(handles.Colors2Plot,'BackgroundColor',[1 1 0.5])
        Trace.Colors=2;
    case 4
        set(handles.Colors2Plot,'BackgroundColor',[1 1 1])
        Trace.Colors=1:3;
    case 5
        set(handles.Colors2Plot,'BackgroundColor',[1 0.75 0.5])
        Trace.Colors=2:3;
    case 6
        set(handles.Colors2Plot,'BackgroundColor',[0.7 0 0])
        Trace.Colors=3;
end
if any(Trace.Colors==1) && any(Trace.Colors==2)
   set(handles.Popup_SecondPlot,...
       'Enable','on') 
else
   set(handles.Popup_SecondPlot,...
       'Value',1,...
       'Enable','inactive') 
end

UpdateBleach;

%%%% Shows ploted trace number
function Bleach_Show_Callback(~,~)
handles = guidata(gcbo);
global Trace;

TraceNum=str2double(get(handles.Bleach_Show, 'String'));
if (numel(TraceNum)~=1 || TraceNum<0 || TraceNum>numel(Trace.Data) || mod(TraceNum*numel(Trace.Data),1)~=0 || (mod(TraceNum*numel(Trace.Data),1)==0 && TraceNum>1))
    Trace.Number = TraceNum;
    UpdateBleach(1,1,Trace.Number, handles)
elseif (mod(TraceNum*numel(Trace.Data),1)==0 && TraceNum<1)
    Trace.Number=TraceNum*numel(Trace.Data);
    UpdateBleach(1,1,TraceNum*numel(Trace.Data), handles)
else
    UpdateBleach(1,1,TraceNum, handles)
    Trace.Number=TraceNum;
end

%%%% Function for Plot and Trace Structure update    
function UpdateBleach(~,~,Number,handles)
global Trace;
if (nargin<4)
    handles = guidata(gcbo);
end
if (nargin<3) || Number==0
    Number=Trace.Number;
end

%%%% Ploting of Intensity Trace
for k=1
axes(handles.Bleach_Plot);
cla;
hold on

Color{1,1}=[0.5 0.5 0.5]; %%% intensity trace after bleach
Color{1,2}= [0 0.45 0.75];%%% smooth after bleach
Color{1,3}=[0 0 0]; %%% intensity before bleach
Color{1,4}= [0.8510, 0.3255, 0.0980]; %%% smoothed trace
Color{2,1}=[0 0.7 0];
Color{2,2}=[0 0.5 0];
Color{2,3}=[1 1 0.3];
Color{2,4}=[0.7 0.7 0.2];
Color{3,1}=[0.5 0.1 0];
Color{3,2}=[0.4 0 0];
Color{3,3}=[1 0.2 1];
Color{3,4}=[0.7 0.1 0.7];
time=0:str2double(get(handles.Bleach_Bin,'String')):str2double(get(handles.Bleach_Bin,'String'))*(Trace.Abort{Number}-1);
time = time/1000;
set(gca,'XLim',[time(1),time(end)])
BG=cell2mat(Trace.BG(Number,:)')*get(handles.Subtract_BG,'Value');
for i=1:(Trace.SecondColor+1)
    if i==2;
        CT=Trace.CT{Number,2}*Data{1}(1:Trace.Abort{Number})/Gamma;
    else
        CT=zeros(Trace.Abort{Number},1);
    end
    if i==1
        Gamma=Trace.Gamma{Number,2};
    else
        Gamma=1;
    end

    Bleach{i}=(Trace.Bleach{Number,i}(:)-BG(i,2))./str2double(get(handles.Bleach_Bin, 'String')).*1000*Gamma-CT(1:numel(Trace.Bleach{Number,i}));
    NB=numel(Bleach{i});
    if NB>=Trace.Abort{Number}
        NB=Trace.Abort{Number}-1;
    end
    Data{i}=((Trace.Data{Number,i}(1:Trace.Abort{Number})-BG(i,2))./str2double(get(handles.Bleach_Bin, 'String')).*1000*Gamma)-CT(1:end);
    SmoothBleach{i}=((Trace.Smooth{Number,i}(1:NB)-BG(i,2))./str2double(get(handles.Bleach_Bin, 'String')).*1000)'-CT(1:NB);
    Smooth{i}=((Trace.Smooth{Number,i}(1:Trace.Abort{Number})-BG(i,2))./str2double(get(handles.Bleach_Bin, 'String')).*1000*Gamma)'-CT(1:end);
    Data{i} = Data{i}/1000;
    SmoothBleach{i} = SmoothBleach{i}/1000;
    Smooth{i} = Smooth{i}/1000;
    Bleach{i} = Bleach{i}/1000;
    if any(i==Trace.Colors)
        plot(time((max([NB 1])):Trace.Abort{Number}),Smooth{i}((max([NB 1])):Trace.Abort{Number}),'Color',Color{i,2},'LineStyle',':','LineWidth',1);
        plot(time((max([NB 1])):Trace.Abort{Number}),Data{i}((max([NB 1])):Trace.Abort{Number}),'Color',Color{i,1});
        if ~isempty(Bleach{i})
            plot(time(1:NB),Bleach{i}(1:NB),'Color',Color{i,3});
            plot(time(1:NB),SmoothBleach{i}(1:NB),'Color',Color{i,4},'LineStyle','-.','LineWidth',3);
        end
    end
end

TS=str2double(get(handles.Bleach_TH,'String'))*ones(1,numel(time))/1000;
plot(time,TS,'Color',[0 1 0],'LineStyle','--');

if Trace.SecondColor>0
    TS2=str2double(get(handles.Second_TH,'String'))*ones(1,numel(time));
    plot(time,TS2,'Color',[1,0.5,0],'LineStyle','--');
end

plot(time,0*time,'Color','k');

set(get(gca,'XLabel'),'String','time [s]','Color',handles.ForeColor)
set(get(gca,'YLabel'),'String','kCounts per second','Color',handles.ForeColor)
set(get(gca, 'Children'),'HitTest','off')
set(gca,'ButtonDownFcn',@Bleach_Plot_ButtonDownFcn);

set(handles.Bleach_Show, 'String', [num2str(Number), '/', num2str(size(Trace.Data,1))]);
set(handles.Text_Filename, 'String', Trace.FullFileName{Number});
end

%%%% Ploting of Intensity Histogram
for k=1
Color=[];
Color{1}=[0 0.4471 0.7412];
Color{2}='y';
Color{3}='r';
axes(handles.Bleach_Plot);
lim=get(gca,'YLim');
Histogram=zeros((Trace.SecondColor+1)*50,(Trace.SecondColor+1));
axes(handles.Bleach_Hist);
cla;
hold on;
  
for i=1:(Trace.SecondColor+1)
    if isempty(Trace.Bleach{Number,1})
        Histogram(i:(Trace.SecondColor+1):((Trace.SecondColor+1)*49+i),i)=histc(Data{i},linspace(lim(1),lim(2),50));
    else
        Histogram(i:(Trace.SecondColor+1):((Trace.SecondColor+1)*49+i),i)=histc(Bleach{i},linspace(lim(1),lim(2),50));
    end
    h=barh(linspace(lim(1),lim(2),50*(Trace.SecondColor+1)),Histogram(:,i),'hist');
    set(h,'FaceColor',Color{i},'EdgeColor',handles.BackColor,'LineStyle','-');
end
set(gca,'YLim',[lim(1),lim(2)],...
    'XLim',[0, 1.02*max(max(Histogram))],...
    'YAxisLocation','right',...
    'Box','on')
end

%%%% Plots Lifetimes or FRET
for k=1
lifetime = false;
if get(handles.Fitted_Delay,'Value') && isfield(Trace,'Tau_Full')
    Delay=sum(Trace.MT_Hist_after.*(1:numel(Trace.MT_Hist_after)))/sum(Trace.MT_Hist_after)*40/512-Trace.Tau_Full*1e9;
    Lifetime=Trace.Microtime{Number,1}-Delay;
elseif isfield(Trace,'Tau_Full') && isfield(Trace,'Lifetime') && ~isempty(Trace.Lifetime) && ~handles.Avg_Lifetime.Value
    Lifetime = Trace.Lifetime{Number,1}*1E9;
    lifetime = true;
elseif get(handles.Avg_Lifetime,'Value') && sum(Trace.Delay)>0
    Lifetime=Trace.Microtime{Number,1}-mean(Trace.Delay(Trace.Delay>0));
elseif ~get(handles.Avg_Lifetime,'Value')
    Lifetime=Trace.Microtime{Number,1}-Trace.Delay(Number);
elseif isfield(Trace,'IRF') && ~isempty(Trace.IRF) && isfield(Trace,'Delay_IRF')
    Lifetime=Trace.Microtime{Number,1}-Trace.Delay_IRF;
else
    Lifetime=Trace.Microtime{Number,1};
end
axes(handles.Bleach_FRET)
cla; hold on;
set(gca,'XLim',[time(1),time(end)])
if Trace.SecondColor>0
    NumBleach=min([numel(Bleach{1}) numel(Bleach{2})]);
else
    NumBleach=numel(Bleach{1});
end
switch get(handles.Popup_SecondPlot,'Value')
    case 1  %%% Microtime Donor              

        if NumBleach
            plot(time(1:NumBleach),Lifetime((1:NumBleach)),'Color',[0.2,0.3,0.5])
            Lim2=[max([min(Lifetime(1:NumBleach)) 0]), max([max(Lifetime(1:NumBleach)) str2double(get(handles.Lifetime,'String'))])];
            %Lim2=[Lim(1)-0.2*(Lim(2)-Lim(1)), Lim(2)+0.3*(Lim(2)-Lim(1))];
            plot(time(NumBleach:end),Lifetime((NumBleach:Trace.Abort{Number})),'Color',[0.7294 0.8314 0.9569])
        else 
            plot(time,Lifetime((1:Trace.Abort{Number})),'Color',[0.7294 0.8314 0.9569])
            Lim2=[max([min(Lifetime) 0]),max([max(Lifetime) 1.2*str2double(get(handles.Lifetime,'String'))])];
        end
        set(gca,'YLim',Lim2);
        set(gca,'XLim',[time(1),time(end)]);
        set(gca,'XAxisLocation','top');
        set(gca,'XTickLabel',[]);
        if lifetime
            set(get(gca,'YLabel'),'String','Lifetime [ns]','Color',handles.ForeColor);
        else
            set(get(gca,'YLabel'),'String','Average arrival time','Color',handles.ForeColor);
        end
    case 2  %%% Intensity FRET
        if NumBleach
            FRET{1}=Bleach{2}(1:NumBleach)./(Bleach{1}(1:NumBleach)+Bleach{2}(1:NumBleach));
            FRET{2}=Data{2}(NumBleach:end)./(Data{1}(NumBleach:end)+Data{2}(NumBleach:end));
            plot(time(1:NumBleach),FRET{1},'g');
            plot(time(NumBleach:end),FRET{2},'Color',[0,0.3,0]);
        else
            FRET{1}=Data{2}(1:end)./(Data{1}(1:end)+Data{2}(1:end));
            plot(time,FRET{1},'Color',[0,0.3,0]);
        end
        set(gca,'XLim',[time(1),time(end)]);
        set(gca,'YLim',[0 1.1]);
        set(gca,'XAxisLocation','top');
        set(gca,'XTickLabel',[]);
        set(get(gca,'YLabel'),'String','Proximity Ratio','Color',handles.ForeColor)
    case 3  %%% Lifetime FRET
        if NumBleach
            plot(time(1:NumBleach),1-Lifetime((1:NumBleach))/str2double(get(handles.Lifetime,'String')),'y')
            plot(time(NumBleach:end),1-Lifetime((NumBleach:Trace.Abort{Number}))/str2double(get(handles.Lifetime,'String')),'Color',[0.3,0.3,0])
        else
            plot(time,1-Lifetime((1:Trace.Abort{Number}))/str2double(get(handles.Lifetime,'String')),'Color',[0.3,0.3,0])
        end
        set(gca,'XLim',[time(1),time(end)]);
        set(gca,'YLim',[0 1.1]);
        set(gca,'XAxisLocation','top');
        set(gca,'XTickLabel',[]);
        set(get(gca,'YLabel'),'String','Proximity Ratio','Color',handles.ForeColor)
    case 4  %%% Intensity and Lifetime FRET
        if NumBleach
            FRET{1}=Bleach{2}(1:NumBleach)./(Bleach{1}(1:NumBleach)+Bleach{2}(1:NumBleach));
            FRET{2}=Data{2}(NumBleach:end)./(Data{1}(NumBleach:end)+Data{2}(NumBleach:end));
            plot(time(1:NumBleach),FRET{1},'g');
            plot(time(NumBleach:end),FRET{2},'Color',[0,0.3,0]);
            plot(time(1:NumBleach),1-Lifetime((1:NumBleach))/str2double(get(handles.Lifetime,'String')),'y')
            plot(time(NumBleach:end),1-Lifetime((NumBleach:Trace.Abort{Number}))/str2double(get(handles.Lifetime,'String')),'Color',[0.3,0.3,0])
        else
            FRET{1}=Data{2}(1:end)./(Data{1}(1:end)+Data{2}(1:end));
            plot(time,FRET{1},'Color',[0,0.3,0]);
            plot(time,1-Lifetime((1:Trace.Abort{Number}))/str2double(get(handles.Lifetime,'String')),'Color',[0.3,0.3,0])
        end                
end
end

%%%% Ploting of FRET Histogram
for k=1
axes(handles.Bleach_FRET_Hist)
if NumBleach>0
    switch get(handles.Popup_SecondPlot,'Value')
        case 1
            Lim=get(handles.Bleach_FRET,'YLim');
            Lim2=linspace(floor(Lim(1)*10)/10,ceil(Lim(2)*10/10),30);
            LT_hist=histc(Lifetime(1:NumBleach),Lim2);
            h=barh(Lim2,LT_hist,'hist');
            set(h,'FaceColor',[0.2,0.3,0.5],'EdgeColor',handles.BackColor);
            set(gca,'YLim', [min(Lim2),max(Lim2)],...
            'YAxisLocation', 'right',...
            'Box','on')
        case 2           
            FRET_Hist=histc(FRET{1},linspace(0,1.1,60));
            h=barh(linspace(0,1.1,60),FRET_Hist,'hist');
            set(h,'FaceColor','g','EdgeColor',handles.BackColor);
            set(gca,'YLim', [0, 1.1],...
            'YAxisLocation', 'right',...
            'Box','on')
        case 3
            FRET_Hist=histc(1-Lifetime(1:NumBleach)/str2double(get(handles.Lifetime,'String')),linspace(0,1.1,60));
            h=barh(linspace(0,1.1,60),FRET_Hist,'hist');
            set(h,'FaceColor','y','EdgeColor',handles.BackColor);
            set(gca,'YLim', [0, 1.1],...
            'YAxisLocation', 'right',...
            'Box','on')            
        case 4            
            FRET_Hist=zeros(120,2);
            FRET_Hist(1:2:119,1)=histc(FRET{1},linspace(0,1.1,60));
            FRET_Hist(2:2:120,2)=histc(1-Lifetime(1:NumBleach)/str2double(get(handles.Lifetime,'String')),linspace(0,1.1,60));
            h=barh(linspace(0,1.1,120),FRET_Hist(:,1),'hist');
            set(h,'FaceColor','g','EdgeColor',handles.BackColor,'Linestyle','none');
            hold on;
            h=barh(linspace(0,1.1,120),FRET_Hist(:,2),'hist');
            set(h,'FaceColor','y','EdgeColor',handles.BackColor,'Linestyle','none');
            set(gca,'YLim', [0, 1.1],...
            'YAxisLocation', 'right',...
            'Box','on') 
            hold off;            
    end
else
    cla;

end
end
handles.Bleach_FRET_Hist.XTick = [];
handles.Bleach_FRET_Hist.YTick = [];
 
%%% Plots colletive FRET Histogramm
if Trace.SecondColor>0 && strcmp(get(get(handles.Bleach_Second_Tab,'SelectedTab'),'Tag'),'Bleach_FRET_Tab') && exist('FRET','var')
    Calc_FRET(handles);
end
%%%% Plots Photons Counts and Bleach Duration
%if get(handles.Bleach_Second_Tab,'SelectedIndex')==1
    Bleach_Counts_Callback(1,1)
%end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Functions for Navigation  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%% Buttons for selecting trace
function Bleach_Previous_Callback(obj,~,Flag)
handles = guidata(gcbo);
global Trace;
if nargin<3
    Flag=0;
end
Trace.Number = Trace.Number-1;
if Trace.Number==0
    Trace.Number=size(Trace.Data,1);
end
if ~Flag
    UpdateBleach(1,1,Trace.Number, handles);
    Update_Cor_Plot(obj,[]);
end
function Bleach_Next_Callback(obj,~,Flag)
handles = guidata(gcbo);
global Trace;
if nargin<3
    Flag=0;
end
Trace.Number = Trace.Number + 1;
if Trace.Number>size(Trace.Data,1)
    Trace.Number=1;
end
if ~Flag
    UpdateBleach(1,1,Trace.Number, handles);
    Update_Cor_Plot(obj,[]);
end
%%%% Deletes current trace
function Bleach_Delete_Callback(~,~,Flag,Number)
handles = guidata(gcbo);
global Trace;
if nargin<4
    Number = Trace.Number;
end
if nargin<3
    Flag=0;
end
if size(Trace.Data,1)>1
    Trace.Data(Number,:)=[];
    Trace.Smooth(Number,:)=[];
    Trace.Bleach(Number,:)=[];
    Trace.BG(Number,:)=[];
    Trace.FullFileName(Number,:)=[];
    Trace.Microtime(Number,:)=[];
    Trace.Delay(Number)=[];
    Trace.Manual(Number)=[];
    Trace.Abort(Number)=[];
    if isfield(Trace,'MT') && ~isempty(Trace.MT)
        Trace.MT(Number)=[];
    end
    if isfield(Trace,'Lifetime') && ~isempty(Trace.Lifetime)
        Trace.Lifetime(Number)=[];
    end
    if isfield(Trace,'G_array') && ~isempty(Trace.G_array)
        Trace.G_array(Number) = [];
    end
    if Trace.SecondColor>0
        Trace.CT(Number,:)=[];
        Trace.Gamma(Number,:)=[];
    end
    
    if Trace.Number>size(Trace.Data,1);
        Trace.Number=Trace.Number-1;
    end
if ~Flag
    UpdateBleach(1,1,Trace.Number, handles);
end
end
%%%% Button for finding bleaching step
function Bleach_Find_Callback(~,~,Flag,Number)
handles = guidata(gcbo);
global Trace;
if nargin<4
    Number=Trace.Number;
end
if nargin<3
    Flag=[-2, -2];
end

% Flag:
% -2: Up button or mouse; find but do not delete
% -1: Find all; find or delete
%  0: Find all manual; use old values
% >0: Selected via mouse; use Flag value

%%% Find bleaching step for first color %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if Flag(1) < 0 %%% Find it again
    Length = ceil(str2double(get(handles.Bleach_ML,'String'))/str2double(get(handles.Bleach_Bin,'String')));
    if Length==0
        Length=1;
    end
    Dif=zeros(numel(Trace.Smooth{Number,1}),Length);
    for k=1:Length
        Dif((k+1):end,k)=Trace.Smooth{Number,1}((k+1):end)-Trace.Smooth{Number,1}(1:(end-k));
    end
    Dif(Dif>0)=0;
    dif=min(abs(Dif),[],2).*sign(Dif(:,1));
    
    i=find(dif<-str2double(get(handles.Bleach_Step,'String'))*str2double(get(handles.Bleach_Bin,'String'))/1000,1,'last')-1 -1;
elseif Flag(1)==0
    i=length(Trace.Bleach{Number,1}); %%% Keep old value
else
    i=Flag(1); %%% Use given value
end

%%% Find bleaching step for second color %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if Trace.SecondColor>0
    if Flag(2) < 0
        Length = ceil(str2double(get(handles.Bleach_ML,'String'))/str2double(get(handles.Bleach_Bin,'String')));
        if Length==0
            Length=1;
        end
        Dif=zeros(numel(Trace.Smooth{Number,Trace.Red}),Length);
        for k=1:Length
            Dif((k+1):end,k)=Trace.Smooth{Number,Trace.Red}((k+1):end)-Trace.Smooth{Number,Trace.Red}(1:(end-k));
        end
        Dif(Dif>0)=0;
        dif=min(abs(Dif),[],2).*sign(Dif(:,1));
        j=find(dif<-str2double(get(handles.Second_Step,'String'))*str2double(get(handles.Bleach_Bin,'String'))/1000,1,'last')-1;
    elseif Flag(2)==0
        j=length(Trace.Bleach{Number,Trace.Red});
    else
        j=Flag(2);
    end
else
    j=i;
end

%%% Selects full trace if not found for manual selection
if Flag(1)==-2 && isempty(i)
        i=Trace.Abort{Number};
end
if Flag(2)==-2 && isempty(j)
        j=Trace.Abort{Number};
end
        
%%% Calculates before bleach intensities, background, cross-talk and gamma
if ~isempty(i) && ~isempty(j)     %%% If it should not be deleted
    Trace.Bleach{Number,1}=Trace.Data{Number,1}(1:i);
    
    if Flag(1)~=0
        Trace.BG{Number,1}(1)=mean(Trace.Bleach{Number,1});
        
        if numel(Trace.Bleach{Number,1})==Trace.Abort{Number}
            Trace.BG{Number,1}(2)=0;
        else
            Trace.BG{Number,1}(2)=mean(Trace.Data{Number,1}((numel(Trace.Bleach{Number,1})+1):Trace.Abort{Number}));
        end
    end
    
    if Trace.SecondColor>0        
        Trace.Bleach{Number,2}=Trace.Data{Number,2}(1:j);
        Trace.Bleach{Number,3}=Trace.Data{Number,3}(1:j);
        
        if Flag(2)~=0
            Trace.BG{Number,2}(1)=mean(Trace.Bleach{Number,2});
            Trace.BG{Number,3}(1)=mean(Trace.Bleach{Number,3});
            if numel(Trace.Bleach{Number,2})==Trace.Abort{Number}
                Trace.BG{Number,2}(2)=0;
                Trace.BG{Number,3}(2)=0;
            else
                Trace.BG{Number,2}(2)=mean(Trace.Data{Number,2}((numel(Trace.Bleach{Number,2})+1):Trace.Abort{Number}));
                Trace.BG{Number,3}(2)=mean(Trace.Data{Number,3}((numel(Trace.Bleach{Number,3})+1):Trace.Abort{Number}));
            end
        end
        
        if j<i
    
            Trace.CT{Number,1}=(mean(Trace.Data{Number,2}(j+1:i))-Trace.BG{Number,2}(2))./...
                                        (mean(Trace.Data{Number,1}(j+1:i))-Trace.BG{Number,1}(2));    
            Trace.Gamma{Number,1}=((mean(Trace.Bleach{Number,2})-...
                                        Trace.CT{Number}*mean(Trace.Data{Number,1}(1:j)))-...
                                        (mean(Trace.Data{Number,2}(j+1:i))-...
                                        Trace.CT{Number}*mean(Trace.Data{Number,1}(j+1:i))))/...
                                        (mean(Trace.Bleach{Number,1}(j+1:end))-...
                                        mean(Trace.Bleach{Number,1}(1:j))); 
            Trace.Delay(Number)=mean(Trace.Microtime{Number,1}(j:i))-str2double(get(handles.Lifetime,'String'));
        else
            Trace.CT{Number,1}=0;
            Trace.Gamma{Number,1}=1;
            Trace.Delay(Number)=0;
        end 
        Trace.CT{Number,2}=Trace.CT{Number,1};
        Trace.Gamma{Number,2}=Trace.Gamma{Number,1};
        Avg_Gamma=0; Avg_CT=0;
        for i=1:length(Trace.Gamma)
            Avg_Gamma=Avg_Gamma+Trace.Gamma{i,1};
            Avg_CT=Avg_CT+Trace.CT{i,1};
        end 
        Avg_Gamma=Avg_Gamma/i;
        Avg_CT=Avg_CT/i;
       
        
        set(handles.Avg_CT,'String',['Use Average CT:' num2str(Avg_CT)]);
        set(handles.Avg_Gamma,'String',['Use Average Gamma:' num2str(Avg_Gamma)]);
    end 
else %%% Deletes file
    Bleach_Delete_Callback(1,1,1,Number)
end
if ~(Flag(1)==-1 || (Flag(1)==0 && Flag(2)==0)) %%% No update of plot if autosearch
    UpdateBleach(1,1,Trace.Number, handles);
end



%%%% Button to undo bleach selection
function Bleach_Undo_Callback(~,eventdata)
handles = guidata(gcbo);
global Trace;
for i=1:(Trace.SecondColor+1)
    Trace.Bleach{Trace.Number,i}=[];
    Trace.BG{Trace.Number,i}=[0 0];
end
Trace.Gamma{Trace.Number,1}=1;
Trace.Gamma{Trace.Number,2}=1;
Trace.CT{Trace.Number,1}=0;
Trace.CT{Trace.Number,2}=0;

Trace.Manual{Trace.Number}=0;
if ~isempty(eventdata)
    if strcmp (eventdata.Key, 'downarrow')
        UpdateBleach(1,1,Trace.Number, handles);
    end
end
%%%% Unselects all Bleaching staps
function Bleach_UndoAll_Callback(~,~)
handles = guidata(gcbo);
global Trace

for i=1:size(Trace.FullFileName,1)
    Bleach_Undo_Callback([],[])
    Bleach_Next_Callback([],[],1)
end
UpdateBleach(1,1,1, handles);
%%%% Finds all bleaching steps and deletes invalid
function Bleach_FindAll_Callback(hObject,eventdata)
handles = guidata(gcbo);
global Trace;
k=1;
set(handles.Bleach_Show,'String','1');
Bleach_Show_Callback(hObject, eventdata);

while (k<=size(Trace.Data,1) && size(Trace.Data,1)>1)
    
    if Trace.SecondColor>0 % 2 color traces       
    
        if ((max(Trace.Data{k,1})*1000/str2double(get(handles.Bleach_Bin,'String')))<str2double(get(handles.Bleach_TH,'String')) ||... % Delete, if below treshold
           (max(Trace.Data{k,2})*1000/str2double(get(handles.Bleach_Bin,'String')))<str2double(get(handles.Second_TH,'String'))) &&...
           Trace.Manual{k}==0
            Bleach_Delete_Callback(hObject,eventdata,1,k);

        else % First find bleaching step
            a=size(Trace.Data,1);
            Bleach_Find_Callback(hObject, eventdata,[-~Trace.Manual{k},-~Trace.Manual{k}],k) 
            if a==size(Trace.Data,1)
                if (sum(Trace.Bleach{k,1})< str2double(get(handles.Bleach_MP,'String'))) || (sum(Trace.Bleach{k,2})< str2double(get(handles.Second_MP,'String'))) ||... % Delete, if not enough photons
                   (numel(Trace.Bleach{k,1})<str2double(get(handles.Bleach_MD,'String'))/str2double(get(handles.Bleach_Bin,'String'))) || (numel(Trace.Bleach{k,2})<str2double(get(handles.Second_MD,'String'))/str2double(get(handles.Bleach_Bin,'String'))) % Delete, if too short
                    Bleach_Delete_Callback(hObject,eventdata,1,k);  
                else
                    k=k+1;
                end
            end

        end
    else  % Single color trace
            
        if (max(Trace.Data{k,1})*1000/str2double(get(handles.Bleach_Bin,'String')))<str2double(get(handles.Bleach_TH,'String'))            
            Bleach_Delete_Callback(hObject,eventdata,1,k);
        else
            a=size(Trace.Data,1);
            Bleach_Find_Callback(hObject, eventdata,[-~Trace.Manual{k},-~Trace.Manual{k}],k)
            if a==size(Trace.Data,1)
                if (sum(Trace.Bleach{k,1})< str2double(get(handles.Bleach_MP,'String'))) || ...
                   (numel(Trace.Bleach{k,1})<str2double(get(handles.Bleach_MD,'String'))/str2double(get(handles.Bleach_Bin,'String')))
                    Bleach_Delete_Callback(hObject,eventdata,1,k);                
                else
                    k=k+1;
                end
            end
        end        
    end

end
UpdateBleach(1,1,1, handles);

%%%% KeyPressFunction for navigation
function figure1_KeyPressFcn(hObject,eventdata)
handles=guidata(gcf);
global Trace
switch eventdata.Key
    case 'rightarrow'
        Bleach_Next_Callback(hObject, eventdata);
        
    case 'leftarrow'
        Bleach_Previous_Callback(hObject, eventdata);
        
    case 'delete'
        Bleach_Delete_Callback(hObject, eventdata,0, Trace.Number);
                
    case 'uparrow'
        Bleach_Find_Callback(hObject, eventdata, [-2,-2],Trace.Number);
        
    case 'downarrow'
        Bleach_Undo_Callback(hObject, eventdata);
        
    case 'insert'
        Bleach_UndoAll_Callback(hObject, eventdata)
        
    case 'end'
        Bleach_FindAll_Callback(hObject, eventdata);
        
        
    case 'control'
        set(handles.Ctrl_Pressed, 'Value', 1);
        Point=zeros(16);
        Point(1:8,1:2)=1;
        Point(1:2,1:8)=1;
        Point(5:16,5:6)=1;
        Point([5 6 10 11 15 16],7:9)=1;
        Point([6:15],10)=1;
        Point([7 8 9 12 13 14],11)=1;
        Point(Point==0)=NaN;
        set(gcf, 'Pointer','custom','PointerShapeCData',Point)
        
    case 'shift'
        if Trace.SecondColor>0
            set(handles.Shift_Pressed, 'Value', 1);
            Point=zeros(16);
            Point(1:8,1:2)=1;
            Point(1:2,1:8)=1;
            Point(5:16,5:6)=1;
            Point([5 6 10 11 12],7)=1;
            Point([5 6 10 11 12 13 14],8)=1;
            Point([6:10 13 14 15],9)=1;
            Point([7:9 15 16],10)=1;        
            Point(Point==0)=NaN;
            set(gcf, 'Pointer','custom','PointerShapeCData',Point)  
        end
  
end
%%%% KeyReleaseFcn for selection
function figure1_WindowKeyReleaseFcn(~,eventdata)
handles = guidata(gcbo);
switch eventdata.Key
    case 'control'
        set(handles.Ctrl_Pressed, 'Value', 0); 
        set(gcf, 'Pointer','arrow')
    case 'shift'
        set(handles.Shift_Pressed, 'Value', 0); 
        set(gcf, 'Pointer','arrow')
end
%%%% Use Wheel to go to next Trace
function figure1_WindowScrollWheelFcn(hObject,eventdata)
handles = guidata(gcbo);
if eventdata.VerticalScrollCount<0
    Bleach_Next_Callback(hObject, eventdata)
elseif eventdata.VerticalScrollCount>0
    Bleach_Previous_Callback(hObject, eventdata)
end

%%%% Manual Bleach selection (ctrl+lmb for blue or shift+lmb for red)
function Bleach_Plot_ButtonDownFcn(hObject,eventdata)
handles=guidata(gcf);
global Trace;

%%%% Select Blue Bleach,when ctrl is pressed %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if get(handles.Ctrl_Pressed, 'Value')      
    point=get(handles.Bleach_Plot,'CurrentPoint');
    selection = floor(point(1)/str2double(get(handles.Bleach_Bin,'String')));    
    Bleach_Find_Callback(hObject,eventdata,[selection, -2*~Trace.Manual{Trace.Number}],Trace.Number)
    Trace.Manual{Trace.Number}=1;  
    
%%%% Select Red Bleach,when shift is pressed %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
elseif get(handles.Shift_Pressed, 'Value') && Trace.SecondColor>0
    point=get(handles.Bleach_Plot,'CurrentPoint');
    selection = floor(point(1)/str2double(get(handles.Bleach_Bin,'String')));
    Bleach_Find_Callback(1,1,[-2*~Trace.Manual{Trace.Number},selection],Trace.Number);
    Trace.Manual{Trace.Number}=1;
    
%%%% Select full trace ,when rmb is pressed %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
elseif strcmp(get(gcf, 'SelectionType'),'normal')
    selection = Trace.Abort{Trace.Number};
    Bleach_Find_Callback(1,1,[selection, selection],Trace.Number);
    Trace.Manual{Trace.Number}=1;
    
elseif strcmp(get(gcf, 'SelectionType'),'alt') && ~isempty(Trace.Bleach{Trace.Number,1})
    Point1=get(handles.Bleach_Plot,'CurrentPoint');
    rbbox;
    Point2=get(handles.Bleach_Plot,'CurrentPoint');
    point=sort([Point1(1),Point2(1)]);
    selection = floor(point/str2double(get(handles.Bleach_Bin,'String')));
    if selection(2)>Trace.Abort{Trace.Number}
        selection(2)=Trace.Abort{Trace.Number};        
    end
    if selection(1)<1
        selection(1)=1;        
    end
    for i=1:(Trace.SecondColor+1)
        Trace.BG{Trace.Number,i}(2)=mean(Trace.Data{Trace.Number,i}(selection(1):selection(2)));
    end
    Trace.Manual{Trace.Number}=1;
    Bleach_Find_Callback(1,1,[0,0],Trace.Number);
    UpdateBleach(1,1, Trace.Number, handles)  
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Functions for Correlation  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Corelates files
function Bleach_Cor_Callback(~,~)
handles = guidata(gcbo);
global UserValues Trace;

i=1;
Trace.G_timeaxis=[];
Trace.G_array=[];

if get(handles.Bleach_ACF1,'Value')
    ACF=1;
elseif get(handles.Bleach_ACF2,'Value')
    ACF=2;
else
    ACF=0;
end

for k = 1:size(Trace.FullFileName,1)
    if ~isempty(Trace.Bleach{k})
        TcspcData.LinebreakMacrotimes = [];
    switch ACF
        case 0            
            [MacrotimeArray,MicrotimeArray,~,~,~]= Read_BH(Trace.FullFileName{k,1}, Inf,[0 0 0],'SPC-140/150/830/130');
            Microtime1=MicrotimeArray{1};
            Macrotime1=MacrotimeArray{1}; 
            MicrotimeArray=[];
            MacrotimeArray=[];
            if strcmp(Trace.FullFileName{k,1},Trace.FullFileName{k,2})
                Microtime2=Microtime1;
                Macrotime2=Macrotime1;
            else
                [MacrotimeArray,MicrotimeArray,~,~,~]= Read_BH(Trace.FullFileName{k,2}, Inf,[0 0 0],'SPC-140/150/830/130');  
                Microtime2=MicrotimeArray{1};
                Macrotime2=MacrotimeArray{1}; 
                MicrotimeArray=[];
                MacrotimeArray=[];
            end
            
            fid1 = fopen([Trace.FullFileName{k}(1:end-9) '_Track_info' Trace.FullFileName{k}(end-8:end-6) '.txt']);
            fid2 = fopen([Trace.FullFileName{k}(1:end-9) '_MeasureCursor_info' Trace.FullFileName{k}(end-8:end-6) '.txt']);
            if fid1~=-1 || fid2~=-1
                Header = FabsurfTextread(Trace.FullFileName{k},4 );
                Freq=1000/Header.TACRange;
            end
            
            ValidPhotons = Macrotime1((Microtime1 >= UserValues.PIE.From{UserValues.Trace.DonPar}) ...
                               & (Microtime1 <= UserValues.PIE.To{UserValues.Trace.DonPar}));                    
            Photons1 = ValidPhotons(ValidPhotons< (min(min([numel(Trace.Bleach{k,1}),numel(Trace.Bleach{k,2})]))*str2double(get(handles.Bleach_Bin,'String')))*(Freq/1000));  
            
            ValidPhotons = Macrotime2((Microtime1 >= UserValues.PIE.From{UserValues.Trace.AccPar}) ...
                               & (Microtime1 <= UserValues.PIE.To{UserValues.Trace.AccPar}));                    
            Photons2 = ValidPhotons(ValidPhotons< (min(min([numel(Trace.Bleach{k,1}),numel(Trace.Bleach{k,2})]))*str2double(get(handles.Bleach_Bin,'String')))*(Freq/1000)); 
            
            
        case 1
            [MacrotimeArray,MicrotimeArray,~,~,~]= Read_BH(Trace.FullFileName{k,1}, Inf,[0 0 0],'SPC-140/150/830/130'); 
            Microtime1=MicrotimeArray{1};
            Macrotime1=MacrotimeArray{1}; 
            
            fid1 = fopen([Trace.FullFileName{k}(1:end-10) '_Track_info' Trace.FullFileName{k}(end-9:end-6) '.txt']);
            fid2 = fopen([Trace.FullFileName{k}(1:end-10) '_MeasureCursor_info' Trace.FullFileName{k}(end-9:end-6) '.txt']);
            if fid1~=-1 || fid2~=-1
                Header = FabsurfInfo(Trace.FullFileName{k},4 );
                Freq=1000/Header.RepRate;
            end
            
            ValidPhotons = Macrotime1((Microtime1 >= UserValues.PIE.From(UserValues.Trace.DonPar)) ...
                               & (Microtime1 <= UserValues.PIE.To(UserValues.Trace.DonPar)));                    
            Photons1 = ValidPhotons(ValidPhotons< (numel(Trace.Bleach{k,1})*str2double(get(handles.Bleach_Bin,'String')))*(Freq/1000)); 
            Photons2=Photons1;
            
        case 2
            [MacrotimeArray,MicrotimeArray,~,~,~]= Read_BH(Trace.FullFileName{k,2}, Inf,[0 0 0],'SPC-140/150/830/130');
            Microtime1=MicrotimeArray{1};
            Macrotime1=MacrotimeArray{1}; 
            
            fid1 = fopen([Trace.FullFileName{k}(1:end-9) '_Track_info' Trace.FullFileName{k}(end-8:end-6) '.txt']);
            fid2 = fopen([Trace.FullFileName{k}(1:end-9) '_MeasureCursor_info' Trace.FullFileName{k}(end-8:end-6) '.txt']);
            if fid1~=-1 || fid2~=-1
                Header = FabsurfTextread(Trace.FullFileName{k},4 );
                Freq=1000/Header.TACRange;
            end
            
            ValidPhotons = Macrotime1((Microtime1 >= UserValues.PIE.From{UserValues.Trace.AccPar}) ...
                               & (Microtime1 <= UserValues.PIE.To{UserValues.Trace.AccPar}));                    
            Photons1 = ValidPhotons(ValidPhotons< (numel(Trace.Bleach{k,2})*str2double(get(handles.Bleach_Bin,'String')))*(Freq/1000)); 
            Photons2=Photons1;
    end                 
        [G_array, G_timeaxis] = CrossCorrelation({Photons1}, {Photons2}, max([Photons1;Photons2]));
        Trace.G_array{i}=G_array;
        if numel(G_timeaxis)>numel(Trace.G_timeaxis)
            Trace.G_timeaxis=G_timeaxis/Freq;
        end
        length(i)=numel(G_timeaxis);
        
        %set(handles.Cor_Number,'String',[num2str(i) '/' num2str(size(Trace.FullFileName,1))]);
        i=i+1;
    end
    
end

%set(handles.Cor_Number,'String','0');

Trace.cor_average=zeros(max(length),1);
number=zeros(max(length),1);
for i= 1:numel(Trace.G_array)
    for j=1:length(i)
        Trace.cor_average(j)=Trace.cor_average(j)+Trace.G_array{i}(j);
        number(j)=number(j)+1;
    end
end
Trace.cor_average=Trace.cor_average./number;
axes(handles.Bleach_Cor_Plot);
switch numel(get(gca, 'Children'))
    case 0
        plot(Trace.G_timeaxis,Trace.cor_average);
        hold on;
    case 1
        plot(Trace.G_timeaxis,Trace.cor_average,'r')
    case 2
        plot(Trace.G_timeaxis,Trace.cor_average, 'g')
    otherwise
        plot(Trace.G_timeaxis,Trace.cor_average, 'k')
end
handles.Bleach_Cor_Plot.XScale = 'log';
handles.Bleach_Cor_Plot.XLim(1) = 1e-6;
%%%% Saves Cor File
function Bleach_Cor_Save_Callback(~,~)


global Trace UserValues;

[FileName,PathName] = uiputfile('*.cor','Save Cor', [UserValues.PathName '*.cor']);


FileID = fopen([PathName FileName], 'w');

color_i = UserValues.PIE.Color{UserValues.Trace.DonPar};
fprintf(FileID, ['Data source files: ' strrep(Trace.FullFileName{1}, '\', '\\') '\n']);
fprintf(FileID, ['Correlation channel 1 - Channelname: ' UserValues.PIE.Name{UserValues.Trace.DonPar} '\n']);
fprintf(FileID, ['Correlation channel 1 - Detector: ' num2str(UserValues.PIE.Detector{UserValues.Trace.DonPar}) '\n']);
fprintf(FileID, ['Correlation channel 1 - PIE Microtime start: ' num2str(UserValues.PIE.From{UserValues.Trace.DonPar}) '\n']);
fprintf(FileID, ['Correlation channel 1 - PIE Microtime end: ' num2str(UserValues.PIE.To{UserValues.Trace.DonPar}) '\n']);
fprintf(FileID, ['Correlation channel 1 - Color: ' num2str(color_i) '\n']);
fprintf(FileID, ['Correlation channel 1 - Countrate (kHz): \n']);

fprintf(FileID, ['Correlation channel 2 - Channelname: ' UserValues.PIE.Name{UserValues.Trace.DonPar} '\n']);
fprintf(FileID, ['Correlation channel 2 - Detector: ' num2str(UserValues.PIE.Detector{UserValues.Trace.DonPar}) '\n']);
fprintf(FileID, ['Correlation channel 2 - PIE Microtime start: ' num2str(UserValues.PIE.From{UserValues.Trace.DonPar}) '\n']);
fprintf(FileID, ['Correlation channel 2 - PIE Microtime end: ' num2str(UserValues.PIE.To{UserValues.Trace.DonPar}) '\n']);
fprintf(FileID, ['Correlation channel 2 - Color: ' num2str(color_i) '\n']);
fprintf(FileID, ['Correlation channel 2 - Countrate (kHz): \n']);


fprintf(FileID, ['Block selection: ' num2str(ones(1,numel(Trace.Bleach))) '\n']);
fprintf(FileID, ['Curves used for averaging: ' num2str(1:numel(Trace.Bleach)) '\n']);
fprintf(FileID, ['Curves normalized to datapoint: ' '0' '\n']);

G_array =zeros(numel(Trace.G_array),numel(Trace.G_timeaxis));
for i=1:numel(Trace.G_array)
    G_array(i,1:numel(Trace.G_array{i}))=Trace.G_array{i};
end
load('tinv_table')
E = std(G_array, 0, 1)/sqrt(size(G_array,1))*tinv_table(size(G_array,1));

printstring = '%8.12f\t%8.8f\t%8.8f';
for k = 1:numel(Trace.G_array) 
    printstring = [printstring '\t%8.8f'];
end
    printstring = [printstring '\n'];

fprintf(FileID, printstring, [Trace.G_timeaxis(:)'; Trace.average' ; E ;G_array]);
fclose(FileID);   
%%%% Deletes Cor Plot
function Update_Cor_Plot(obj,~)
global Trace
handles = guidata(obj);
if ~isfield(Trace,'G_timeaxis')
    return;
end
axes(handles.Bleach_Cor_Plot);
if obj ==  handles.Cor_Average
        %%% change plot to average correlation function
        cla;
        if obj.Value == 1
            plot(Trace.G_timeaxis,Trace.cor_average);
        elseif obj.Value == 0
            cor = Trace.G_array{Trace.Number};
            len = min([numel(cor),numel(Trace.G_timeaxis)]);
            plot(Trace.G_timeaxis(1:len),cor(1:len));
        end
else
    if ~handles.Cor_Average.Value
        cla;
        cor = Trace.G_array{Trace.Number};
        len = min([numel(cor),numel(Trace.G_timeaxis)]);
        plot(Trace.G_timeaxis(1:len),cor(1:len));
    end
end
handles.Bleach_Cor_Plot.XScale = 'log';
handles.Bleach_Cor_Plot.XLim(1) = 1E-6;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Functions for Bleaching Duration, Photon Counts and FRET  %%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Plots Duration or Photon Counts
function Bleach_Counts_Callback(~,~)
handles = guidata(gcbo);
global Trace

Trace.Count=[];
Trace.Duration=[];
Trace.meanLT = [];
Trace.framewiseLT = [];
Bin=str2double(get(handles.Bleach_Bin, 'String'));

k=1;

switch get(handles.Bleach_Popup_Count, 'Value')
    case {1,2,5,6} %% Donor Counts or Duration, or Lifetime
        for i=1:size(Trace.Bleach,1)
            if ~isempty(Trace.Bleach{i,1})
                if get(handles.Subtract_BG,'Value')
                    Trace.Count(k)=sum(Trace.Bleach{i,1})-(numel(Trace.Bleach{i,1})*Trace.BG{i,1}(2));
                else
                    Trace.Count(k)=sum(Trace.Bleach{i,1});
                end
                Trace.Duration(k)=length(Trace.Bleach{i,1})*Bin;
                if isfield(Trace,'Lifetime') && ~isempty(Trace.Lifetime)
                    Trace.meanLT(k) = mean(Trace.Lifetime{i,1}(1:numel(Trace.Bleach{i,1})))*1E9;
                    Trace.framewiseLT = [Trace.framewiseLT; Trace.Lifetime{i,1}(1:numel(Trace.Bleach{i,1}))*1E9];
                else
                    Trace.meanLT(k) = 0;
                end
                k=k+1;
            end
        end
    case {3,4} %% Acceptor Counts or Duration
        for i=1:size(Trace.Bleach,1)
            if size(Trace.Bleach,2) > 1
                if ~isempty(Trace.Bleach{i,2})
                    if get(handles.Subtract_BG,'Value')
                        Trace.Count(k)=sum(Trace.Bleach{i,2})-(numel(Trace.Bleach{i,2})*Trace.BG{i,2}(2));
                    else
                        Trace.Count(k)=sum(Trace.Bleach{i,2});
                    end
                    Trace.Duration(k)=length(Trace.Bleach{i,2})*Bin;
                    k=k+1;
                end
            end
        end
end
    
Duration=cumsum(histc(Trace.Duration, 0:Bin:Trace.Length*Bin));
maxphotons=1000*round(max(max([Trace.Count 1000]))/1000+1);
Photons=cumsum(histc(Trace.Count, 0:100:maxphotons));
LT = histc(Trace.meanLT,0:0.1:8);
framewiseLT = histc(Trace.framewiseLT,0:0.1:8);
axes(handles.Bleach_Count_Plot);
cla; hold on;

if ~isempty(Duration)
    switch get(handles.Bleach_Popup_Count, 'Value')
        case 1  
            x=(0:Bin:Trace.Length*Bin)/1000;
            plot(x,max(Duration)-Duration,'b');
            average=mean(Trace.Duration)/1000;
            y=max(Duration).*exp(-x./average);
            plot(x,y,'g');
            
            set(handles.Text_Counts, 'String', 'Average [s]')
            set(handles.Bleach_Counts_Avg, 'String', num2str(average,'%6.3g'))
            
            set(get(gca,'XLabel'),'String','time [s]','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','# of remaining fluorophors','Color',handles.ForeColor)
            set(gca,'XLim',[0,max(x)]);
            
        case 3  
            x=(0:Bin:Trace.Length*Bin)/1000;
            plot(x,max(Duration)-Duration,'r');
            
            average=mean(Trace.Duration)/1000;
            y=max(Duration).*exp(-x./average);
            plot(x,y,'g');
            
            set(handles.Text_Counts, 'String', 'Average [s]')
            set(handles.Bleach_Counts_Avg, 'String', num2str(average,'%6.3g'))
            
            set(get(gca,'XLabel'),'String','time [s]','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','# of remaining fluorophors','Color',handles.ForeColor)
            set(gca,'XLim',[0, max(x)]);           
            
            
        case 2
            x=0:100:maxphotons;
            plot(x,max(Photons)-Photons,'b');
            
            average=mean(Trace.Count);
            y=max(Photons).*exp(-x./average);
            plot(x,y,'g');
            
            set(handles.Text_Counts, 'String', 'Average [photons]')
            set(handles.Bleach_Counts_Avg, 'String', num2str(average,'%6.3g'))
            
            set(get(gca,'XLabel'),'String','# of Photons','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','# of remaining fluorophors','Color',handles.ForeColor)
            set(gca,'XLim',[0,max(x)]);
            
         case 4   
            x=0:100:maxphotons;
            plot(x,max(Photons)-Photons,'r');
            
            average=mean(Trace.Count);
            y=max(Photons).*exp(-x./average);
            plot(x,y,'g');
            
            set(handles.Text_Counts, 'String', 'Average [photons]')
            set(handles.Bleach_Counts_Avg, 'String', num2str(average,'%6.3g'))
            
            set(get(gca,'XLabel'),'String','# of Photons','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','# of remaining fluorophors','Color',handles.ForeColor)
            set(gca,'XLim',[0,max(x)]);
        case {5} %%% Donor lifetime, averaged
            x=0:0.1:8;
            bar(x,LT,'b');
            
            average=mean(Trace.meanLT);
            sig = std(Trace.meanLT);
            y=normpdf(x,average,sig); y = y./sum(y)*numel(Trace.meanLT);
            plot(x,y,'g');
            
            set(handles.Text_Counts, 'String', 'Average Lifetime [ns]')
            set(handles.Bleach_Counts_Avg, 'String', num2str(average,'%6.3g'))
            
            set(get(gca,'XLabel'),'String','average lifetime [ns]','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','#','Color',handles.ForeColor)
            set(gca,'XLim',[0,(max(x))]);
        case {6} %%% Donor lifetime, framewise
            x=0:0.1:8;
            bar(x,framewiseLT,'b');
            
            average=mean(Trace.framewiseLT);
            sig = std(Trace.framewiseLT);
            y=normpdf(x,average,sig); y = y./sum(y)*numel(Trace.framewiseLT);
            plot(x,y,'g');
            
            set(handles.Text_Counts, 'String', 'Average framewise lifetime [ns]')
            set(handles.Bleach_Counts_Avg, 'String', num2str(average,'%6.3g'))
            
            set(get(gca,'XLabel'),'String','framewise lifetime [ns]','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','#','Color',handles.ForeColor)
            set(gca,'XLim',[0,(max(x))]);
    end
end 
%%%% Turns BG, CT and Gamma on and off
function Correction_BG_Callback(hObject, eventdata)
handles = guidata(gcbo);
global Trace

dummy = get(handles.Avg_CT,'String');
Avg_CT =str2double(dummy(16:end));
dummy = get(handles.Avg_Gamma,'String');
Avg_Gamma =str2double(dummy(19:end));

if get(handles.Correct_Gamma,'Value') && ~get(handles.Avg_Gamma,'Value')
    set(handles.Subtract_CT,'Value',1)    
    for i=1:size(Trace.Gamma,1)
        Trace.Gamma{i,2}=Trace.Gamma{i,1};        
    end
    
elseif get(handles.Correct_Gamma,'Value') && get(handles.Avg_Gamma,'Value')
    set(handles.Subtract_CT,'Value',1)    
    for i=1:size(Trace.Gamma,1)
        Trace.Gamma{i,2}=Avg_Gamma;        
    end   
else
    for i=1:size(Trace.Gamma,1)
        Trace.Gamma{i,2}=1;        
    end
end

if get(handles.Subtract_CT,'Value') && ~get(handles.Avg_CT,'Value')
    set(handles.Subtract_BG,'Value',1)    
    for i=1:size(Trace.CT,1)
        Trace.CT{i,2}=Trace.CT{i,1};        
    end
elseif get(handles.Subtract_CT,'Value') && get(handles.Avg_CT,'Value')
    set(handles.Subtract_BG,'Value',1)    
    for i=1:size(Trace.CT,1)
        Trace.CT{i,2}=Avg_CT;        
    end   
else
    for i=1:size(Trace.CT,1)
        Trace.CT{i,2}=0;        
    end
end



Bleach_Counts_Callback(hObject, eventdata)
UpdateBleach(1,1,Trace.Number, handles)
%%%% Recalculated Delay for Lifetime FRET
function Correct_Lifetime(~,~)
handles = guidata(gcbo);
global Trace
for i=1:size(Trace.Data,1)
    if (~isempty(Trace.Bleach{i,1}) && ~isempty(Trace.Bleach{i,2})) && (numel(Trace.Bleach{i,2})<numel(Trace.Bleach{i,1}))
        Trace.Delay(i)=mean(Trace.Microtime{i,1}(numel(Trace.Bleach{i,2}):numel(Trace.Bleach{i,1})))-str2double(get(handles.Lifetime,'String'));
    else
        Trace.Delay(i)=0;
    end
end
UpdateBleach([],[]);

%%%% Plots collective FRET
function Calc_FRET(handles)

global Trace
FRET1=[];
FRET2=[];
FRET_LT1=[];
FRET_LT2=[];
FRET_LT_Fitted1=[];
FRET_LT_Fitted2=[];
Gamma=[];
CT=[];
for i=1:size(Trace.Bleach,1)
    if ~isempty(Trace.Bleach{i,1})
        j=min([numel(Trace.Bleach{i,1}) numel(Trace.Bleach{i,2})])-1;
                
        if j>0
            if get(handles.Subtract_BG,'Value')
                Data{1}=(Trace.Data{i,1}(1:j)-Trace.BG{i,1}(2));
                Bleach{1}=(Trace.Bleach{i,1}(1:j)-Trace.BG{i,1}(2));
                Bleach{2}=(Trace.Bleach{i,2}(1:j)-Trace.BG{i,2}(2))-Trace.CT{i,2}*Data{1}(1:j);
                fret=Bleach{2}./(Trace.Gamma{i,2}*Bleach{1} + Bleach{2});
            else
                Data{1}=Trace.Data{i,1}(1:j);
                Bleach{1}=Trace.Bleach{i,1}(1:j);        
                Bleach{2}=Trace.Bleach{i,2}(1:j);
                fret=Bleach{2}./(Bleach{1} + Bleach{2});
            end
            
            if get(handles.Fitted_Delay,'Value') && isfield(Trace,'Tau_Full')
                Delay=sum(Trace.MT_Hist_after.*(1:numel(Trace.MT_Hist_after)))/sum(Trace.MT_Hist_after)*40/512-Trace.Tau_Full*1e9;
                fret_LT=1-(Trace.Microtime{i,1}(1:j)-Delay)/str2double(get(handles.Lifetime,'String'));
            elseif get(handles.Avg_Lifetime,'Value') && any(Trace.Delay)
                fret_LT=1-(Trace.Microtime{i,1}(1:j)-mean(Trace.Delay(Trace.Delay~=0)))/str2double(get(handles.Lifetime,'String'));
            else
                fret_LT=1-(Trace.Microtime{i,1}(1:j)-Trace.Delay(i))/str2double(get(handles.Lifetime,'String'));
            end
            if ~isempty(Trace.Lifetime)
                FRET_LT_Fitted1=[FRET_LT_Fitted1 Trace.Lifetime{i,1}(1:j)];
                FRET_LT_Fitted2=[FRET_LT_Fitted2 mean(1-Trace.Lifetime{i,1}(1:j)/Trace.Tau_Full)];
            end
            

            FRET1=[FRET1 fret];
            FRET2=[FRET2 mean(fret)];
            FRET_LT1=[FRET_LT1 fret_LT];
            FRET_LT2=[FRET_LT2 mean(fret_LT)];
            
            
            
            Gamma=[Gamma Trace.Gamma{i,1}];
            CT=[CT Trace.CT{i,1}];
        end           
    end    
end



if ~isempty(FRET1)
    axes(handles.Bleach_FRET_Plot2)
    FRET=zeros(100,2);
    FRET(1:2:99,1)=histc(FRET1,linspace(0,1,50));
    
if get(handles.Fitted_Lifetime,'Value') && ~isempty(Trace.Lifetime);
    %FRET_LT=(1-Trace.Lifetime/Trace.Tau_Full)';
    FRET(2:2:100,2)=histc(FRET_LT_Fitted1,linspace(0,1,50));
else
    set(handles.Fitted_Lifetime,'Value',0)
    FRET(2:2:100,2)=histc(FRET_LT1,linspace(0,1,50));
end  
    h=bar(linspace(0,1,100),FRET(:,1),'hist');
    set(h,'FaceColor','g','EdgeColor',handles.BackColor,'LineStyle','-');
    hold on;
    h=bar(linspace(0,1,100),FRET(:,2),'hist');
    set(h,'FaceColor','y','EdgeColor',handles.BackColor,'LineStyle','-');
    hold off
    set(gca,'XLim', [0, 1],'Box','on'); 
    set(get(gca,'XLabel'),'String','Bin wise FRET','Color',handles.ForeColor)
    set(get(gca,'YLabel'),'String','Occurence','Color',handles.ForeColor)

    axes(handles.Bleach_FRET_Plot3)
    FRET=zeros(100,2);
    FRET(1:2:99,1)=histc(FRET2,linspace(0,1,50));
    FRET(2:2:100,2)=histc(FRET_LT2,linspace(0,1,50));
   
    h=bar(linspace(0,1,100),FRET(:,1),'hist');
    set(h,'FaceColor','g','EdgeColor',handles.BackColor,'LineStyle','-');
    hold on;
    h=bar(linspace(0,1,100),FRET(:,2),'hist');
    set(h,'FaceColor','y','EdgeColor',handles.BackColor,'LineStyle','-');
    hold off
    set(gca,'XLim', [0, 1],'Box','on'); 
    set(get(gca,'XLabel'),'String','Trace wise FRET','Color',handles.ForeColor)
    set(get(gca,'YLabel'),'String','Occurence','Color',handles.ForeColor)
    
    axes(handles.Bleach_FRET_Plot4)
    cla;
    switch get(handles.Extraplot,'Value')
        case 1
            if get(handles.Fitted_Lifetime,'Value') && ~isempty(Trace.Lifetime);
                hi=[FRET1; FRET_LT_Fitted1];
            else
                hi=[FRET1; FRET_LT1];
            end
            pl=(waldi_hist2d(hi,50,50,[0 1],[0 1]));
            h=imagesc(linspace(0,1,50),linspace(0,1,50),pl);
            set(h,'AlphaData',pl>0)
            colormap(hsv)

            set(gca,'YDir','normal')
            set(get(gca,'XLabel'),'String','Intensity FRET','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','Lifetime FRET','Color',handles.ForeColor)
        case 2
            hi=[FRET2;FRET_LT2];
            pl=(waldi_hist2d(hi,50,50,[0 1],[0 1]));
            h=imagesc(linspace(0,1,50),linspace(0,1,50),pl);
            set(h,'AlphaData',pl>0)
            map=zeros(max(max(pl)),3);
            map(:,3)=(1:max(max(pl)))/max(max(pl));
            colormap(map)
            set(gca,'YDir','normal')
            set(get(gca,'XLabel'),'String','Intensity FRET','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','Lifetime FRET','Color',handles.ForeColor)
        case 3    
            plot(FRET2,Gamma,'Marker','o','Linestyle','none','Color','b');
            set(get(gca,'XLabel'),'String','Trace wise FRET','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','Gamma','Color',handles.ForeColor)
        case 4   
            plot(FRET2,CT,'Marker','o','Linestyle','none','Color','b');
            set(get(gca,'XLabel'),'String','Trace wise FRET','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','Beta','Color',handles.ForeColor) 
        case 5 
            plot(CT,Gamma,'Marker','o','Linestyle','none','Color','b');
            set(get(gca,'XLabel'),'String','Beta','Color',handles.ForeColor)
            set(get(gca,'YLabel'),'String','Gamma','Color',handles.ForeColor) 
    end    

    
    if get(handles.Total_Intensity,'Value')
        axes(handles.Bleach_Plot)
        hold on
        int = Trace.Data{Trace.Number,1}-Trace.BG{Trace.Number,1}(2)...
            +(Trace.Data{Trace.Number,2}-Trace.BG{Trace.Number,2}(2))/Trace.Gamma{Trace.Number,2}...        
            -(Trace.CT{Trace.Number,2}*Trace.Data{Trace.Number,1})/Trace.Gamma{Trace.Number,2};
        Int=int/str2double(get(handles.Bleach_Bin,'String'))*1000;
        time=0:str2double(get(handles.Bleach_Bin,'String')):str2double(get(handles.Bleach_Bin,'String'))*(numel(Trace.Data{Trace.Number,1})-1);
        plot(time,Int,'k');
        hold off
    end
    
end
set(handles.Bleach_Gamma_Text,'String',['Current Gamma: ' num2str(Trace.Gamma{Trace.Number,1})]);
set(handles.Bleach_CT_Text,'String',['Current Cross Talk: ' num2str(Trace.CT{Trace.Number,1})]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Functions for Lifetime Fitting  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Loads Lifetimes of current files and divides them according to
%%%% before/after bleaching
function Bleach_Reload_Lifetime_D(~,~)
handles = guidata(gcbo);
global Trace UserValues

tic
set(get(handles.Bleach_Progressbar,'Children'),'Visible','off');
%%progressbar(0,1,handles.Bleach_Progressbar);

Microtime_before=[];Microtime_after=[];
Trace.MT=[];
for i=1:size(Trace.Data,1)
    %try
        FullFileName=[Trace.FullFileName{i,1}(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.DonPar)))-1 '.spc'];       
        if exist(FullFileName, 'file')
            [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName, Inf,[0 0 0],'SPC-140/150/830/130');
        end        
        From=(UserValues.PIE.From(UserValues.Trace.DonPar));
        To=(UserValues.PIE.To(UserValues.Trace.DonPar));
        
        Microtime=MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To);
        
        blue=numel(Trace.Bleach{i,1});
        if Trace.SecondColor > 0
            red=numel(Trace.Bleach{i,2});
        else
            red = blue - 1;
        end
        if (blue>red) 
            Microtime_before=[Microtime_before; (Microtime(1:sum(Trace.Data{i,1}(1:(red-1))))-From)];
            Microtime_after=[Microtime_after; (Microtime(sum(Trace.Data{i,1}(1:red))+1:sum(Trace.Data{i,1}(1:blue)))-From)];
        end 
        photon=[1; cumsum(Trace.Data{i,1})];
        for j=1:Trace.Abort{i}
            Trace.MT{i,1}{j}=Microtime(photon(j):photon(j+1));
        end       
        %progressbar((i-1)/size(Trace.FullFileName,1),0,handles.Bleach_Progressbar);
    %end
end

Trace.MT_Hist_before{1} = histc(Microtime_before,(0:8:(To-From)));
Trace.MT_Hist_after{1} = histc(Microtime_after,(0:8:(To-From)));

axes(handles.Lifetime_Plot);
Time=(0:8:(To-From))*40/4096;
cla; hold on;
plot(Time,Trace.MT_Hist_before{1}/max(Trace.MT_Hist_before{1}),'Color',[0 1 1]);
plot(Time,Trace.MT_Hist_after{1}/max(Trace.MT_Hist_after{1}),'Color',[0 0 1]);

if isfield(Trace,'IRF')
    plot(Time,Trace.IRF{1}/max(Trace.IRF{1}),'Color',[0.2 0.2 0.4]);
end

set(get(gca,'XLabel'),'String','Arrival time','Color',handles.ForeColor) 
set(get(gca,'YLabel'),'String','Normalized intensity','Color',handles.ForeColor) 


%progressbar(1);
a=get(handles.Bleach_Progressbar,'Children');
delete(a(1:end-1));
set(handles.Bleach_Progressbar, 'Title',blanks(0));
set(a(end),'Visible', 'on');
toc
if ~isempty(Trace.IRF)
    set(handles.Fit_Lifetime_D,...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor,...
        'Callback',@Fit_Lifetime_D,...
        'Enable','on',...
        'String','Fit Donor Lifetime');
end
function Bleach_Reload_Lifetime_All(~,~)
handles = guidata(gcbo);
global Trace UserValues

tic
set(get(handles.Bleach_Progressbar,'Children'),'Visible','off');
%progressbar(0,1,handles.Bleach_Progressbar);

Microtime_before=[];Microtime_after=[];
Trace.MT=[];
Microtime_before=cell(3,1);
Microtime_after=cell(3,1);

for i=1:size(Trace.Data,1)
    %try
        FullFileName1=[Trace.FullFileName{i,1}(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.DonPar)))-1 '.spc'];       
        [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName1, Inf,[0 0 0],'SPC-140/150/830/130');
       
        From=(UserValues.PIE.From(UserValues.Trace.DonPar));
        To=(UserValues.PIE.To(UserValues.Trace.DonPar));
        
        Microtime=MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To);
        
        blue=numel(Trace.Bleach{i,1});
        red=numel(Trace.Bleach{i,2});
        if blue>red
            Microtime_before{1}=[Microtime_before{1} (Microtime(1:sum(Trace.Data{i,1}(1:(red-1))))-From)];
            Microtime_after{1}=[Microtime_after{1} (Microtime(sum(Trace.Data{i,1}(1:red))+1:sum(Trace.Data{i,1}(1:blue)))-From)];
        end 
        photon=[1 cumsum(Trace.Data{i,1})];
        for j=1:Trace.Abort{i}
            Trace.MT{i,1}{j}=Microtime(photon(j):photon(j+1));
        end 
        
        FullFileName2=[Trace.FullFileName{i,1}(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.AccPar)))-1 '.spc'];       
        [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName2, Inf,[0 0 0],'SPC-140/150/830/130');
       
        From=(UserValues.PIE.From(UserValues.Trace.AccPar));
        To=(UserValues.PIE.To(UserValues.Trace.AccPar));
        
        Microtime=MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To);
        
        blue=numel(Trace.Bleach{i,1});
        red=numel(Trace.Bleach{i,2});
        if blue>red
            Microtime_before{2}=[Microtime_before{2} (Microtime(1:sum(Trace.Data{i,2}(1:(red-1))))-From)];
            Microtime_after{2}=[Microtime_after{2} (Microtime(sum(Trace.Data{i,2}(1:red))+1:sum(Trace.Data{i,2}(1:blue)))-From)];
        end 
        photon=[1 cumsum(Trace.Data{i,2})];
        for j=1:Trace.Abort{i}
            Trace.MT{i,2}{j}=Microtime(photon(j):photon(j+1));
        end
        
        FullFileName3=[Trace.FullFileName{i,1}(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.DirPar.Value)))-1 '.spc'];  
        if any(FullFileName3~=FullFileName2)
            [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName3, Inf,[0 0 0],'SPC-140/150/830/130');
        end
   
        From=(UserValues.PIE.From(UserValues.Trace.DirPar.Value));
        To=(UserValues.PIE.To(UserValues.Trace.DirPar.Value));
        
        Microtime=MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To);
        
        blue=numel(Trace.Bleach{i,1});
        red=numel(Trace.Bleach{i,2});
        if blue>red
            Microtime_before{3}=[Microtime_before{3} (Microtime(1:sum(Trace.Data{i,3}(1:(red-1))))-From)];
            Microtime_after{3}=[Microtime_after{3} (Microtime(sum(Trace.Data{i,3}(1:red))+1:sum(Trace.Data{i,3}(1:blue)))-From)];
        end 
        photon=[1 cumsum(Trace.Data{i,3})];
        for j=1:Trace.Abort{i}
            Trace.MT{i,3}{j}=Microtime(photon(j):photon(j+1));
        end      
       
        %progressbar((i-1)/size(Trace.FullFileName,1),0,handles.Bleach_Progressbar);
    %end
end
From=(UserValues.PIE.From(UserValues.Trace.DonPar));
To=(UserValues.PIE.To(UserValues.Trace.DonPar));
Trace.MT_Hist_before{1} = histc(Microtime_before{1},(0:8:(To-From)));
Trace.MT_Hist_after{1} = histc(Microtime_after{1},(0:8:(To-From)));
From=(UserValues.PIE.From(UserValues.Trace.AccPar));
To=(UserValues.PIE.To(UserValues.Trace.AccPar));
Trace.MT_Hist_before{2} = histc(Microtime_before{2},(0:8:(To-From)));
Trace.MT_Hist_after{2} = histc(Microtime_after{2},(0:8:(To-From)));
From=(UserValues.PIE.From(UserValues.Trace.DirPar.Value));
To=(UserValues.PIE.To(UserValues.Trace.DirPar.Value));
Trace.MT_Hist_before{3} = histc(Microtime_before{3},(0:8:(To-From)));
Trace.MT_Hist_after{3} = histc(Microtime_after{3},(0:8:(To-From)));


axes(handles.Lifetime_Plot);
Time=(0:8:4096)*40/4096;
cla; hold on;
plot(Time(1:numel(Trace.MT_Hist_before{1})),Trace.MT_Hist_before{1}/max(Trace.MT_Hist_before{1}),'Color',[0 1 1]);
plot(Time(1:numel(Trace.MT_Hist_after{1})),Trace.MT_Hist_after{1}/max(Trace.MT_Hist_after{1}),'Color',[0 0 1]);
plot(Time(1:numel(Trace.MT_Hist_before{2})),Trace.MT_Hist_before{2}/max(Trace.MT_Hist_before{2}),'Color',[1 1 0]);
plot(Time(1:numel(Trace.MT_Hist_after{2})),Trace.MT_Hist_after{2}/max(Trace.MT_Hist_after{2}),'Color',[0 1 0]);
plot(Time(1:numel(Trace.MT_Hist_before{3})),Trace.MT_Hist_before{3}/max(Trace.MT_Hist_before{3}),'Color',[1 0 1]);
plot(Time(1:numel(Trace.MT_Hist_after{3})),Trace.MT_Hist_after{3}/max(Trace.MT_Hist_after{3}),'Color',[1 0 0]);

if ~isempty(Trace.IRF)
    plot(Time(1:numel(Trace.IRF{1})),Trace.IRF{1}/max(Trace.IRF{1}),'Color',[0.2 0.2 0.4]);
    if numel(Trace.IRF)>1
        plot(Time(1:numel(Trace.IRF{2})),Trace.IRF{2}/max(Trace.IRF{2}),'Color',[0.2 0.4 0.2]);
        plot(Time(1:numel(Trace.IRF{3})),Trace.IRF{3}/max(Trace.IRF{3}),'Color',[0.4 0.2 0.2]);
    end
end

set(get(gca,'XLabel'),'String','Arrival time','Color',handles.ForeColor) 
set(get(gca,'YLabel'),'String','Normalized intensity','Color',handles.ForeColor) 

%progressbar(1);
a=get(handles.Bleach_Progressbar,'Children');
delete(a(1:end-1));
set(handles.Bleach_Progressbar, 'Title',blanks(0));
set(a(end),'Visible', 'on');
toc

if ~isempty(Trace.IRF)
    set(handles.Fit_Lifetime_D,...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor,...
        'Callback',@Fit_Lifetime_D,...
        'Enable','on',...
        'String','Fit Donor Lifetime');
end
if numel(Trace.IRF)>1
    set(handles.Fit_Lifetime_All,...
        'BackgroundColor',handles.ControlColor,...
        'ForegroundColor',handles.ForeColor,...
        'Callback',@Fit_Lifetime_All,...
        'Enable','on',...
        'String','Fit Global Lifetime');
end


%%%% Loads IRF for Lifetimefiting
function Bleach_Load_IRF_D(~,~)
handles = guidata(gcbo);
global Trace UserValues

[FileName, PathName] = uigetfile({'*1.spc', 'Becker&Hickl SPC 140/150 file (*1.spc)'},...
                                    'Choose files to load',UserValues.File.Path, 'MultiSelect', 'off');

FullFileName=fullfile(PathName,FileName);                            
if FileName~=0
    FullFileName=[FullFileName(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.DonPar)))-1 '.spc'];
    [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName, Inf,[0 0 0],'SPC-140/150/830/130');

    From=(UserValues.PIE.From(UserValues.Trace.DonPar));
    To=(UserValues.PIE.To(UserValues.Trace.DonPar));

    Microtime=double(MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To)-From)*40/4096;
    IRF=histc(Microtime,(0:8:(To-From))*40/4096);
    IRF(2:end-1)=(IRF(1:end-2)+IRF(2:end-1)+IRF(3:end))/3;
    Trace.IRF{1}=IRF;
    pIRF = Trace.IRF{1}./sum(Trace.IRF{1}); 
    Trace.Delay_IRF = 8*sum(pIRF'.*(0:1:(numel(pIRF)-1)))*40/4096;
    
    axes(handles.Lifetime_Plot);
    Time=(0:8:(To-From))*40/4096;

    cla; hold on;
    if ~isempty(Trace.MT_Hist_before)
        plot(Time,Trace.MT_Hist_before{1}/max(Trace.MT_Hist_before{1}),'Color',[0 1 1]);
        plot(Time,Trace.MT_Hist_after{1}/max(Trace.MT_Hist_after{1}),'Color',[0 0 1]);
    end
    plot(Time,Trace.IRF{1}/max(Trace.IRF{1}),'Color',[0.2 0.2 0.4]);

    set(get(gca,'XLabel'),'String','Arrival time','Color',handles.ForeColor) 
    set(get(gca,'YLabel'),'String','Normalized intensity','Color',handles.ForeColor) 

    if ~isempty(Trace.MT)
        set(handles.Fit_Lifetime_D,...
            'BackgroundColor',handles.ControlColor,...
            'ForegroundColor',handles.ForeColor,...
            'Callback',@Fit_Lifetime_D,...
            'Enable','on',...
            'String','Fit Donor Lifetime');
    end
    
end
function Bleach_Load_IRF_All(~,~,~)
handles = guidata(gcbo);
global Trace UserValues

[FileName1, PathName] = uigetfile({'*1.spc', 'Becker&Hickl SPC 140/150 file (*1.spc)'},...
                                    'Choose donor IRF to load',UserValues.PathName, 'MultiSelect', 'off');

FullFileName1=fullfile(PathName,FileName1);  
[FileName2, PathName] = uigetfile({'*1.spc', 'Becker&Hickl SPC 140/150 file (*1.spc)'},...
                                    'Choose FRET IRF to load',UserValues.PathName, 'MultiSelect', 'off');

FullFileName2=fullfile(PathName,FileName2); 
[FileName3, PathName] = uigetfile({'*1.spc', 'Becker&Hickl SPC 140/150 file (*1.spc)'},...
                                    'Choose direct IRF to load',UserValues.PathName, 'MultiSelect', 'off');

FullFileName3=fullfile(PathName,FileName3); 
if all(FileName1~=0) && all(FileName2~=0) && all(FileName3~=0)
    
    %%% Load Donor IRF
    FullFileName1=[FullFileName1(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.DonPar)))-1 '.spc'];   
    [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName1, Inf,[0 0 0],'SPC-140/150/830/130');

    From=(UserValues.PIE.From(UserValues.Trace.DonPar));
    To=(UserValues.PIE.To(UserValues.Trace.DonPar));

    Microtime=double(MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To)-From)*40/4096;
    IRF=histc(Microtime,(0:8:(To-From))*40/4096);
    IRF(2:end-1)=(IRF(1:end-2)+IRF(2:end-1)+IRF(3:end))/3;
    Trace.IRF{1}=IRF;
    
    %%% Load FRET IRF     
    FullFileName2=[FullFileName2(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.AccPar)))-1 '.spc'];    
    [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName2, Inf,[0 0 0],'SPC-140/150/830/130');
    
    From=(UserValues.PIE.From(UserValues.Trace.AccPar));
    To=(UserValues.PIE.To(UserValues.Trace.AccPar));

    Microtime=double(MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To)-From)*40/4096;
    IRF=histc(Microtime,(0:8:(To-From))*40/4096);
    IRF(2:end-1)=(IRF(1:end-2)+IRF(2:end-1)+IRF(3:end))/3;
    Trace.IRF{2}=IRF;
    
    %%% Load direct excitation IRF     
    FullFileName3=[FullFileName3(1:end-5) num2str((UserValues.PIE.Detector(UserValues.Trace.AccPar)))-1 '.spc'];   
    if any(FullFileName3~=FullFileName2)
        [~,MicroTimeArray,~,~,~]= Read_BH(FullFileName3, Inf,[0 0 0],'SPC-140/150/830/130');
    end

    From=(UserValues.PIE.From(UserValues.Trace.DirPar.Value));
    To=(UserValues.PIE.To(UserValues.Trace.DirPar.Value));

    Microtime=double(MicroTimeArray{1}(MicroTimeArray{1}>=From & MicroTimeArray{1}<=To)-From)*40/4096;
    IRF=histc(Microtime,(0:8:(To-From))*40/4096);
    IRF(2:end-1)=(IRF(1:end-2)+IRF(2:end-1)+IRF(3:end))/3;
    Trace.IRF{3}=IRF;    


    axes(handles.Lifetime_Plot);
    Time=(0:8:4096)*40/4096;

    cla; hold on;
    if ~isempty(Trace.MT_Hist_before)
        plot(Time(1:numel(Trace.MT_Hist_before{1})),Trace.MT_Hist_before{1}/max(Trace.MT_Hist_before{1}),'Color', [0 1 1]);
        plot(Time(1:numel(Trace.MT_Hist_after{1})),Trace.MT_Hist_after{1}/max(Trace.MT_Hist_after{1}),'Color', [0 0 1]);
        if numel(Trace.MT_Hist_before)>1
            plot(Time(1:numel(Trace.MT_Hist_before{2})),Trace.MT_Hist_before{2}/max(Trace.MT_Hist_before{2}),'Color', [1 1 0]);
            plot(Time(1:numel(Trace.MT_Hist_after{2})),Trace.MT_Hist_after{2}/max(Trace.MT_Hist_after{2}),'Color', [0 1 0]);
            plot(Time(1:numel(Trace.MT_Hist_before{3})),Trace.MT_Hist_before{3}/max(Trace.MT_Hist_before{3}),'Color', [1 0 1]);
            plot(Time(1:numel(Trace.MT_Hist_after{3})),Trace.MT_Hist_after{3}/max(Trace.MT_Hist_after{3}),'Color', [1 0 0]);
        end
    end
    plot(Time(1:numel(Trace.IRF{1})),Trace.IRF{1}/max(Trace.IRF{1}),'Color',[0.2 0.2 0.4]);
    plot(Time(1:numel(Trace.IRF{2})),Trace.IRF{2}/max(Trace.IRF{2}),'Color',[0.2 0.4 0.2]);
    plot(Time(1:numel(Trace.IRF{3})),Trace.IRF{3}/max(Trace.IRF{3}),'Color',[0.4 0.2 0.2]);

    set(get(gca,'XLabel'),'String','Arrival time','Color',handles.ForeColor) 
    set(get(gca,'YLabel'),'String','Normalized intensity','Color',handles.ForeColor) 
    if ~isempty(Trace.MT)
        set(handles.Fit_Lifetime_D,...
            'BackgroundColor',handles.ControlColor,...
            'ForegroundColor',handles.ForeColor,...
            'Callback',@Fit_Lifetime_D,...
            'Enable','on',...
            'String','Fit Donor Lifetime');
    end
    if size(Trace.MT,2)>1
        set(handles.Fit_Lifetime_All,...
            'BackgroundColor',handles.ControlColor,...
            'ForegroundColor',handles.ForeColor,...
            'Callback',@Fit_Lifetime_All,...
            'Enable','on',...
            'String','Fit Global Lifetime');        
    end
end

%%%% Binwise fitting of lifetime
function Fit_Lifetime_D(~,~)
handles = guidata(gcbo);
global Trace UserValues

set(get(handles.Bleach_Progressbar,'Children'),'Visible','off');
%progressbar(0,1,handles.Bleach_Progressbar);

IRF=Trace.IRF{1}'/max(Trace.IRF{1});

%%% align irf
%SIG=Trace.MT_Hist_before{1}/max(Trace.MT_Hist_before{1});
%halfSIG = find(SIG>0.1,1,'first');
%halfIRF = find(IRF>0.1,1,'first');
%IRF = circshift(IRF,[1,halfSIG-halfIRF]);

SIG=Trace.MT_Hist_after{1}/max(Trace.MT_Hist_after{1});
length=numel(IRF);

T=1/25000000*length/512;
gamma = 0.001;
mean_tau = 5e-9;
range_tau = 9e-9;
steps_tau = 2111;
range = mean_tau-range_tau/2:range_tau/steps_tau:mean_tau+range_tau/2;

[tau, i] = meshgrid(mean_tau-range_tau/2:range_tau/steps_tau:mean_tau+range_tau/2, 0:length);
GAMMA = T./tau;
p = exp(-i.*GAMMA/length).*(exp(GAMMA/length)-1)./(1-exp(-GAMMA));
p = p(1:length,:);
c = convnfft(p,IRF(ones(steps_tau+1,1),:)', 'full', 1);
z = sum(c,1);
c = c./z(ones(size(c,1),1),:);
c = c(1:length,:);
model = (1-gamma)*c + gamma * IRF(ones(steps_tau+1,1),:)';
z = sum(model,1);
model = model./z(ones(size(model,1),1),:);

Trace.Tau_Full=LifetimeFit(SIG,model,range);
set(handles.D_Lifetime,'String',num2str(Trace.Tau_Full*1e9));
SIG=Trace.MT_Hist_before{1}/max(Trace.MT_Hist_before{1});
Trace.Tau_FRET=LifetimeFit(SIG,model,range);
set(handles.DA_Lifetime,'String',num2str(Trace.Tau_FRET*1e9));
From=(UserValues.PIE.From(UserValues.Trace.DonPar));
To=(UserValues.PIE.To(UserValues.Trace.DonPar));
for i=1:size(Trace.MT,1)
    MT=Trace.MT{i,1};
    Tau=cell(numel(MT),1);
    noe=numel(MT);

    for j=1:noe
        SIG=histc(MT{j},From:8:To);
        if size(SIG,1) == 1
            SIG = SIG';
        end
        Tau{j}=LifetimeFit(SIG,model,range); 
    end
    Trace.Lifetime{i,1}=cell2mat(Tau);
    %progressbar(i/size(Trace.MT,1),0,handles.Bleach_Progressbar);
end

%progressbar(1);
a=get(handles.Bleach_Progressbar,'Children');
delete(a(1:end-1));
set(handles.Bleach_Progressbar, 'Title',blanks(0));
set(a(end),'Visible', 'on');

function Fit_Lifetime_All(~,~)
profile on;
test;
profile viewer;
function test
handles = guidata(gcbo);
global Trace UserValues

set(get(handles.Bleach_Progressbar,'Children'),'Visible','off');
%progressbar(0,1,handles.Bleach_Progressbar);

IRF=Trace.IRF{1}/max(Trace.IRF{1});
SIG=Trace.MT_Hist_after{1}/max(Trace.MT_Hist_after{1});
length=numel(IRF);

T=1/25000000*length/512;
gamma = 0.001;
mean_tau = 5e-9;
range_tau = 9e-9;
steps_tau = 2111;
range = mean_tau-range_tau/2:range_tau/steps_tau:mean_tau+range_tau/2;

[tau, i] = meshgrid(mean_tau-range_tau/2:range_tau/steps_tau:mean_tau+range_tau/2, 0:length);
GAMMA = T./tau;
p = exp(-i.*GAMMA/length).*(exp(GAMMA/length)-1)./(1-exp(-GAMMA));
p = p(1:length,:);
c = convnfft(p,IRF(ones(steps_tau+1,1),:)', 'full', 1);
z = sum(c,1);
c = c./z(ones(size(c,1),1),:);
c = c(1:length,:);
model = (1-gamma)*c + gamma * IRF(ones(steps_tau+1,1),:)';
z = sum(model,1);
model = model./z(ones(size(model,1),1),:);

Trace.Tau_Full=LifetimeFit(SIG,model,range);
set(handles.D_Lifetime,'String',num2str(Trace.Tau_Full*1e9));
SIG=Trace.MT_Hist_before{1}/max(Trace.MT_Hist_before{1});


IRF=Trace.IRF{3}/max(Trace.IRF{3});
SIG=Trace.MT_Hist_after{3}/max(Trace.MT_Hist_after{3});
length=numel(IRF);

T=1/25000000*length/512;
gamma = 0.001;
mean_tau = 5e-9;
range_tau = 9e-9;
steps_tau = 2111;
range = mean_tau-range_tau/2:range_tau/steps_tau:mean_tau+range_tau/2;

[tau, i] = meshgrid(mean_tau-range_tau/2:range_tau/steps_tau:mean_tau+range_tau/2, 0:length);
GAMMA = T./tau;
p = exp(-i.*GAMMA/length).*(exp(GAMMA/length)-1)./(1-exp(-GAMMA));
p = p(1:length,:);
c = convnfft(p,IRF(ones(steps_tau+1,1),:)', 'full', 1);
z = sum(c,1);
c = c./z(ones(size(c,1),1),:);
c = c(1:length,:);
model = (1-gamma)*c + gamma * IRF(ones(steps_tau+1,1),:)';
z = sum(model,1);
model = model./z(ones(size(model,1),1),:);

Trace.Tau_FRET=LifetimeFit(SIG,model,range);
set(handles.DA_Lifetime,'String',num2str(Trace.Tau_FRET*1e9));


SIG=Trace.MT_Hist_before{3}/max(Trace.MT_Hist_before{3});
Trace.Tau_Acc=LifetimeFit(SIG,model,range);
set(handles.A_Lifetime,'String',num2str(Trace.Tau_Acc*1e9));

l = [numel(Trace.IRF{1}) numel(Trace.IRF{2}) numel(Trace.IRF{3})];
options = optimset('TolFun',1E-10,'TolX',1E-1,'MaxIter',1000,'Display','off');
tauD = 3.4*512/40;
tauA = 4*512/40;
IRF=Trace.IRF;

microtime=ones(1280,513);
a=ones(1280,513);
for i=1:513
    microtime(:,i)=0.1:0.1:128;
end
a=0:512; 
c=[];
for i=1:1280
   b=exp(-a./microtime(1,:));
   c(i,:)=conv(b,Trace.IRF{1});
end
for i=1%:size(Trace.MT,1)
    MT1=Trace.MT{i,1};
    MT2=Trace.MT{i,2};
    MT3=Trace.MT{i,3};
    n = cellfun(@(x,y,z) [numel(x), numel(y), numel(z)],MT1,MT2,MT3,'UniformOutput',false);  
    From1=(UserValues.PIE.From(UserValues.Trace.DonPar));
    To1=(UserValues.PIE.To(UserValues.Trace.DonPar));
    From2=(UserValues.PIE.From(UserValues.Trace.AccPar));
    To2=(UserValues.PIE.To(UserValues.Trace.AccPar));
    From3=(UserValues.PIE.From(UserValues.Trace.DirPar.Value));
    To3=(UserValues.PIE.To(UserValues.Trace.DirPar.Value));
    Lifetime1=cell(1,size(MT1,1));
    Lifetime2=cell(1,size(MT1,1));
    for j = 1:numel(MT1)
        mt1=histc(MT1{j}-From1,0:8:(To1-From1));
        mt2=histc(MT2{j}-From2,0:8:(To2-From2));
        mt3=histc(MT3{j}-From3,0:8:(To3-From3));
        Data=double([mt1 mt2 mt3]);
        [lifetime,~,~] = fminsearch(@(x) global_fit_2C(x,Data,IRF,l,n{j},c),[tauD,tauA],options);        
        Lifetime1{j}=lifetime(1)*40E-9/512;
        Lifetime2{j}=lifetime(2)*40E-9/512;
    end
    Trace.Lifetime{i,1}=Lifetime1;
    Trace.Lifetime{i,2}=Lifetime2;
    %progressbar(i/size(Trace.MT,1),0,handles.Bleach_Progressbar);
end



%progressbar(1);
a=get(handles.Bleach_Progressbar,'Children');
delete(a(1:end-1));
set(handles.Bleach_Progressbar, 'Title',blanks(0));
set(a(end),'Visible', 'on');




function [mean_tau,Istar] = LifetimeFit(SIG,model,range)
k=numel(SIG);
SIG = SIG/sum(SIG);
div=100;
MIN=1;
for i=1:3
    
    x=MIN:div:(MIN+20*div);
    Range=range(MIN:div:(MIN+20*div));
    Model=model(:,MIN:div:(MIN+20*div));
    temp=bsxfun(@times,log(bsxfun(@ldivide,Model,SIG)),SIG);  
    temp(isnan(temp))=0;
    KL = (1/(k-1-2))*sum(temp,1);  
    if sum(KL) == 0
        mean_tau = 0;
        MIN=1;
    else
        mean_tau = Range(KL == min(KL));
        MIN=x(find(Range==mean_tau,1,'first'))-div;  
        if MIN<1
            MIN=1;
        end
    end
    div=div/10;
    
end
Istar = KL(KL== min(KL));

function [Istar] = global_fit_2C(tau,h,IRF,l,n,a)
%tau is lifetime as vector [tauD, tauA]
%h is the concatenated histogram
%IRF is the respective IRFs
%l is a vector of the length of the channels
cg = exp(-[0:l(1)]./tau(1));
dg = conv(cg,IRF{1});
dg = dg(1:l(1));
dg = n(1).*dg./sum(dg);

cr = exp(-[0:l(2)]./tau(2));
dr = conv(cr,IRF{2});
dr = dr(1:l(2));
dr = n(2).*dr./sum(dr);

if tau(1) ~= tau(2)
cf = exp(-[0:l(3)]./tau(2))-exp(-[0:l(3)]./tau(1));
elseif tau(1) == tau(2)
cf = [0:l(3)].*exp(-[0:l(3)]./tau(1));
end
df = conv(cf,IRF{3});
df = df(1:l(3));
df = n(3).*df./sum(df);

%concatenate decays
d = [dg df dr];
d(d==0)=min(d(d>0));
%calculate Istar
k = numel(h);
temp=log(h./d).*h;
temp(isnan(temp))=0;
Istar = (1/(k-1-2))*sum(temp);  



function [x, E, s, lambdamax] = tvdip(y, lambda, display, stoptol, maxiter)
% Performs discrete total variation denoising (TVD) using a primal-dual
% interior-point solver. It minimizes the following discrete functional:
%
%  E=(1/2)||y-x||_2^2+lambda*||Dx||_1,
%
% over the variable x, given the input signal y, according to each
% value of the regularization parameter lambda > 0. D is the first
% difference matrix. Uses hot-restarts from each value of lambda to speed
% up convergence for subsequent values: best use of this feature is made by
% ensuring that the chosen lambda values are close to each other.
%
% Usage:
% [x, E, s] = tvdip(y, lambda, display, stoptol, maxiter)
%
% Input arguments:
% - y          Original signal to denoise, size N x 1.
% - lambda     A vector of positive regularization parameters, size L x 1.
%              TVD will be applied to each value in the vector.
% - display    (Optional) Set to 0 to turn off progress display, 1 to turn
%              on. If not specifed, defaults to progress display on.
% - stoptol    (Optional) Precision as determined by duality gap tolerance,
%              if not specified, defaults to 1e-3.
% - maxiter    (Optional) Maximum interior-point iterations, if not
%              specified defaults to 60.
%
% Output arguments:
% - x          Denoised output signal for each value of lambda, size N x L.
% - E          Objective functional at minimum for each lambda, size L x 1.
% - s          Optimization result, 1 = solved, 0 = maximum iterations
%              exceeded before reaching duality gap tolerance, size L x 1.
% - lambdamax  Maximum value of lambda for the given y. If
%              lambda >= lambdamax, the output is the trivial constant
%              solution x = mean(y).
%
% (c) Max Little, 2010. Based around code originally written by 
% S.J. Kim, K. Koh, S. Boyd and D. Gorinevsky. If you use this code for
% your research, please cite:
% M.A. Little, Nick S. Jones (2010)
% "Sparse Bayesian Step-Filtering for High-Throughput Analysis of Molecular
% Machine Dynamics", in 2010 IEEE International Conference on Acoustics,
% Speech and Signal Processing, 2010, ICASSP 2010 Proceedings.
%
% This code is released under the terms of GNU General Public License as
% published by the Free Software Foundation; version 2 or later.

error(nargchk(2,5,nargin));
if (nargin < 3)
    display = 1;
end
if (nargin < 4)
    stoptol = 1e-3;
end
if (nargin < 5)
    maxiter = 60;
end

y = y(:);

% Search tuning parameters
ALPHA     = 0.01;   % Backtracking linesearch parameter (0,0.5]
BETA      = 0.5;    % Backtracking linesearch parameter (0,1)
MAXLSITER = 20;     % Max iterations of backtracking linesearch
MU        = 2;      % t update

N = length(y);    % Length of input signal y
M = N-1;          % Size of Dx

% Construct sparse operator matrices
I1 = speye(M,M);
O1 = spalloc(M,1,M);
D = [I1 O1]-[O1 I1];

DDT = D*D';
Dy  = D*y;

% Find max value of lambda
lambdamax = max(abs(DDT\Dy));

if (display)
    fprintf('lambda_max=%5.2e\n', lambdamax);
end

L = length(lambda);
x = zeros(N, L);
s = zeros(L, 1);
E = zeros(L, 1);

% Optimization variables set up once at the start
z    = zeros(M,1);   % Dual variable
mu1  = ones(M,1);    % Dual of dual variable
mu2  = ones(M,1);    % Dual of dual variable

% Work through each value of lambda, with hot-restart on optimization
% variables
for l = 1:L
    
    t    =  1e-10; 
    step =  Inf;
    f1   =  z-lambda(l);
    f2   = -z-lambda(l);

    % Main optimization loop
    s(l) = 1;

    if (display)
        fprintf('Solving for lambda=%5.2e, lambda/lambda_max=%5.2e\nIter# Primal    Dual      Gap\n', ...
            lambda(l), lambda(l)/lambdamax);
    end
    for iters = 0:maxiter

        DTz  = (z'*D)';
        DDTz = D*DTz;
        w    = Dy-(mu1-mu2);

        % Calculate objectives and primal-dual gap
        pobj1 = 0.5*w'*(DDT\w)+lambda(l)*sum(mu1+mu2);
        pobj2 = 0.5*DTz'*DTz+lambda(l)*sum(abs(Dy-DDTz));
        pobj = min(pobj1,pobj2);
        dobj = -0.5*DTz'*DTz+Dy'*z;
        gap  = pobj - dobj;

        if (display)
            fprintf('%5d %7.2e %7.2e %7.2e\n', iters, pobj, dobj, gap);
        end

        % Test duality gap stopping criterion
        if (gap <= stoptol)
            s(l) = 1;
            break;
        end

        if (step >= 0.2)
            t = max(2*M*MU/gap, 1.2*t);
        end

        % Do Newton step
        rz      =  DDTz - w;
        S       =  DDT-sparse(1:M,1:M,mu1./f1+mu2./f2);
        r       = -DDTz + Dy + (1/t)./f1 - (1/t)./f2;
        dz      =  S\r;
        dmu1    = -(mu1+((1/t)+dz.*mu1)./f1);
        dmu2    = -(mu2+((1/t)-dz.*mu2)./f2);

        resDual = rz;
        resCent = [-mu1.*f1-1/t; -mu2.*f2-1/t];
        residual= [resDual; resCent];

        % Perform backtracking linesearch
        negIdx1 = (dmu1 < 0); 
        negIdx2 = (dmu2 < 0);
        step = 1;
        if (any(negIdx1))
            step = min( step, 0.99*min(-mu1(negIdx1)./dmu1(negIdx1)) );
        end
        if (any(negIdx2))
            step = min( step, 0.99*min(-mu2(negIdx2)./dmu2(negIdx2)) );
        end

        for liter = 1:MAXLSITER
            newz    =  z  + step*dz;
            newmu1  =  mu1 + step*dmu1;
            newmu2  =  mu2 + step*dmu2;
            newf1   =  newz - lambda(l);
            newf2   = -newz - lambda(l);

            % Update residuals
            newResDual  = DDT*newz - Dy + newmu1 - newmu2;
            newResCent  = [-newmu1.*newf1-1/t; -newmu2.*newf2-1/t];
            newResidual = [newResDual; newResCent];

            if ((max(max(newf1),max(newf2)) < 0) && ...
                    (norm(newResidual) <= (1-ALPHA*step)*norm(residual)))
                break;
            end
            step = BETA*step;
        end

        % Update primal and dual optimization parameters
        z = newz;
        mu1 = newmu1;
        mu2 = newmu2;
        f1 = newf1;
        f2 = newf2;
    end

    x(:,l) = y-D'*z;
    E(l) = 0.5*sum((y-x(:,l)).^2)+lambda(l)*sum(abs(D*x(:,l)));

    % We may have a close solution that does not satisfy the duality gap
    if (iters >= maxiter)
        s(l) = 0;
    end
    
    if (display)
        if (s(l))
            fprintf('Solved to precision of duality gap %5.2e\n', gap);
        else
            fprintf('Max iterations exceeded - solution may be inaccurate\n');
        end
    end

end

function lambdamax = tvdiplmax(y)
% Calculate the value of lambda so that if lambda >= lambdamax, the TVD
% functional solved by TVDIP is minimized by the trivial constant
% solution x = mean(y). This can then be used to determine a useful range
% of values of lambda, for example.
%
% Usage:
% lambdamax = tvdiplmax(y)
%
% Input arguments:
% - y          Original signal to denoise, size N x 1.
%
% Output arguments:
% - lambdamax  Value of at which x = mean(y) is the output of the TVDIP
%              function.
%
% (c) Max Little, 2010. Based around code originally written by 
% S.J. Kim, K. Koh, S. Boyd and D. Gorinevsky. If you use this code for
% your research, please cite:
% M.A. Little, Nick S. Jones (2010)
% "Sparse Bayesian Step-Filtering for High-Throughput Analysis of Molecular
% Machine Dynamics", in 2010 IEEE International Conference on Acoustics,
% Speech and Signal Processing, 2010, ICASSP 2010 Proceedings.
%
% This code is released under the terms of GNU General Public License as
% published by the Free Software Foundation; version 2 or later.

narginchk(1,1);
y = y(:);
N = length(y);
M = N - 1;

% Construct sparse operator matrices
I1 = speye(M,M);
O1 = spalloc(M,1,M);
D = [I1 O1]-[O1 I1];

DDT = D*D';
Dy  = D*y;

lambdamax = max(abs(DDT\Dy));

