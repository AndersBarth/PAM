function PDAFit(~,~)
global UserValues PDAMeta

hfig=findobj('Tag','PDAFit');

LSUserValues(0);
Look=UserValues.Look;

addpath([pwd filesep 'tcPDA C-Code']);

PDAMeta.PDAMethod = 'Histogram Library'; % {'Histogram Library','MLE','MonteCarlo'}
PDAMeta.FitMethod = 'Simplex'; % {'Simplex','Gradient-Based','Patternsearch'}
if isempty(hfig)
    %% Define main window
    h.PDA = figure(...
        'Units','normalized',...
        'Name','PDAFit',...
        'NumberTitle','off',...
        'MenuBar','none',...
        'defaultUicontrolFontName','Times',...
        'defaultAxesFontName','Times',...
        'defaultTextFontName','Times',...
        'OuterPosition',[0.01 0.05 0.78 0.9],...
        'UserData',[],...
        'Visible','on',...
        'Tag','PDAFit',...
        'Toolbar','figure',...
        'CloseRequestFcn',@Close_PDA);
    
    whitebg(h.PDA, Look.Fore);
    set(h.PDA,'Color',Look.Back);
    
    %%% define menu items
    h.File_Menu = uimenu(...
        'Parent',h.PDA,...
        'Label','File',...
        'Tag','File_Menu',...
        'Enable','off');
    %%% Load Burst Data Callback
    h.Load_PDA = uimenu(...
        'Parent',h.File_Menu,...
        'Label','Load PDA Data',...
        'Callback',@Load_PDA_Data,...
        'Tag','Load_PDA_Data');
    h.Save_PDA = uimenu(...
        'Parent',h.File_Menu,...
        'Label','Save PDA Project',...
        'Callback',@Save_PDA_Project,...
        'Tag','Save_PDA_Project');
    %%% Define panels
    h.MainPlotPanel = uibuttongroup(...
        'Parent',h.PDA,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'HighlightColor', Look.Control,...
        'ShadowColor', Look.Shadow,...
        'Units','normalized',...
        'Position',[0 0.25 0.8 0.75],...
        'Tag','MainPlotPanel');
    
    h.FitTablePanel = uibuttongroup(...
        'Parent',h.PDA,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'HighlightColor', Look.Control,...
        'ShadowColor', Look.Shadow,...
        'Units','normalized',...
        'Position',[0 0 1 0.25],...
        'Tag','FitTablePanel');
    
    h.SettingsPanel = uibuttongroup(...
        'Parent',h.PDA,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'HighlightColor', Look.Control,...
        'ShadowColor', Look.Shadow,...
        'Units','normalized',...
        'Position',[0.8 0.25 0.2 0.75],...
        'Tag','SettingsPanel');
    
    h.NumberOfBins_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Number of Bins',...
        'Position',[0.05 0.95 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','NumberOfBins_Text');
    
    h.NumberOfBins_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'FontSize',14,...
        'String','100',...
        'Position',[0.7 0.95 0.25 0.03],...
        'Callback',{@UpdateMainPlot,2,1},...
        'Tag','NumberOfBins_Edit');
    
    h.NumberOfPhotMin_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Minimum Number per Bin',...
        'Position',[0.05 0.9 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','NumberOfPhotMin_Text');
    
    h.NumberOfPhotMin_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'FontSize',14,...
        'String','0',...
        'Callback',{@UpdateMainPlot,2,1},...
        'Position',[0.7 0.9 0.25 0.03],...
        'Tag','NumberOfPhotMin_Edit');
    
    h.NumberOfPhotMax_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Maximum Number per Bin',...
        'Position',[0.05 0.85 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','NumberOfPhotMax_Text');
    
    h.NumberOfPhotMax_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Inf',...
        'Callback',{@UpdateMainPlot,2,1},...
        'Position',[0.7 0.85 0.25 0.03],...
        'Tag','NumberOfPhotMax_Edit');
    
    h.NumberOfBinsE_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Grid resolution for E',...
        'TooltipString','Higher increases fit accuracy, but makes it slower.',...
        'Position',[0.05 0.8 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','NumberOfBinsE_Text');
    
    h.NumberOfBinsE_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','100',...
        'TooltipString','Higher increases fit accuracy, but makes it slower.',...
        'FontSize',14,...
        'Callback',{@UpdateMainPlot,0,1},...
        'Position',[0.7 0.8 0.25 0.03],...
        'Tag','NumberOfBinsE_Edit');
    
    h.Corrections_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Corrections',...
        'Position',[0.05 0.7 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','NumberOfBinsE_Text');
    
    h.Gamma_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Gamma Factor',...
        'Position',[0.05 0.65 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','Gamma_Text');
    
    h.Gamma_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','1',...
        'FontSize',14,...
        'Callback',{@UpdateMainPlot,0,1},...
        'Position',[0.7 0.65 0.25 0.03],...
        'Tag','Gamma_Edit');
    
    h.DirectEx_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Direct Excitation Prob.',...
        'Position',[0.05 0.6 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','DirectEx_Text');
    
    h.DirectEx_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','0',...
        'FontSize',14,...
        'Callback',{@UpdateMainPlot,0,1},...
        'Position',[0.7 0.6 0.25 0.03],...
        'Tag','DirectEx_Edit');
    
    h.Crosstalk_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Crosstalk',...
        'Position',[0.05 0.55 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','Crosstalk_Text');
    
    h.Crosstalk_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','0',...
        'FontSize',14,...
        'Callback',{@UpdateMainPlot,0,1},...
        'Position',[0.7 0.55 0.25 0.03],...
        'Tag','Crosstalk_Edit');
    
    h.BGdonor_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Donor Background [kHz]',...
        'Position',[0.05 0.5 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','BGdonor_Text');
    
    h.BGdonor_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','0',...
        'Callback',{@UpdateMainPlot,0,1},...
        'FontSize',14,...
        'Position',[0.7 0.5 0.25 0.03],...
        'Tag','BGdonor_Edit');
    
    h.BGacc_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String','Acceptor Background [kHz]',...
        'Position',[0.05 0.45 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','BGacc_Text');
    
    h.BGacc_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','0',...
        'FontSize',14,...
        'Callback',{@UpdateMainPlot,0,1},...
        'Position',[0.7 0.45 0.25 0.03],...
        'Tag','BGacc_Edit');
    
    h.R0_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String',sprintf('Foerster Radius [A]'),...
        'Position',[0.05 0.4 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','R0_Text');
    
    h.R0_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','59',...
        'FontSize',14,...
        'Callback',{@UpdateMainPlot,0,1},...
        'Position',[0.7 0.4 0.25 0.03],...
        'Tag','R0_Edit');
    
    h.PDAMethod_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'String','PDA Method',...
        'FontSize',14,...
        'Position',[0.05 0.25 0.35 0.03],...
        'HorizontalAlignment','left',...
        'Tag','PDAMethod_Text');
    
    h.PDAMethod_Popupmenu = uicontrol(...
        'Style','popupmenu',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String',{'Histogram Library','MLE','MonteCarlo'},...
        'Value',1,...
        'FontSize',14,...
        'Position',[0.4 0.25 0.55 0.03],...
        'Tag','PDAMethod_Popupmenu',...
        'Callback',@Update_Settings);
    
    h.FitMethod_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'String','Fit Method',...
        'FontSize',14,...
        'Position',[0.05 0.2 0.35 0.03],...
        'HorizontalAlignment','left',...
        'Tag','FitMethod_Text');
    
    h.FitMethod_Popupmenu = uicontrol(...
        'Style','popupmenu',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String',{'Simplex','Gradient-Based','Patternsearch'},...
        'Value',1,...
        'FontSize',14,...
        'Position',[0.4 0.2 0.55 0.03],...
        'Tag','FitMethod_Popupmenu',...
        'Callback',@Update_Settings);
    
     h.OverSampling_Text = uicontrol(...
        'Style','text',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'Units','normalized',...
        'FontSize',14,...
        'String',sprintf('MonteCarlo Oversampling'),...
        'Position',[0.05 0.15 0.55 0.03],...
        'HorizontalAlignment','left',...
        'Tag','OverSampling_Text');
    
    h.OverSampling_Edit = uicontrol(...
        'Style','edit',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','10',...
        'FontSize',14,...
        'Callback',[],...
        'Position',[0.7 0.15 0.25 0.03],...
        'Tag','OverSampling_Edit');
    
    h.StartFit_Button = uicontrol(...
        'Style','pushbutton',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','Start Fit',...
        'FontSize',14,...
        'Position',[0.05 0.05 0.4 0.05],...
        'Tag','StartFit_Button',...
        'Callback',@Start_PDA_Fit);
    
    h.ViewCurve_Button = uicontrol(...
        'Style','pushbutton',...
        'Parent',h.SettingsPanel,...
        'BackgroundColor', Look.Fore,...
        'ForegroundColor', Look.Back,...
        'Units','normalized',...
        'String','View Curve',...
        'FontSize',14,...
        'Position',[0.55 0.05 0.4 0.05],...
        'Tag','ViewCurve_Button',...
        'Callback',@Start_PDA_Fit);
    
    %%% Progress Bar
    h.Progress_Panel = uibuttongroup(...
        'Parent',h.FitTablePanel,...
        'BackgroundColor', Look.Back,...
        'ForegroundColor', Look.Fore,...
        'HighlightColor', Look.Control,...
        'ShadowColor', Look.Shadow,...
        'Units','normalized',...
        'Position',[0 0 0.4 0.2],...
        'Tag','ProgressPanel');
    %%% Axes for progressbar
    h.Progress_Axes = axes(...
        'Parent',h.Progress_Panel,...
        'Tag','Progress_Axes',...
        'Units','normalized',...
        'Color',Look.Control,...
        'Position',[0 0 1 1]);
    h.Progress_Axes.XTick=[]; h.Progress_Axes.YTick=[];
    %%% Progress and filename text
    h.Progress_Text=text(...
        'Parent',h.Progress_Axes,...
        'Tag','Progress_Text',...
        'Units','normalized',...
        'FontSize',12,...
        'FontWeight','bold',...
        'String','Nothing loaded',...
        'Interpreter','none',...
        'HorizontalAlignment','center',...
        'BackgroundColor','none',...
        'Color',Look.Fore,...
        'Position',[0.5 0.5]);
    %%% Define Axes
    h.MainPlot = axes(...
        'Parent',h.MainPlotPanel,...
        'Units','normalized',...
        'Position',[0.07 0.1 0.86 0.75],...
        'Box','on',...
        'Tag','MainPlot',...
        'FontSize',18,...
        'nextplot','add',...
        'UIContextMenu',[],...
        'Color',Look.Axes,...
        'XColor',[1 1 1],...
        'YColor',[1 1 1],...
        'XLim',[0 1],...
        'LineWidth',2,...
        'YLimMode','auto');
    h.Chi2_Text = text('Units','normalized',...
        'Position',[0.9,0.95],...
        'String',['\chi^2_{red.} = ' sprintf('%1.2f',randn(1))],...
        'FontWeight','bold',...
        'FontSize',18,...
        'FontSmoothing','on');
        
    xlabel('Proximity Ratio','Color',[1 1 1]);
    ylabel('#','Color',[1 1 1]);
    h.ResidualsPlot = axes(...
        'Parent',h.MainPlotPanel,...
        'Units','normalized',...
        'Position',[0.07 0.85 0.86 0.13],...
        'Box','on',...
        'Tag','ResidualsPlot',...
        'FontSize',18,...
        'nextplot','add',...
        'UIContextMenu',[],...
        'Color',Look.Axes,...
        'XColor',[1 1 1],...
        'YColor',[1 1 1],...
        'XTickLabel','',...
        'XLim',[0 1],...
        'XGrid','on',...
        'YGrid','on',...
        'GridAlpha',0.5,...
        'LineWidth',2,...
        'YLimMode','auto');
    ylabel('w_{res}','Color',[1 1 1]);
    %%% Initialize plots
    data = abs(sum(peaks(51),1));
    fit = data.*(1 + 0.15*randn(1,51));
    w_res = (data-fit)./sqrt(data);
    h.DataHist = bar(h.MainPlot,...
        linspace(0,1,51),...
        data,...
        'EdgeColor','none',...
        'FaceColor',[0.4 0.4 0.4],...
        'BarWidth',1);
    h.Residuals = bar(h.ResidualsPlot,...
        linspace(0,1,51),...
        w_res,...
        'FaceColor','none',...
        'EdgeColor',[0 0 0],...
        'BarWidth',1,...
        'LineWidth',2);
    color = lines(5);
    for i = 1:5 %%% plots for individual hists
        h.FitHistInd{i} = bar(h.MainPlot,...
            linspace(0,1,51),...
            fit,...
            'EdgeColor',color(i,:),...
            'FaceColor','none',...
            'BarWidth',1,...
            'LineWidth',2,...
            'LineStyle','-',...
            'Visible','off');
    end
    h.FitHist = bar(h.MainPlot,...
        linspace(0,1,51),...
        fit,...
        'EdgeColor',[0 0 0],...
        'FaceColor','none',...
        'BarWidth',1,...
        'LineWidth',2);
    linkaxes([h.MainPlot,h.ResidualsPlot],'x');
    
    %%% Fit Parameter Table
    rownames = {'Gauss1', 'Gauss2', 'Gauss3', 'Gauss4', 'Gauss5'};
    columnnames = {'Active','Amplitude','F','R_{DA}','F','sigma','F'};
    data = {true,1,true,50,false,2,false;...
        false,1,false,50,false,2,false;...
        false,1,false,50,false,2,false;...
        false,1,false,50,false,2,false;...
        false,1,false,50,false,2,false};
    columnformat = {'logical','numeric','logical','numeric','logical','numeric','logical'};
    h.Fit_Table = uitable(...
        h.FitTablePanel,...
        'Tag','Fit_Table',...
        'Units','normalized',...
        'BackgroundColor',[Look.Axes;Look.Fore],...
        'ForegroundColor',Look.Disabled,...
        'FontSize',12,...
        'Position',[0 0.2 0.4 0.8],...
        'RowName',rownames,...
        'ColumnName',columnnames,...
        'ColumnEditable',true(1,7),...
        'Data',data,...
        'ColumnFormat',columnformat,...
        'CellEditCallback',[],...
        'CellSelectionCallback',[]);
    
    %%% Burst Size Distribution Plot
    h.BSDAxes = axes(...
        'Parent',h.FitTablePanel,...
        'Units','normalized',...
        'Position',[0.43 0.18 0.25 0.78],...
        'Box','on',...
        'Tag','BSDPlot',...
        'FontSize',12,...
        'nextplot','add',...
        'UIContextMenu',[],...
        'Color',Look.Axes,...
        'XColor',[1 1 1],...
        'YColor',[1 1 1],...
        'XGrid','on',...
        'YGrid','on',...
        'GridAlpha',0.5,...
        'LineWidth',2,...
        'YLimMode','auto',...
        'XLimMode','auto');
    xlabel('# Photons per Bin');
    ylabel('Occurence','Color',[1 1 1]);
    h.BSDPlot = plot(h.BSDAxes,...
        [0:200],...
        exp(-[0:200]/50)*1000,...
        'Color','k',...
        'LineWidth',2);
    axis('tight');
    
    %%% Result Plot
    h.GaussAxes = axes(...
        'Parent',h.FitTablePanel,...
        'Units','normalized',...
        'Position',[0.73 0.18 0.25 0.78],...
        'Box','on',...
        'Tag','GaussAxes',...
        'FontSize',12,...
        'nextplot','add',...
        'UIContextMenu',[],...
        'Color',Look.Axes,...
        'XColor',[1 1 1],...
        'YColor',[1 1 1],...
        'XGrid','on',...
        'YGrid','on',...
        'GridAlpha',0.5,...
        'LineWidth',2,...
        'YLimMode','auto',...
        'XLimMode','auto');
    xlabel('Distance [A]');
    ylabel('Probability','Color',[1 1 1]);
    gauss_dummy = zeros(5,150*10+1);
    for i = 1:5
        gauss_dummy(i,:) =  normpdf([0:0.1:150],40+10*i,i);
    end
    
    for i = 1:5
        h.GaussPlot{i} = plot(h.GaussAxes,...
            [0:0.1:150],...
            gauss_dummy(i,:),...
            'Color',color(i,:),...
            'LineWidth',2);
    end
    
    h.GaussPlotAll = plot(h.GaussAxes,...
        [0:0.1:150],...
        sum(gauss_dummy,1),...
        'Color','k',...
        'LineWidth',2);
    axis('tight');
    xlim(h.GaussAxes,[40 120]);
    
    %%% Re-enable menu
    h.File_Menu.Enable = 'on';
    
    %%% Downscaling of FontSizes for PC
    if ispc
        scale_factor = 1/1.2;
        fields = fieldnames(h); %%% loop through h structure
        for i = 1:numel(fields)
            if isprop(h.(fields{i}),'FontSize')
                h.(fields{i}).FontSize = (h.(fields{i}).FontSize)*scale_factor;
            end
%             if isprop(h.(fields{i}),'Style')
%                 if strcmp(h.(fields{i}).Style,'popupmenu')
%                     h.(fields{i}).BackgroundColor = Look.Fore;
%                     h.(fields{i}).ForegroundColor = Look.Back;
%                 end
%             end
        end
    end
    
    %% store handles structe
    guidata(h.PDA,h);
end

function Close_PDA(~,~)
global UserValues PDAstruct
clearvars -global PDAstruct PDAMeta
delete(findobj('Tag','PDAFit'));

function Load_PDA_Data(~,~)
global PDAstruct UserValues PDAMeta
h = guidata(findobj('Tag','PDAFit'));
[FileName,PathName] = uigetfile({'*.pda','*.pda file'},'Select *.pda file',...
    UserValues.File.BurstBrowserPath,'Multiselect','off');
if FileName == 0
    return;
end

%%% clear PDAstruct
PDAstruct = [];
PDAMeta = [];
Update_Settings;

load('-mat',fullfile(PathName,FileName));

%%% Check what was loaded
%%% Data from BurstBrowser has PDA structure, whereas previously fit data
%%% only has PDAstruct
if exist('PDA','var')
    PDAstruct.Data = PDA;
    PDAstruct.timebin = timebin;
    PDAstruct.FileName = FileName;
    PDAstruct.Path = PathName;
    if isfield(PDA,'Corrections');
        PDAstruct.Corrections = PDA.Corrections;
        PDAstruct.Corrections.DirectExcitation_GR = 0;
    end
    if isfield(PDA,'Background');
        PDAstruct.Corrections.BackgroundDonor = PDA.Background.Background_GGpar+PDA.Background.Background_GGperp;
        PDAstruct.Corrections.BackgroundAcceptor = PDA.Background.Background_GRpar+PDA.Background.Background_GRperp;
    end
end
%%% Fill in Corrections and Background
h.Crosstalk_Edit.String = num2str(PDAstruct.Corrections.CrossTalk_GR);
h.DirectEx_Edit.String = num2str(PDAstruct.Corrections.DirectExcitation_GR);
h.Gamma_Edit.String = num2str(PDAstruct.Corrections.Gamma_GR);
h.R0_Edit.String = num2str(PDAstruct.Corrections.FoersterRadius);
h.BGdonor_Edit.String = num2str(PDAstruct.Corrections.BackgroundDonor);
h.BGacc_Edit.String = num2str(PDAstruct.Corrections.BackgroundAcceptor);

%%% Fill in FitTable
if isfield(PDAstruct,'FitData')
    h.Fit_Table.Data = PDAstruct.FitData;
end
h.Progress_Text.String = FileName;
UpdateMainPlot([],[],1);
PDAMeta.PreparationDone = 0;

function Save_PDA_Project(~,~)
global PDAstruct
h = guidata(findobj('Tag','PDAFit'));
%%% Store Corrections
PDAstruct.Corrections.CrossTalk_GR = str2double(h.Crosstalk_Edit.String);
PDAstruct.Corrections.DirectExcitation_GR = str2double(h.DirectEx_Edit.String);
PDAstruct.Corrections.Gamma_GR = str2double(h.Gamma_Edit.String);
PDAstruct.Corrections.FoersterRadius = str2double(h.R0_Edit.String);
PDAstruct.Corrections.BackgroundDonor = str2double(h.BGdonor_Edit.String);
PDAstruct.Corrections.BackgroundAcceptor = str2double(h.BGacc_Edit.String);
%%% Store Fit Data
PDAstruct.FitData = h.Fit_Table.Data;
save(fullfile(PDAstruct.Path,PDAstruct.FileName),'PDAstruct');

function UpdateMainPlot(~,~,mode,reset)
global UserValues PDAstruct PDAMeta
h = guidata(findobj('Tag','PDAFit'));

if nargin < 4
    reset = 0;
end
%%% reset resets the PDAMeta.PreparationDone variable
if reset == 1
    PDAMeta.PreparationDone = 0;
end

switch mode
    case {1,2}
        %%% 1 File Loaded, Plot Raw Data and Remove Fit Plots
        %%% 2 Value for raw Hist changed (min/max) Update Plots
        
        %%% find valid bins (chosen by thresholds min/max)
        valid = ((PDAstruct.Data.NF+PDAstruct.Data.NG) > str2double(h.NumberOfPhotMin_Edit.String)) & ...
            ((PDAstruct.Data.NF+PDAstruct.Data.NG) < str2double(h.NumberOfPhotMax_Edit.String));
        
        %%% Calculate proximity ratio histogram
        PDAMeta.Prox = PDAstruct.Data.NF(valid)./(PDAstruct.Data.NG(valid)+PDAstruct.Data.NF(valid));
        PDAMeta.BSD = PDAstruct.Data.NF(valid)+PDAstruct.Data.NG(valid);
        
        PDAMeta.hProx = histcounts(PDAMeta.Prox, linspace(0,1,str2double(h.NumberOfBins_Edit.String)+1));
        PDAMeta.xProx = linspace(0,1,str2double(h.NumberOfBins_Edit.String)+1)+1/str2double(h.NumberOfBins_Edit.String)/2;
        PDAMeta.xProx = PDAMeta.xProx(1:end-1);
        PDAMeta.hBSD = histcounts(PDAMeta.BSD,1:(max(PDAMeta.BSD)+1));
        PDAMeta.xBSD = 1:max(PDAMeta.BSD);
        %%% Update Plots
        h.DataHist.XData = PDAMeta.xProx;
        h.DataHist.YData = PDAMeta.hProx;
        h.BSDPlot.XData = PDAMeta.xBSD;
        h.BSDPlot.YData = PDAMeta.hBSD;
        h.Residuals.XData = PDAMeta.xProx;
        h.Residuals.YData = zeros(numel(PDAMeta.xProx),1);
        h.FitHist.XData = PDAMeta.xProx;
        h.FitHist.YData = zeros(numel(PDAMeta.xProx),1);
        h.FitHist.Visible = 'off';
        for i = 1:5
            h.FitHistInd{i}.XData = PDAMeta.xProx;
            h.FitHistInd{i}.YData = zeros(numel(PDAMeta.xProx),1);
        end
        
        if mode == 1
            %%% Disable Result Plots
            h.GaussPlotAll.Visible = 'off';
            for i = 1:5
                h.GaussPlot{i}.Visible = 'off';
            end
        end
    case 2 %%% Fit Update
end

function Start_PDA_Fit(obj,~)
global PDAstruct PDAMeta
h = guidata(findobj('Tag','PDAFit'));
%%% disable StartFit Button
h.StartFit_Button.Enable = 'off';
h.ViewCurve_Button.Enable = 'off';
%% Prepare Fit Inputs
if (PDAMeta.PreparationDone == 0) || ~isfield(PDAMeta,'epsEgrid')
    %%% find valid bins (chosen by thresholds min/max)
    valid = ((PDAstruct.Data.NF+PDAstruct.Data.NG) > str2double(h.NumberOfPhotMin_Edit.String)) & ...
        ((PDAstruct.Data.NF+PDAstruct.Data.NG) < str2double(h.NumberOfPhotMax_Edit.String));
    
    maxN = max((PDAstruct.Data.NF(valid)+PDAstruct.Data.NG(valid)));
    
    %%% evaluate the background probabilities
    BGgg = poisspdf(0:1:maxN,str2double(h.BGdonor_Edit.String)*PDAstruct.timebin*1E3);
    BGgr = poisspdf(0:1:maxN,str2double(h.BGacc_Edit.String)*PDAstruct.timebin*1E3);
    
    method = 'cdf';
    switch method
        case 'pdf'
            %determine boundaries for background inclusion
            BGgg(BGgg<1E-2) = [];
            BGgr(BGgr<1E-2) = [];
        case 'cdf'
            %%% evaluate the background probabilities
            CDF_BGgg = poisscdf(0:1:maxN,str2double(h.BGdonor_Edit.String)*PDAstruct.timebin*1E3);
            CDF_BGgr = poisscdf(0:1:maxN,str2double(h.BGacc_Edit.String)*PDAstruct.timebin*1E3);
            %determine boundaries for background inclusion
            threshold = 0.95;
            BGgg((find(CDF_BGgg>threshold,1,'first')+1):end) = [];
            BGgr((find(CDF_BGgr>threshold,1,'first')+1):end) = [];
    end
    PDAMeta.PBG = BGgg./sum(BGgg);
    PDAMeta.PBR = BGgr./sum(BGgr);
    PDAMeta.NBG = numel(BGgg)-1;
    PDAMeta.NBR = numel(BGgr)-1;
    
    if strcmp(PDAMeta.PDAMethod,'Histogram Library')
        %%% prepare epsilon grid
        Progress(0,h.Progress_Axes,h.Progress_Text,'Preparing Epsilon Grid...');
        
        E_grid = linspace(0,1,str2double(h.NumberOfBinsE_Edit.String)+1);
        R_grid = linspace(0,5*str2double(h.R0_Edit.String),100000)';
        epsEgrid = 1-(1+str2double(h.Crosstalk_Edit.String)+str2double(h.Gamma_Edit.String)*((E_grid+str2double(h.DirectEx_Edit.String)/(1-str2double(h.DirectEx_Edit.String)))./(1-E_grid))).^(-1);
        epsRgrid = 1-(1+str2double(h.Crosstalk_Edit.String)+str2double(h.Gamma_Edit.String)*(((str2double(h.DirectEx_Edit.String)/(1-str2double(h.DirectEx_Edit.String)))+(1./(1+(R_grid./str2double(h.R0_Edit.String)).^6)))./(1-(1./(1+(R_grid./str2double(h.R0_Edit.String)).^6))))).^(-1);
        PN = histcounts((PDAstruct.Data.NF(valid)+PDAstruct.Data.NG(valid)),1:(maxN+1));
        
        [NF, N, eps] = meshgrid(0:maxN,1:maxN,epsEgrid);
        Progress(0,h.Progress_Axes,h.Progress_Text,'Preparing Probability Library...');
        PNF = binopdf(NF, N, eps);
        
        PDAMeta.E_grid = E_grid;
        PDAMeta.R_grid = R_grid;
        PDAMeta.epsEgrid = epsEgrid;
        PDAMeta.epsRgrid = epsRgrid;
        PDAMeta.PN = PN;
        PDAMeta.PNF = PNF;
        PDAMeta.Grid.NF = NF;
        PDAMeta.Grid.N = N;
        PDAMeta.Grid.eps = eps;
        PDAMeta.maxN = maxN;
        PDAMeta.P = CalcHistLib(PN,PNF,NF,N,PDAMeta.PBG,PDAMeta.PBR,PDAMeta.NBG,PDAMeta.NBR);
    end
    PDAMeta.PreparationDone = 1;
end

%% Read out fit parameters
FitData = cellfun(@double,h.Fit_Table.Data);
Active = FitData(:,1);
fitpar = [];
fixed = [];
for i = 1:5
    if Active(i)
        fitpar = [fitpar;FitData(i,2:2:end-1)];
        fixed = [fixed; FitData(i,3:2:end)];
    end
end

LB = zeros(size(fitpar,1),size(fitpar,2));
UB = inf(size(fitpar,1),size(fitpar,2));
LB(logical(fixed)) = fitpar(logical(fixed));
UB(logical(fixed)) = fitpar(logical(fixed));

PDAMeta.Active = Active;

%%% Fixed for Patternsearch and fmincon
if sum(fixed) == 0 %nothing is fixed
    A = [];
    b = [];
elseif sum(fixed(:)) > 0
    A = zeros(numel(fixed)); %NxN matrix with zeros
    b = zeros(numel(fixed),1);
    for i = 1:numel(fixed)
        if fixed(i) == 1 %set diagonal to 1 and b to value --> 1*x = b
            A(i,i) = 1;
            b(i) = fitpar(i);
        end
    end
end

%%% Make Fit Plot Visible
h.FitHist.Visible = 'on';
for i = 1:5
    if Active(i)
        h.FitHistInd{i}.Visible = 'on';
    else
        h.FitHistInd{i}.Visible = 'off';
    end
end

%% Check if View_Curve was pressed
if obj == h.ViewCurve_Button
    %%% Only Update Plot and break
    switch PDAMeta.PDAMethod
        case {'MLE','MonteCarlo'}
            %%% For Updating the Result Plot, use MC sampling
            h.Progress_Text.String = 'Simulating Histogram...';drawnow;
            [chi2] = PDAMonteCarloFit(fitpar);
            h.Progress_Text.String = 'Done';
        case 'Histogram Library'
            [chi2] = PDAHistogramFit(fitpar);
    end
     %%% Update Plots
    h.FitHist.YData = PDAMeta.hFit;
    h.Residuals.YData = PDAMeta.w_res;
    h.Chi2_Text.String = ['\chi^2_{red.} = ' sprintf('%1.2f',chi2)];
    count = 1;
    for i = 1:5
        if PDAMeta.Active(i)
            h.FitHistInd{i}.YData = PDAMeta.hFit_Ind{count};
            count = count +1;
        end
    end
    h.StartFit_Button.Enable = 'on';
    h.ViewCurve_Button.Enable = 'on';
    return;
end
%% Do Fit
switch PDAMeta.PDAMethod
    case 'Histogram Library'
        fitfun = @(x) PDAHistogramFit(x);
    case 'MLE'
        fitfun = @(x) PDA_MLE_Fit(x);
    case 'MonteCarlo'
        fitfun = @(x) PDAMonteCarloFit(x);
end

switch PDAMeta.FitMethod
    case 'Simplex'
        fitopts = optimset('MaxFunEvals', 1E4,'Display','iter','TolFun',1E-6,'TolX',1E-3,'PlotFcns',@optimplotfvalPDA);
        fitpar = fminsearchbnd(fitfun, fitpar, LB, UB, fitopts);
    case 'Gradient-Based'
        fitopts = optimoptions('fmincon','MaxFunEvals',1E4,'Display','iter','PlotFcns',@optimplotfvalPDA);
        fitpar = fmincon(fitfun, fitpar,[],[],A,b,LB,UB,[],fitopts);
    case 'Patternsearch'
        opts = psoptimset('Cache','on','Display','iter','PlotFcns',@psplotbestf);%,'UseParallel','always');
        fitpar = patternsearch(fitfun, fitpar, [],[],A,b,LB,UB,[],opts);
end

if strcmp(PDAMeta.PDAMethod,'MLE')
    %%% For Updating the Result Plot, use MC sampling
    [chi2] = PDAMonteCarloFit(fitpar);
    %%% Update Plots
    h.FitHist.YData = PDAMeta.hFit;
    h.Residuals.YData = PDAMeta.w_res;
    h.Chi2_Text.String = ['\chi^2_{red.} = ' sprintf('%1.2f',chi2)];
    count = 1;
    for i = 1:5
        if PDAMeta.Active(i)
            h.FitHistInd{i}.YData = PDAMeta.hFit_Ind{count};
            count = count +1;
        end
    end
end

%% Update GUI after performed fit
%%% Convert amplitudes to fractions
fitpar(:,1) = fitpar(:,1)./sum(fitpar(:,1));
%%% Update the fit table
count = 1;
for i = 1:5
    if Active(i)
        FitData(i,2:2:end) = fitpar(count,:);
        count = count+1;
    end
end

FitData = num2cell(FitData);
for i = 1:5
    for j = 1:2:7
        FitData{i,j} = logical(FitData{i,j});
    end
end
h.Fit_Table.Data = FitData;

%%% Calculate Gaussian Distance Distributions
xGauss = h.GaussPlotAll.XData;
count = 1;
for i = 1:5
    if Active(i)
        Gauss{count} = fitpar(i,1).*normpdf(xGauss,fitpar(i,2),fitpar(i,3));
        count = count+1;
    end
end
h.GaussPlotAll.Visible = 'on';
h.GaussPlotAll.YData = sum(vertcat(Gauss{:}),1);
for i = 1:5
    if Active(i)
        h.GaussPlot{i}.Visible = 'on';
        h.GaussPlot{i}.YData = Gauss{i};
    else
        h.GaussPlot{i}.Visible = 'off';
    end
end

%%% Set Axis limits
xlim(h.GaussAxes,[min(fitpar(:,2)-3*fitpar(:,3)), max(fitpar(:,2)+3*fitpar(:,3))]);

%%% reenable StartFit Button
h.StartFit_Button.Enable = 'on';
h.ViewCurve_Button.Enable = 'on';

function [P] = CalcHistLib(PN,PFr,k,N,PBG,PBR,NBG,NBR)
global PDAMeta
h = guidata(findobj('Tag','PDAFit'));
Progress(0,h.Progress_Axes,h.Progress_Text,'Calculating Histogram Library...');
P = cell(numel(PDAMeta.E_grid),1);
PN_dummy = PN';
%case 1, no background in either channel
if NBG == 0 && NBR == 0
    PN_trans = repmat(PN_dummy,1,PDAMeta.maxN+1);
    for i = 1:numel(PDAMeta.E_grid)
        P_temp = PFr(:,:,i).*PN_trans;
        E_temp = k(:,:,i)./N(:,:,i);
        E_dummy = E_temp(:);
        P_dummy = P_temp(:);
        invalid = E_dummy>1;
        E_dummy(invalid) = []; %unneccesary since P(E>1) = 0 anyway, however needed for histc to work
        P_dummy(invalid) = [];
        [~,~,bin] = histcounts(E_dummy,linspace(0,1,str2double(h.NumberOfBins_Edit.String)+1));
        P{i} = accumarray(bin,P_dummy);
        Progress(i/numel(PDAMeta.E_grid),h.Progress_Axes,h.Progress_Text,'Calculating Histogram Library...');
    end
else
    for i = 1:numel(PDAMeta.E_grid)
        E_array = cell((NBG+1)*(NBG+1),1);
        P_array = cell((NBR+1)*(NBR+1),1);
        count = 1;
        for g = 0:NBG
            for r = 0:NBR
                PN_trans = repmat(PN_dummy(1+g+r:end),1,PDAMeta.maxN+1);%the total number of fluorescence photons is reduced
                P_temp = PBG(g+1)*PBR(r+1)*PFr(1:end-g-r,:,i).*PN_trans; %+1 since also zero is included
                E_temp = (k(1:end-g-r,:,i)+r)./(N(1:end-g-r,:,i)+g+r);
                E_dummy = E_temp(:);
                P_dummy = P_temp(:);
                invalid = E_dummy>1;
                E_dummy(invalid) = []; %unneccesary since P(E>1) = 0 anyway, however needed for histc to work
                P_dummy(invalid) = [];
                E_array{count} = E_dummy;
                P_array{count} = P_dummy;
                count = count+1;
            end
        end
        E_array = vertcat(E_array{:});
        P_array = vertcat(P_array{:});
        [~,~,bin] = histcounts(E_array,linspace(0,1,str2double(h.NumberOfBins_Edit.String)+1));
        P{i} = accumarray(bin,P_array);
        Progress(i/numel(PDAMeta.E_grid),h.Progress_Axes,h.Progress_Text,'Calculating Histogram Library...');
    end
end

function logL = PDA_MLE_Fit(fitpar)
global PDAMeta PDAstruct
h = guidata(findobj('Tag','PDAFit'));

%%% fitpar vector is linearized by fminsearch, restructure
fitpar = reshape(fitpar,[numel(fitpar)/3, 3]);
N_gauss = size(fitpar,1);

steps = 5;
L = cell(N_gauss,1); %%% Likelihood per Gauss
for i = 1:N_gauss
    %%% define Gaussian distribution of distances
    xR = (fitpar(i,2)-3*fitpar(i,3)):(6*fitpar(i,3)/steps):(fitpar(i,2)+3*fitpar(i,3));
    PR = normpdf(xR,fitpar(i,2),fitpar(i,3));
    PR = PR'./sum(PR);
    %%% Calculate E values for R grid
    E = 1./(1+(xR./str2double(h.R0_Edit.String)).^6);
    epsGR = 1-(1+str2double(h.Crosstalk_Edit.String)+(((str2double(h.DirectEx_Edit.String)/(1-str2double(h.DirectEx_Edit.String))) + E) * str2double(h.Gamma_Edit.String))./(1-E)).^(-1);
    
    %%% Calculate the vector of likelihood values
    P = eval_prob_2c_bg(PDAstruct.Data.NG,PDAstruct.Data.NF,...
        PDAMeta.NBG,PDAMeta.NBR,...
        PDAMeta.PBG',PDAMeta.PBR',...
        epsGR');
    P = log(P) + repmat(log(PR'),numel(PDAstruct.Data.NG),1);
    Lmax = max(P,[],2);
    P = Lmax + log(sum(exp(P-repmat(Lmax,1,numel(PR))),2));
    %P_res = sum(P);
    %%% Treat case when all burst produced zero probability
    %P_res = P;
    P(isnan(P)) = -Inf;
    L{i} = P;
end

%%% normalize amplitudes
fitpar(:,1) = fitpar(:,1)./sum(fitpar(:,1));
PA = fitpar(:,1);

L = horzcat(L{:});
L = L + repmat(log(PA'),numel(PDAstruct.Data.NG),1);
Lmax = max(L,[],2);
L = Lmax + log(sum(exp(L-repmat(Lmax,1,numel(PA))),2));
%%% P_res has NaN values if Lmax was -Inf (i.e. total of zero probability)!
%%% Reset these values to -Inf
L(isnan(L)) = -Inf;
logL = sum(L);
%%% since the algorithm minimizes, it is important to minimize the negative
%%% log likelihood, i.e. maximize the likelihood
logL = -logL;

function chi2 = PDAHistogramFit(fitpar)
global PDAMeta
h = guidata(findobj('Tag','PDAFit'));

%%% fitpar vector is linearized by fminsearch, restructure
fitpar = reshape(fitpar,[numel(fitpar)/3, 3]);
N_gauss = size(fitpar,1);
%%% normalize Amplitudes
fitpar(:,1) = fitpar(:,1)./sum(fitpar(:,1));

%P_of_eps_total = zeros(1,numel(PDAMeta.epsEgrid));
%%% create individual histograms
P_Ind = cell(N_gauss,1);
for i = 1:N_gauss
    P_eps = fitpar(i,1).*Generate_P_of_eps(fitpar(i,2),fitpar(i,3));
    P_Ind{i} = zeros(str2double(h.NumberOfBins_Edit.String),1);
    for j = 1:numel(PDAMeta.P)
        P_Ind{i} = P_Ind{i} + P_eps(j).*PDAMeta.P{j};
    end
    %P_of_eps_total = P_of_eps_total + fitpar(i,1).*Generate_P_of_eps(fitpar(i,2),fitpar(i,3));
end

% for i = 1:numel(PDAMeta.P)
%     Pfinal = Pfinal + P_of_eps_total(i).*PDAMeta.P{i};
% end

PDAMeta.hFit = sum(horzcat(P_Ind{:}),2)';
PDAMeta.hFit_Ind = P_Ind;
%%% Calculate Chi2
error = sqrt(PDAMeta.hProx);
error(error == 0) = 1;
PDAMeta.w_res = (PDAMeta.hProx-PDAMeta.hFit)./error;
chi2 = sum((PDAMeta.w_res.^2))/(str2double(h.NumberOfBins_Edit.String)-numel(fitpar)-1);

function chi2 = PDAMonteCarloFit(fitpar)
global PDAMeta PDAstruct
h = guidata(findobj('Tag','PDAFit'));

%%% fitpar vector is linearized by fminsearch, restructure
fitpar = reshape(fitpar,[numel(fitpar)/3, 3]);
N_gauss = size(fitpar,1);
%%% normalize Amplitudes
fitpar(:,1) = fitpar(:,1)./sum(fitpar(:,1));
A = fitpar(:,1);
%read corrections
mBG_gg = str2double(h.BGdonor_Edit.String);
mBG_gr = str2double(h.BGacc_Edit.String);
cr = str2double(h.Crosstalk_Edit.String);
de = str2double(h.DirectEx_Edit.String);
gamma = str2double(h.Gamma_Edit.String);
R0 = str2double(h.R0_Edit.String);
sampling =str2double(h.OverSampling_Edit.String);
BSD = PDAMeta.BSD;
dur = PDAstruct.timebin.*1E3;
H_meas = PDAMeta.hProx';
%pool = gcp;
%sampling = pool.NumWorkers;
PRH = cell(sampling,N_gauss);
for j = 1:N_gauss
    for i = 1:sampling
        r = normrnd(fitpar(j,2),fitpar(j,3),numel(BSD),1);
        E = 1./(1+(r./R0).^6);
        eps = 1-(1+cr+(((de/(1-de)) + E) * gamma)./(1-E)).^(-1);
        BG_gg = poissrnd(mBG_gg.*dur);
        BG_gr = poissrnd(mBG_gr.*dur);
        BSD_bg = BSD-BG_gg-BG_gr;
        PRH{i,j} = (binornd(BSD_bg,eps)+BG_gr)./BSD;
    end
end
H_res_dummy = zeros(numel(PDAMeta.hProx),N_gauss);
for i = 1:N_gauss
    %H_res_dummy(:,i) = histc(vertcat(PRH{:,i}),0:0.02:1)/sampling;
    H_res_dummy(:,i) = histcounts(vertcat(PRH{:,i}),linspace(0,1,str2double(h.NumberOfBins_Edit.String)+1));
end
%H_res_dummy = H_res_dummy(1:50,:);
H_res = zeros(numel(PDAMeta.hProx),1);
for i = 1:N_gauss
    H_res = H_res + A(i).*H_res_dummy(:,i);
end
H_res = sum(H_meas)*H_res./sum(H_res);
%H_res= H_res(1:50)/sampling;
%calculate chi2
error = sqrt(H_meas);
error(error == 0) = 1;
dev = (H_meas-H_res)./error;
chi2 = sum((dev.^2))/(str2double(h.NumberOfBins_Edit.String)-numel(fitpar)-1);

PDAMeta.hFit = H_res;
PDAMeta.w_res = dev;
hFit_Ind = cell(N_gauss,1);
for i = 1:N_gauss
    hFit_Ind{i} = sum(H_meas).*A(i).*H_res_dummy(:,i)./sum(H_res_dummy(:,1));
end
PDAMeta.hFit_Ind = hFit_Ind;

function [Pe] = Generate_P_of_eps(RDA,sigma)
h = guidata(findobj('Tag','PDAFit'));
global PDAMeta
gamma = str2double(h.Gamma_Edit.String);
eps = PDAMeta.epsEgrid;
crosstalk = str2double(h.Crosstalk_Edit.String);
R0 = str2double(h.R0_Edit.String);
de = str2double(h.DirectEx_Edit.String);

if de == 0
    % generate gaussian distributions of PDA.epsilon weights
    Pe = R0/(6*sqrt(2*pi)*sigma)*...
        (gamma)^(1/6)*...
        1./(1-eps).^2 .* ...
        (1./(1-eps) - (1+crosstalk)).^(-7/6) .* ...
        exp(...
        -1/(2*sigma^2)*...
        (R0.*...
        (gamma)^(1/6).*...
        (1./(1-eps)-(1+crosstalk)).^(-1/6)- ...
        RDA).^2);
    
elseif de ~= 0
    
    
    dRdeps = -((R0^6*gamma)./(crosstalk - eps - crosstalk*de - crosstalk*eps + de*eps + de*gamma + crosstalk*de*eps - de*eps*gamma) - ((R0^6*gamma - R0^6*eps*gamma)*(crosstalk - de - crosstalk*de + de*gamma + 1))./(crosstalk - eps - crosstalk*de - crosstalk*eps + de*eps + de*gamma + crosstalk*de*eps - de*eps*gamma).^2)./(6*(-(R0^6*gamma - R0^6*eps*gamma)./(crosstalk - eps - crosstalk*de - crosstalk*eps + de*eps + de*gamma + crosstalk*de*eps - de*eps*gamma)).^(5/6));
    P_Rofeps = (1/(sqrt(2*pi)*sigma)).*...
        exp(-(RDA - (-(R0^6*gamma - R0^6*eps*gamma)./(crosstalk - eps - crosstalk*de - crosstalk*eps + de*eps + de*gamma + crosstalk*de*eps - de*eps*gamma)).^(1/6)).^2./(2*sigma^2));
    Pe = dRdeps.*P_Rofeps;
    %         Pe = (PDA.R0/(6*sqrt(2*pi)*sigma)).*...
    %             ( (1 - PDA.de/(1-PDA.de)) ./ ((1/PDA.gamma)*((1./(1-PDA.epsilon))-1-PDA.crosstalk)+PDA.de/(1-PDA.de))).^(-5/6).*...
    %             (1-PDA.de/(1-PDA.de)).*...
    %             ((1/PDA.gamma)*((1./(1-PDA.epsilon))-1-PDA.crosstalk)+PDA.de/(1-PDA.de)).^(-2).*...
    %             (1/PDA.gamma).*(1-PDA.epsilon).^(-2).*...
    %             exp(...
    %             -1/(2*sigma^2).*...
    %             (PDA.R0.*...
    %             ((1-PDA.de/(1-PDA.de))./((1/PDA.gamma)*((1./(1-PDA.epsilon))-1-PDA.crosstalk)+(PDA.de/(1-PDA.de)))).^(1/6)-...
    %             RDA).^2);
end
Pe(~isfinite(Pe)) = 0;
Pe = Pe./sum(Pe);

function Update_Settings(~,~)
global PDAMeta
h = guidata(findobj('Tag','PDAFit'));

% Update PDAMeta Structure
PDAMeta.FitMethod = h.FitMethod_Popupmenu.String{h.FitMethod_Popupmenu.Value};
PDAMeta.PDAMethod = h.PDAMethod_Popupmenu.String{h.PDAMethod_Popupmenu.Value};