function RICS_Sim_like_gui(~,~)

clc

addpath('C:\Users\longfils\Google Drive\Hasselt\PAM\PAM')
addpath('C:\Users\longfils\Google Drive\Hasselt\PAM\PAM\functions\GUI')
addpath('C:\Users\longfils\Google Drive\Hasselt\PAM\PAM\functions')

addpath('C:\Users\Marco\Google Drive\Hasselt\PAM\PAM')
addpath('C:\Users\Marco\Google Drive\Hasselt\PAM\PAM\functions\GUI')
addpath('C:\Users\Marco\Google Drive\Hasselt\PAM\PAM\functions')

global UserValues PathToApp
h.Sim=findobj('Tag','Sim');

if ~isempty(h.Sim) % Creates new figure, if none exists
    return
end

addpath(genpath(['.' filesep 'functions']));

if isempty(PathToApp)
    GetAppFolder();
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Figure generation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Loads user profile
LSUserValues(0);
%%% To save typing
Look=UserValues.Look;
%%% Generates the Sim figure

h.Sim = figure(...
    'Units','Normalized',...
    'Tag','Sim',...
    'Name','Raster Image Correlation Spectroscopy Performance Evaluation (RICSPE)',...
    'NumberTitle','off',...
    'Menu','none',...
    'defaultUicontrolFontName',Look.Font,...
    'defaultAxesFontName',Look.Font,...
    'defaultTextFontName',Look.Font,...
    'UserData',[],...
    'OuterPosition',[0.01 0.1 0.98 0.9],...
    'CloseRequestFcn',@CloseWindow,...
    'Visible','on');

%%% Sets background of axes and other things
whitebg(Look.Axes);
%%% Changes Pam background; must be called after whitebg
h.Sim.Color=Look.Back;

%%% Main Sim Panel
h.Sim_Panel = uibuttongroup(...
    'Parent',h.Sim,...
    'Units','normalized',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'HighlightColor', Look.Control,...
    'ShadowColor', Look.Shadow,...
    'Position',[0 0 1 1]);

%% Progressbar and file name %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Panel for progressbar
h.Progress_Panel = uibuttongroup(...
    'Parent',h.Sim,...
    'Tag','Progress_Panel',...
    'Units','normalized',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'HighlightColor', Look.Control,...
    'ShadowColor', Look.Shadow,...
    'Position',[0.004 0.955 0.992 0.035]);
%%% Axes for progressbar
h.Progress_Axes = axes(...
    'Parent',h.Progress_Panel,...
    'Tag','Progress_Axes',...
    'Units','normalized',...
    'Color',Look.Control,...
    'Position',[0 0 1 1]);
h.Progress_Axes.XTick=[]; h.Progress_Axes.YTick=[];
%%% Progress and filename text
h.Progress_Text=text(...
    'Parent',h.Progress_Axes,...
    'Tag','Progress_Text',...
    'Units','normalized',...
    'FontSize',12,...
    'FontWeight','bold',...
    'String','',...
    'Interpreter','none',...
    'HorizontalAlignment','center',...
    'BackgroundColor','none',...
    'Color',Look.Fore,...
    'Position',[0.5 0.5]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Menu
h.menu = uimenu(...
    'Parent',h.Sim,...
    'Text','File');

h.Save = uimenu(...
    'Parent',h.menu,...
    'Text','Save',...
    'MenuSelectedFcn',@Save_Callback);

h.Load = uimenu(...
    'Parent',h.menu,...
    'Text','Load',...
    'MenuSelectedFcn',@Load_Callback);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% General parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% General Sim Settings Panel
h.Sim_General_Panel = uibuttongroup(...
    'Parent',h.Sim,...
    'Units','normalized',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'HighlightColor', Look.Control,...
    'ShadowColor', Look.Shadow,...
    'Title', 'General Settings',...
    'Position', [0.002 0.75 0.496 0.2]);
if ismac
    h.Sim_Scan.ForegroundColor = [0 0 0];
    h.Sim_Scan.BackgroundColor = [1 1 1];
end
%%% Text
h.Text_ST = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Sim Time [s]:',...
    'fontunits', 'normalized',...
    'Position',[0.01 0.8 0.25 0.1]);
%%% Simulation Time
h.SimTime = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'Style','edit',...
    'FontSize',12,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','10',...
    'fontunits', 'normalized',...
    'Callback',@SimTime_Callback,...
    'Position',[0.26 0.8 0.09 0.1]);
%%% Text
h.Text_F = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Frames:',...
    'fontunits', 'normalized',...
    'Position',[0.36 0.8 0.09 0.1]);
%%% Number of Frames
h.NImages = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'Style','edit',...
    'FontSize',12,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','10',...
    'fontunits', 'normalized',...
    'Callback',@NImages_Callback,...
    'Position',[0.56 0.8 0.09 0.1]);
%%% Text
h.Text_P{1} = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Pixels in X:',...
    'fontunits', 'normalized',...
    'Position',[0.01 0.68 0.25 0.1]);
%%% Number of pixels in x
h.NX = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'Style','edit',...
    'FontSize',12,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','100',...
    'fontunits', 'normalized',...
    'Callback',@NX_Callback,...
    'Position',[0.26 0.68 0.09 0.1]);
%%% Text
h.Text_S{1}= uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Pixel size [nm]:',...
    'fontunits', 'normalized',...
    'Position',[0.36 0.68 0.19 0.1]);
%%% Pixel size in x
h.PixelSize = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'Style','edit',...
    'FontSize',12,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','50',...
    'fontunits', 'normalized',...
    'Callback',@PixelSize_Callback,...
    'Position',[0.56 0.68 0.09 0.1]);

%%% Text
h.Text_P{2} = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Lines in Y:',...
    'fontunits', 'normalized',...
    'Position',[0.01 0.56 0.25 0.1]);
%%% Number of lines in y
h.NY = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'Style','edit',...
    'FontSize',12,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','100',...
    'fontunits', 'normalized',...
    'Callback',@NY_Callback,...
    'Position',[0.26 0.56 0.09 0.1]);

h.table = uitable(...
    'Parent', h.Sim_General_Panel,...
    'Data', [5 , 1],...
    'Units','normalized',...
    'FontSize',10,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'CellEditCallback',@editTable_Callback,...
    'Position',[0.01 0.04 0.32 0.45]);
h.table.ColumnName = {'Pixel time (\mus)','Line time (ms)'};
h.table.RowName = {};
h.table.ColumnEditable = true;

h.AddRow = uicontrol(...
    'Parent', h.Sim_General_Panel,...
    'Style', 'pushbutton',...
    'Units','normalized',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'fontunits', 'normalized',...
    'String', 'Add row',...
    'Position', [0.36 0.33 0.15 0.15],...
    'Callback', @AddRow_Callback);


%%% Text
h.Text_T{3} = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Number of repetitions:',...
    'fontunits', 'normalized',...
    'Position',[0.66 0.8 0.25 0.1]);
%%% Number of repetitions
h.NRep = uicontrol(...
    'Parent',h.Sim_General_Panel,...
    'Units','normalized',...
    'Style','edit',...
    'FontSize',12,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','100',...
    'fontunits', 'normalized',...
    'Callback',@NRep_Callback,...
    'Position',[0.86 0.8 0.09 0.1]);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Species parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% General Sim Settings Panel
h.Sim_Species_Panel = uibuttongroup(...
    'Parent',h.Sim_Panel,...
    'Units','normalized',...
    'Title','Species Settings',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'HighlightColor', Look.Control,...
    'ShadowColor', Look.Shadow,...
    'Position',[0.002 0.55 0.496 0.2]);


%%% Text
h.Text_Brightness = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String',{'Brightness [kHz]'},...
    'fontunits', 'normalized',...
    'HorizontalAlignment','left',...
    'Position',[0.01 0.8 0.18 0.09]);

%%% Brightness
h.Brightness = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','edit',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','1000',...
    'fontunits', 'normalized',...
    'Callback',@Brightness_Callback,...
    'Position',[0.26 0.8 0.09 0.1]);
%%% Text
h.Text_Focus_Size = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Lateral Focus Size [nm]',...
    'fontunits', 'normalized',...
    'HorizontalAlignment','left',...
    'Position',[0.01 0.56 0.18 0.09]);
%%% Focus size lateral
h.wr = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','edit',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','200',...
    'fontunits', 'normalized',...
    'Callback',@LateralFocus_Callback,...
    'Position',[0.26 0.56 0.09 0.1]);

h.Text_Focus_Size = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Axial Focus Size [nm]',...
    'fontunits', 'normalized',...
    'HorizontalAlignment','left',...
    'Position',[0.01 0.44 0.18 0.09]);
%%% Focus size axial
h.wz = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','edit',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','1000',...
    'fontunits', 'normalized',...
    'Callback',@AxialFocus_Callback,...
    'Position',[0.26 0.44 0.09 0.1]);

h.Text_Diff = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','D [?m?/s]:',...
    'fontunits', 'normalized',...
    'Position',[0.01 0.68 0.12 0.08]);
h.D = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','edit',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','1',...
    'fontunits', 'normalized',...
    'Callback',@D_Callback,...
    'Position',[0.26 0.68 0.09 0.1]);
h.Text_Sim_Concentration = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String','Concentration [nM]:',...
    'fontunits', 'normalized',...
    'Position',[0.01 0.32 0.22 0.09]);
h.Concentration = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','edit',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','10',...
    'fontunits', 'normalized',...
    'Callback',@Concentration_Callback,...
    'Position',[0.26 0.32 0.09 0.1]);

h.Text_AverageN = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',6,...
    'Style','text',...
    'Max',2,...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'String',sprintf('Mean # of particles \n in the obs. volume:'),...
    'fontunits', 'normalized',...
    'Position',[0.01 0.1 0.22 0.18]);

% h.Text_AverageN = uicontrol(...
%     'Parent',h.Sim_Species_Panel,...
%     'Units','normalized',...
%     'FontSize',12,...
%     'Style','text',...
%     'HorizontalAlignment','left',...
%     'BackgroundColor', Look.Back,...
%     'ForegroundColor', Look.Fore,...
%     'String',sprintf('Mean # of particles \n in the obs. volume:'),...
%     'Position',[0.01 0.1 0.22 0.18]);

h.AverageN = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','edit',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','10',...
    'fontunits', 'normalized',...
    'Callback',@AverageN_Callback,...
    'Position',[0.26 0.15 0.09 0.1]);



h.Txt_NParticles = annotation(h.Sim_Species_Panel,'textbox',...
    'String','Number of particles in the 245 \mum^3 box:',...
    'Color','White',...
    'FontSize',10,...
    'LineStyle','none',...
    'FontName',Look.Font,...
    'Units','normalized',...
    'fontunits', 'normalized',...
    'Position',[0.48 0.12 0.22 0.18]);

h.NParticles = uicontrol(...
    'Parent',h.Sim_Species_Panel,...
    'Units','normalized',...
    'FontSize',12,...
    'Style','edit',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String','10',...
    'fontunits', 'normalized',...
    'Callback',@NParticles_Callback,...
    'Position',[0.83 0.15 0.09 0.1]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Run Analysis and simulations

h.StartAnalysis  = uicontrol(...
    'Parent', h.Sim,...
    'Style', 'pushbutton',...
    'Units','normalized',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'String', 'Start',...
    'Position', [0.5 0.8925 0.1 0.05],...
    'Callback', @StartAnalysis_Callback);

h.Sim_Result_Panel = uibuttongroup(...
    'Parent',h.Sim,...
    'Units','normalized',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'HighlightColor', Look.Control,...
    'ShadowColor', Look.Shadow,...
    'Title', 'Results',...
    'Position', [0.5 0.15 0.496 0.6]);

h.ax1 = axes('Parent',h.Sim_Result_Panel,...
    'Units','normalized',...
    'Position',[0.04 0.45 0.45 0.49],...
    'Fontsize',8,...
    'XColor','white',...
    'YColor','white');

h.ax2 = axes('Parent',h.Sim_Result_Panel,...
    'Units','normalized',...
    'Position',[0.54 0.45 0.45 0.49],...
    'Fontsize',8,...
    'XColor','white',...
    'YColor','white');

h.Sim_ACF_Panel = uibuttongroup(...
    'Parent',h.Sim,...
    'Units','normalized',...
    'BackgroundColor', Look.Back,...
    'ForegroundColor', Look.Fore,...
    'HighlightColor', Look.Control,...
    'ShadowColor', Look.Shadow,...
    'Title', 'Autocorrelation function',...
    'Position', [0.002 0.05 0.496 0.5]);

h.ax3 = axes('Parent',h.Sim_ACF_Panel,...
    'Units','normalized',...
    'Position',[0.04 0.25 0.45 0.7],...
    'Fontsize',8,...
    'XColor','white',...
    'YColor','white');

h.ax4 = axes('Parent',h.Sim_ACF_Panel,...
    'Units','normalized',...
    'Position',[0.54 0.25 0.45 0.7],...
    'Fontsize',8,...
    'XColor','white',...
    'YColor','white');

h.ScanSpeed_listbox = uitable(...
    'Parent', h.Sim_Result_Panel,...
    'Data', {5 , 1, true},...
    'Units','normalized',...
    'FontSize',10,...
    'BackgroundColor', Look.Control,...
    'ForegroundColor', Look.Fore,...
    'CellEditCallback',@ScanSpeed_listbox_Callback,...
    'Position',[0.13 0.1 0.4 0.25]);
h.ScanSpeed_listbox.ColumnName = {'Pixel time (\mus)','Line time (ms)','Display'};
h.ScanSpeed_listbox.RowName = {};
h.ScanSpeed_listbox.ColumnEditable = [false false true];
h.ScanSpeed_listbox.ColumnFormat = {'numeric','numeric','logical'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%
%% For Debug purpose

% h.Debug  = uicontrol(...
%         'Parent', h.Sim_Species_Panel,...
%         'Style', 'pushbutton',...
%         'Units','normalized',...
%         'FontSize',14,...
%         'HorizontalAlignment','left',...
%         'BackgroundColor', Look.Control,...
%         'ForegroundColor', Look.Fore,...
%         'String', 'Debug',...
%         'Position', [0.6 0.5 0.15 0.15],...
%         'Callback', @Debug_Callback);
%
% h.Result = uicontrol(...
%     'Parent',h.Sim_Species_Panel,...
%     'Units','normalized',...
%     'FontSize',12,...
%     'Style','text',...
%     'HorizontalAlignment','left',...
%     'BackgroundColor', Look.Back,...
%     'ForegroundColor', Look.Fore,...
%     'String','0',...
%     'Position',[0.6 0.1 0.15 0.15]);
%
% function Debug_Callback(hObject, eventdata, handles)
% handles = guidata(hObject);
% handles.Result.String = handles.table.Data(2,2);
% guidata(hObject,handles);

%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

guidata(h.Sim, h);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Callbacks


function PixelSize_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.PixelSize.String = get(hObject,'string');
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^2 region:'];
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^3 box:'];
end

handles.AverageN.String = str2double(handles.NParticles.String) * omega / V;
handles.Concentration.String = str2double(handles.AverageN.String) / (6.022 * 10^(-1) * omega);
guidata(hObject,handles);

function Concentration_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.Concentration.String = get(hObject,'string');
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
end

handles.AverageN.String = str2double(handles.Concentration.String) * 6.022 * 10^(-1) * omega;
handles.NParticles.String = round( str2double(handles.AverageN.String) * V / omega);
guidata(hObject,handles);

function AverageN_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.AverageN.String = get(hObject,'string');
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
end

handles.Concentration.String = str2double(handles.AverageN.String) / (6.022 * 10^(-1) * omega);
handles.NParticles.String = round( str2double(handles.AverageN.String) * V / omega);
guidata(hObject,handles);

function NParticles_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.NParticles.String = get(hObject,'string');
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
end

handles.AverageN.String = str2double(handles.NParticles.String) * omega / V;
handles.Concentration.String = str2double(handles.AverageN.String) / (6.022 * 10^(-1) * omega);
guidata(hObject,handles);

function NX_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.NX.String = get(hObject,'string');
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^2 region:'];
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^3 box:'];
end


handles.AverageN.String = str2double(handles.NParticles.String) * omega / V;
handles.Concentration.String = str2double(handles.AverageN.String) / (6.022 * 10^(-1) * omega);
guidata(hObject,handles);

function NY_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.NY.String = get(hObject,'string');
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^2 region:'];
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^3 box:'];
end



handles.AverageN.String = str2double(handles.NParticles.String) * omega / V;
handles.Concentration.String = str2double(handles.AverageN.String) / (6.022 * 10^(-1) * omega);
guidata(hObject,handles);

function D_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.D.String = get(hObject,'string');
guidata(hObject,handles);

function LateralFocus_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.wr.String = get(hObject,'string');
guidata(hObject,handles);

function AxialFocus_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.wz.String = get(hObject,'string');
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^2 region:'];
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^3 box:'];
end

handles.AverageN.String = str2double(handles.NParticles.String) * omega / V;
handles.Concentration.String = str2double(handles.AverageN.String) / (6.022 * 10^(-1) * omega);

guidata(hObject,handles);

function Brightness_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.Brightness.String = get(hObject,'string');
guidata(hObject,handles);

function NImages_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.NImages.String = get(hObject,'string');

if isfield(handles, 'CovarianceTot')
    
    data = get(handles.table, 'data');
    PixelTime = data(:,1) .* 10^(-6);
    LineTime = data(:,2) .* 10^(-3);
    
    [D_RICSPE, MSRE, NimagesVec] = RicspeUpdate(handles);
    
    handles.MSRE = MSRE;
    handles.DRICS = D_RICSPE;
    
    axes(handles.ax1)
    cla
    hold on
    CM = jet(numel(data(:,1)));
    for iter = 1 : numel(data(:,1))
        
        if handles.ScanSpeed_listbox.Data{iter,3} == true
            [FI,XI]=ksdensity(squeeze(handles.DRICS(iter,:)));
            plot( XI, FI, 'color', CM(iter,:)  );
            
        end
    end
    set(gca,'XColor','white','YColor','white')
    xlabel('D (\mum^2 s^{-1})','Color','White')
    ylabel('P(D|D_0) (s\mum^{-2})','Color','White')
    
    pixeltime_plot = sort(unique(data(:,1)));
    linetime_plot = sort(unique(data(:,2)));
    axes(handles.ax2)
    cla
    imAlpha=zeros(numel(pixeltime_plot),numel(linetime_plot));
    MSRE_map = zeros(numel(pixeltime_plot),numel(linetime_plot));
    
    for iter = 1 : numel(PixelTime)
        indrow = find(pixeltime_plot == data(iter,1));
        indcol = find(linetime_plot == data(iter,2));
        MSRE_map(indrow,indcol) = MSRE(iter);
        imAlpha(indrow,indcol) = 1;
    end
    
    imAlpha(isnan(MSRE_map)) = 0;
    imagesc(MSRE_map','AlphaData',imAlpha');
    set(gca,'color',0*[1 1 1],'XColor','white','YColor','white');
    colorbar
    xticks(1:1:numel(pixeltime_plot))
    xticklabels(cellstr(string(round(pixeltime_plot,1))))
    xlabel('Pixel dwell time (\mus)','Color','White')
    yticks(1:1:numel(linetime_plot))
    yticklabels(cellstr(string(round(linetime_plot,1))))
    ylabel('Line time (ms)','Color','White')
    title('MSRE','Color','white')

    
end

guidata(hObject,handles);

function SimTime_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.SimTime.String = get(hObject,'string');

if isfield(handles, 'CovarianceTot')
    
    data = get(handles.table, 'data');
    PixelTime = data(:,1) .* 10^(-6);
    LineTime = data(:,2) .* 10^(-3);
    
    [D_RICSPE, MSRE, NimagesVec] = RicspeUpdate(handles);
    
    handles.MSRE = MSRE;
    handles.DRICS = D_RICSPE;
    
    axes(handles.ax1)
    cla
    hold on
    CM = jet(numel(data(:,1)));
    for iter = 1 : numel(data(:,1))
        
        if handles.ScanSpeed_listbox.Data{iter,3} == true
            [FI,XI]=ksdensity(squeeze(handles.DRICS(iter,:)));
            plot( XI, FI, 'color', CM(iter,:)  );
            
        end
    end
    set(gca,'XColor','white','YColor','white')
    xlabel('D (\mum^2 s^{-1})','Color','White')
    ylabel('P(D|D_0) (s\mum^{-2})','Color','White')
    
    pixeltime_plot = sort(unique(data(:,1)));
    linetime_plot = sort(unique(data(:,2)));
    axes(handles.ax2)
    cla
    imAlpha=zeros(numel(pixeltime_plot),numel(linetime_plot));
    MSRE_map = zeros(numel(pixeltime_plot),numel(linetime_plot));
    
    for iter = 1 : numel(PixelTime)
        indrow = find(pixeltime_plot == data(iter,1));
        indcol = find(linetime_plot == data(iter,2));
        MSRE_map(indrow,indcol) = MSRE(iter);
        imAlpha(indrow,indcol) = 1;
    end
    
    imAlpha(isnan(MSRE_map)) = 0;
    imagesc(MSRE_map','AlphaData',imAlpha');
    set(gca,'color',0*[1 1 1],'XColor','white','YColor','white');
    colorbar
    xticks(1:1:numel(pixeltime_plot))
    xticklabels(cellstr(string(round(pixeltime_plot,1))))
    xlabel('Pixel dwell time (\mus)','Color','White')
    yticks(1:1:numel(linetime_plot))
    yticklabels(cellstr(string(round(linetime_plot,1))))
    ylabel('Line time (ms)','Color','White')
    title('MSRE','Color','white')

    
end

guidata(hObject,handles);

function NRep_Callback(hObject, eventdata)
handles = guidata(hObject);
handles.NRep.String = get(hObject,'string');

if isfield(handles, 'CovarianceTot')
    
    data = get(handles.table, 'data');
    PixelTime = data(:,1) .* 10^(-6);
    LineTime = data(:,2) .* 10^(-3);
    
    [D_RICSPE, MSRE, NimagesVec] = RicspeUpdate(handles);
    
    handles.MSRE = MSRE;
    handles.DRICS = D_RICSPE;
    
    axes(handles.ax1)
    cla
    hold on
    CM = jet(numel(data(:,1)));
    for iter = 1 : numel(data(:,1))
        
        if handles.ScanSpeed_listbox.Data{iter,3} == true
            [FI,XI]=ksdensity(squeeze(handles.DRICS(iter,:)));
            plot( XI, FI, 'color', CM(iter,:)  );
            
        end
    end
    set(gca,'XColor','white','YColor','white')
    xlabel('D (\mum^2 s^{-1})','Color','White')
    ylabel('P(D|D_0) (s\mum^{-2})','Color','White')
    
    pixeltime_plot = sort(unique(data(:,1)));
    linetime_plot = sort(unique(data(:,2)));
    axes(handles.ax2)
    cla
    imAlpha=zeros(numel(pixeltime_plot),numel(linetime_plot));
    MSRE_map = zeros(numel(pixeltime_plot),numel(linetime_plot));
    
    for iter = 1 : numel(PixelTime)
        indrow = find(pixeltime_plot == data(iter,1));
        indcol = find(linetime_plot == data(iter,2));
        MSRE_map(indrow,indcol) = MSRE(iter);
        imAlpha(indrow,indcol) = 1;
    end
    
    imAlpha(isnan(MSRE_map)) = 0;
    imagesc(MSRE_map','AlphaData',imAlpha');
    set(gca,'color',0*[1 1 1],'XColor','white','YColor','white');
    colorbar
    xticks(1:1:numel(pixeltime_plot))
    xticklabels(cellstr(string(round(pixeltime_plot,1))))
    xlabel('Pixel dwell time (\mus)','Color','White')
    yticks(1:1:numel(linetime_plot))
    yticklabels(cellstr(string(round(linetime_plot,1))))
    ylabel('Line time (ms)','Color','White')
    title('MSRE','Color','white')

    
end


guidata(hObject,handles);

function AddRow_Callback(hObject, eventdata, handles)
handles = guidata(hObject);
data = get(handles.table, 'data');
data(end+1,:) = 0;
set(handles.table,'data',data)
data = get(handles.ScanSpeed_listbox, 'data');
data(end+1,:) = {0 0 true};
set(handles.ScanSpeed_listbox,'data',data)
guidata(hObject,handles);

function editTable_Callback(hObject, eventdata, handles)
handles = guidata(hObject);
data = get(handles.table, 'data');
set(handles.table,'data',data)

selectedRow = eventdata.Indices(1);
selectedCol = eventdata.Indices(2);

handles.ScanSpeed_listbox.Data{selectedRow,selectedCol} = data(selectedRow,selectedCol);
guidata(hObject,handles);

function ScanSpeed_listbox_Callback(hObject, eventdata)
handles = guidata(hObject);
data = get(handles.table, 'data');
axes(handles.ax1)
cla

CM = jet(numel(data(:,1)));
if ( isfield(handles,'DRICS') )
    for iter = 1 : numel(data(:,1))
        
        if handles.ScanSpeed_listbox.Data{iter,3} == true
            [FI,XI]=ksdensity(squeeze(handles.DRICS(iter,:)));
            plot( XI, FI, 'color', CM(iter,:)  );
            
        end
    end
end
set(gca,'XColor','white','YColor','white')
xlabel('D (\mum^2 s^{-1})','Color','White')
ylabel('P(D|D_0) (s\mum^{-2})','Color','White')

% selectedRow = eventdata.Indices(1);
% selectedCol = eventdata.Indices(2);
% tmp = handles.ScanSpeed_listbox.Data{selectedRow,selectedCol};
% tmp
% handles.ScanSpeed_listbox.Data{selectedRow,selectedCol} = not(handles.ScanSpeed_listbox.Data{selectedRow,selectedCol});
% handles.ScanSpeed_listbox.Data{selectedRow,selectedCol}
guidata(hObject,handles);

function Save_Callback(hObject, eventdata)

handles = guidata(hObject);

temporary = get(handles.table, 'data');
data.PixelTime = temporary(:,1);
data.LineTime = temporary(:,2);

data.SimTime = str2double(get(handles.SimTime,'string'));
data.Concentration = str2double(get(handles.Concentration,'string'));
data.NParticles = str2double(get(handles.NParticles,'string'));
data.AverageN = str2double(get(handles.AverageN,'string'));
data.PixelSize = str2double(get(handles.PixelSize,'string'));

data.NX = str2double(get(handles.NX,'string'));
data.NY = str2double(get(handles.NY,'string'));

data.NImages = str2double(get(handles.NImages,'string'));
data.Brightness = str2double(get(handles.Brightness,'string'));
data.NRep = str2double(get(handles.NRep,'string'));
data.D = str2double(get(handles.D,'string'));
data.wr = str2double(get(handles.wr,'string'));
data.wz = str2double(get(handles.wz,'string'));
data.ScanSpeed_listbox = handles.ScanSpeed_listbox;


if ( isfield(handles,'MSRE') )
    data.MSRE = handles.MSRE;
end

if ( isfield(handles,'DRICS') )
    data.DRICS = handles.DRICS;
end

if ( isfield(handles,'CovarianceTot') )
    data.CovarianceTot = handles.CovarianceTot;
end

uisave('data')

function Load_Callback(hObject, eventdata)

handles = guidata(hObject);
uiopen('load');

set(handles.table,'data', cat(2, data.PixelTime, data.LineTime) );
set(handles.SimTime,'string', data.SimTime);
set(handles.PixelSize,'string', data.PixelSize);
set(handles.NX,'string', data.NX);
set(handles.NY,'string', data.NY);
set(handles.NImages,'string', data.NImages);
set(handles.Brightness,'string', data.Brightness);
set(handles.NRep,'string', data.NRep);
set(handles.D,'string', data.D);
set(handles.wr,'string', data.wr);
set(handles.wz,'string', data.wz);
handles.ScanSpeed_listbox.Data = data.ScanSpeed_listbox.Data;

for ind = 1 : size(data.ScanSpeed_listbox.Data,1)
    if  handles.ScanSpeed_listbox.Data{ind,3} == 1
        handles.ScanSpeed_listbox.Data{ind,3} = true;
    end
end

if (isfield(data,'NParticles') == 0)
    set(handles.NParticles,'string', data.Concentration);
else
    set(handles.NParticles,'string', data.NParticles);
end

PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);

if wz == Inf
    omega = pi * wr^2;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^2 region:'];
else
    omega = pi^(3/2) * wr^2 * wz;
    V = ( NX * PixelSize + 2 ) * ( NY * PixelSize + 2 ) * ( (NX+NY)/2 * PixelSize );
    handles.Txt_NParticles.String =  ['Number of particles in the ', num2str(V), ' \mum^3 box:'];
end

handles.AverageN.String = str2double(handles.NParticles.String) * omega / V;
handles.Concentration.String = str2double(handles.AverageN.String) / (6.022 * 10^(-1) * omega);



if ( isfield(data,'CovarianceTot') )
    handles.CovarianceTot = data.CovarianceTot;
end

if ( isfield(data,'MSRE') )
    handles.MSRE = data.MSRE;
end

if ( isfield(data,'DRICS') && size(data.DRICS,1)>0 )

    if size(data.DRICS,1) < numel(data.PixelTime)
        [D_RICSPE, MSRE, ~] = RicspeUpdate(handles);
        handles.DRICS = D_RICSPE;
        handles.MSRE = MSRE;
    else
        handles.DRICS = data.DRICS;
    end

end


if ( isfield(handles,'DRICS') && numel(handles.DRICS) > 1 )
    axes(handles.ax1)
    cla
    hold on
    CM = jet(numel(data.PixelTime));
    for iter = 1 : numel(data.PixelTime)
        
        if ( handles.ScanSpeed_listbox.Data{iter,3} == true && handles.ScanSpeed_listbox.Data{iter,2}*10^(-3) >=  handles.ScanSpeed_listbox.Data{iter,1}*10^(-6)*data.NX )
            [FI,XI]=ksdensity(squeeze(handles.DRICS(iter,:)));
            plot( XI, FI, 'color', CM(iter,:)  );
            
        else
            handles.ScanSpeed_listbox.Data{iter,3} = false;
        end
    end
    set(gca,'XColor','white','YColor','white')
    xlabel('D (\mum^2 s^{-1})','Color','White')
    ylabel('P(D|D_0) (s\mum^{-2})','Color','White')
    
    pixeltime_plot = sort(unique(data.PixelTime));
    linetime_plot = sort(unique(data.LineTime));
    axes(handles.ax2)
    cla
    imAlpha=zeros(numel(pixeltime_plot),numel(linetime_plot));
    MSRE_map = zeros(numel(pixeltime_plot),numel(linetime_plot));
    
    for iter = 1 : numel(data.PixelTime)
        indrow = find(pixeltime_plot == data.PixelTime(iter));
        indcol = find(linetime_plot == data.LineTime(iter));
        MSRE_map(indrow,indcol) = handles.MSRE(iter);
        imAlpha(indrow,indcol) = 1;
    end
    
    imAlpha(isnan(MSRE_map)) = 0;
    imagesc(MSRE_map','AlphaData',imAlpha');
    set(gca,'color',0*[1 1 1],'XColor','white','YColor','white');
    colorbar
    xticks(1:1:numel(pixeltime_plot))
    xticklabels(cellstr(string(round(pixeltime_plot,1))))
    xlabel('Pixel dwell time (\mus)','Color','White')
    yticks(1:1:numel(linetime_plot))
    yticklabels(cellstr(string(round(linetime_plot,1))))
    ylabel('Line time (ms)','Color','White')
    title('MSRE','Color','white')
    
    showACF(handles)
  
end

guidata(hObject,handles);





function StartAnalysis_Callback(hObject, eventdata)
handles = guidata(hObject);
data = get(handles.table, 'data');
PixelTime = data(:,1) .* 10^(-6);
LineTime = data(:,2) .* 10^(-3);
PixelSize = str2double(handles.PixelSize.String) * 10^(-3);
NX = str2double(handles.NX.String);
NY = str2double(handles.NY.String);
NParticles = str2double(handles.NParticles.String);
D = str2double(handles.D.String);
wr = str2double(handles.wr.String) * 10^(-3);
wz = str2double(handles.wz.String) * 10^(-3);
Brightness = str2double(handles.Brightness.String) * 10^(3);
NImages = str2double(handles.NImages.String);
SimTime = str2double(handles.SimTime.String);
NRep = str2double(handles.NRep.String);


[MSRE, DRICS, CovarianceTot] = RICSPE( PixelTime , LineTime , PixelSize , NX , NY , NParticles , D , wr , wz , Brightness , NImages , SimTime, NRep, handles);
handles.MSRE = MSRE;
handles.DRICS = DRICS;
handles.CovarianceTot = CovarianceTot;

axes(handles.ax1)
cla
hold on
CM = jet(numel(data(:,1)));
for iter = 1 : numel(data(:,1))
    
    if ( handles.ScanSpeed_listbox.Data{iter,3} == true && handles.ScanSpeed_listbox.Data{iter,2}*10^(-3) >=  handles.ScanSpeed_listbox.Data{iter,1}*10^(-6)*NX )
        [FI,XI]=ksdensity(squeeze(handles.DRICS(iter,:)));
        plot( XI, FI, 'color', CM(iter,:)  );
        
    end
end
set(gca,'XColor','white','YColor','white')
xlabel('D (\mum^2 s^{-1})','Color','White')
ylabel('P(D|D_0) (s\mum^{-2})','Color','White')

pixeltime_plot = sort(unique(data(:,1)));
linetime_plot = sort(unique(data(:,2)));
axes(handles.ax2)
cla
imAlpha=zeros(numel(pixeltime_plot),numel(linetime_plot));
MSRE_map = zeros(numel(pixeltime_plot),numel(linetime_plot));

for iter = 1 : numel(PixelTime)
    indrow = find(pixeltime_plot == data(iter,1));
    indcol = find(linetime_plot == data(iter,2));
    MSRE_map(indrow,indcol) = MSRE(iter);
    imAlpha(indrow,indcol) = 1;
end

imAlpha(isnan(MSRE_map)) = 0;
imagesc(MSRE_map','AlphaData',imAlpha');
set(gca,'color',0*[1 1 1],'XColor','white','YColor','white');
colorbar
xticks(1:1:numel(pixeltime_plot))
xticklabels(cellstr(string(round(pixeltime_plot,1))))
xlabel('Pixel dwell time (\mus)','Color','White')
yticks(1:1:numel(linetime_plot))
yticklabels(cellstr(string(round(linetime_plot,1))))
ylabel('Line time (ms)','Color','White')
title('MSRE','Color','white')
disp(MSRE_map)

showACF(handles)

guidata(hObject,handles);


