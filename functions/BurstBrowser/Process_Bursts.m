function BurstData = Process_Bursts(Macrotime,Channel,ClockPeriod,BAMethod)
%%% Process identified bursts and calculate burst-wise quantities.
%%%
%%% Macrotime - The macrotime information of the photons (cell array of bursts)
%%% Channel   - The channel information of the photons (cell array of bursts)
%%% ClockPeriod - The time resolution of the macrotime photon time stamps
%%% BAMethod - The burst search method, as defined in PAM.
total_duration = false;
% make sure macrotime is of type double for calculations
Macrotime = cellfun(@double,Macrotime,'UniformOutput',false);

Number_of_Bursts = numel(Macrotime);
Number_of_Photons = cellfun(@numel,Macrotime);
Mean_Macrotime = cellfun(@mean,Macrotime)*ClockPeriod;
Duration = cellfun(@(x) max(x)-min(x),Macrotime)*ClockPeriod/1E-3;
%Progress(0.1,h.Progress.Axes, h.Progress.Text, 'Calculating Burstwise Parameters...');
%% process photon counts
if any(BAMethod == [1 2]) %total of 6 channels
    Number_of_Photons_per_Chan = zeros(Number_of_Bursts,6);
    for i = 1:6 %polarization resolved
        Number_of_Photons_per_Chan(:,i) = cellfun(@(x) sum(x==i),Channel);
    end
    
    %%% Calculate RAW Efficienyc and Stoichiometry
    E = sum(Number_of_Photons_per_Chan(:,[3 4]),2)./(sum(Number_of_Photons_per_Chan(:,[1 2]),2) + sum(Number_of_Photons_per_Chan(:,[3 4]),2));
    S = sum(Number_of_Photons_per_Chan(:,[1 2 3 4]),2)./Number_of_Photons;
    Proximity_Ratio = E;
    
    %%% Calculate RAW Anisotropies
    rGG = (Number_of_Photons_per_Chan(:,1)-Number_of_Photons_per_Chan(:,2))./(Number_of_Photons_per_Chan(:,1)+2*Number_of_Photons_per_Chan(:,2));
    rGR = (Number_of_Photons_per_Chan(:,3)-Number_of_Photons_per_Chan(:,4))./(Number_of_Photons_per_Chan(:,3)+2*Number_of_Photons_per_Chan(:,4));
    rRR = (Number_of_Photons_per_Chan(:,5)-Number_of_Photons_per_Chan(:,6))./(Number_of_Photons_per_Chan(:,5)+2*Number_of_Photons_per_Chan(:,6));
    
    %%% create placeholder arrays for lifetimes and 2CDE filter calculation
    tauGG = zeros(Number_of_Bursts,1);
    tauRR = zeros(Number_of_Bursts,1);
    ALEX_2CDE = zeros(Number_of_Bursts,1);
    FRET_2CDE = zeros(Number_of_Bursts,1);
    
    %Progress(0.3,h.Progress.Axes, h.Progress.Text, 'Calculating Burstwise Parameters...');
    
    Number_of_Photons_per_Color = zeros(Number_of_Bursts,3);
    for i = 1:3
        Number_of_Photons_per_Color(:,i) = Number_of_Photons_per_Chan(:,2*i-1)+Number_of_Photons_per_Chan(:,2*i);
    end
    Mean_Macrotime_per_Chan = zeros(Number_of_Bursts,6);
    Duration_per_Chan = cell(Number_of_Bursts,6);
    for i = 1:6 %only calculate Mean Macrotime for combined channels GG, GR, RR
        Mean_Macrotime_per_Chan(:,i) = cellfun(@(x,y) mean(x(y == i)),Macrotime, Channel)*ClockPeriod;
        Duration_per_Chan(:,i) = cellfun(@(x,y) max(x(y == i))-min(x(y == i)),Macrotime,Channel,'UniformOutput',false);
    end
    
    %Progress(0.5,h.Progress.Axes, h.Progress.Text, 'Calculating Burstwise Parameters...');
    
    Mean_Macrotime_per_Color = zeros(Number_of_Bursts,4);
    Duration_per_Color = cell(Number_of_Bursts,4);
    for i = 1:3 %only calculate Mean Macrotime for combined channels GG, GR, RR
        Mean_Macrotime_per_Color(:,i) = cellfun(@(x,y) mean(x(y == 2*i-1 | y == 2*i)),Macrotime, Channel)*ClockPeriod;
        Duration_per_Color(:,i) = cellfun(@(x,y) max(x(y == 2*i-1 | y == 2*i))-min(x(y == 2*i-1 | y == 2*i)),Macrotime,Channel,'UniformOutput',false);
    end
    
    %Progress(0.6,h.Progress.Axes, h.Progress.Text, 'Calculating Burstwise Parameters...');
    %Also calculate GX
    Mean_Macrotime_per_Color(:,4) = cellfun(@(x,y) mean(x(y == 1 | y == 2 | y == 3 | y == 4)),Macrotime, Channel)*ClockPeriod;
    Duration_per_Color(:,4) = cellfun(@(x,y) max(x(y == 1 | y == 2 | y == 3 | y == 4))-min(x(y == 1 | y == 2 | y == 3 | y == 4)),Macrotime,Channel,'UniformOutput',false);
    
    %there are empty cells for Duration_per_Chan if Channels are empty
    ix=cellfun('isempty',Duration_per_Chan);
    Duration_per_Chan(ix)={nan};
    Duration_per_Chan = cell2mat(Duration_per_Chan)*ClockPeriod/1E-3;
    
    ix=cellfun('isempty',Duration_per_Color);
    Duration_per_Color(ix)={nan};
    Duration_per_Color = cell2mat(Duration_per_Color)*ClockPeriod/1E-3;
    
    %Determine TGG-TGR and TGX-TRR
    TGG_TGR = abs(Mean_Macrotime_per_Color(:,1)-Mean_Macrotime_per_Color(:,2));
    TGX_TRR = abs(Mean_Macrotime_per_Color(:,4)-Mean_Macrotime_per_Color(:,3));
    %also provide normalized quantities
    TGG_TGR(:,2) = TGG_TGR(:,1)./Duration;
    TGX_TRR(:,2) = TGX_TRR(:,1)./Duration;
    TGG_TGR(:,1) = TGG_TGR(:,1)./1E-3;
    TGX_TRR(:,1) = TGX_TRR(:,1)./1E-3;
    
    %Progress(0.8,h.Progress.Axes, h.Progress.Text, 'Calculating Burstwise Parameters...');
    
    % take the APBS burst duration as the duration
    if total_duration
        for i = 1:6
            Duration_per_Chan(:,i) = Duration;
        end
        for i = 1:3
            Duration_per_Color(:,i) = Duration;
        end
    end
    
    %Countrate per chan
    Countrate_per_Chan = zeros(Number_of_Bursts,6);
    for i = 1:6
        Countrate_per_Chan(:,i) = Number_of_Photons_per_Chan(:,i)./Duration_per_Chan(:,i);
    end
    
    Countrate_per_Color = zeros(Number_of_Bursts,3);
    for i = 1:3
        Countrate_per_Color(:,i) = Number_of_Photons_per_Color(:,i)./Duration_per_Color(:,i);
    end
    
elseif any(BAMethod == [3 4]) %total of 12 channels
    Number_of_Photons_per_Chan = zeros(Number_of_Bursts,12);
    for i = 1:12
        Number_of_Photons_per_Chan(:,i) = cellfun(@(x) sum(x==i),Channel);
    end
    
    %%% Calculate RAW Efficiencies and Stoichiometries
    %%% Efficiencies
    EGR = sum(Number_of_Photons_per_Chan(:,[9,10]),2)./sum(Number_of_Photons_per_Chan(:,[7 8 9 10]),2);
    EBG = sum(Number_of_Photons_per_Chan(:,[3 4]),2)./...
        (sum(Number_of_Photons_per_Chan(:,[1 2]),2).*(1-EGR)+sum(Number_of_Photons_per_Chan(:,[3 4]),2));
    EBR = (sum(Number_of_Photons_per_Chan(:,[5 6]),2) - EGR.*(sum(Number_of_Photons_per_Chan(:,[3 4 5 6]),2)))./...
        (sum(Number_of_Photons_per_Chan(:,[1 2 5 6]),2) - EGR.*sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6]),2));
    %%%Stoichiometries
    SGR = sum(Number_of_Photons_per_Chan(:,[7 8 9 10]),2)./sum(Number_of_Photons_per_Chan(:,[7 8 9 10 11 12]),2);
    SBG = sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6]),2)./sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6 7 8 9 10]),2);
    SBR = sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6]),2)./sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6 11 12]),2);
    %%% Efficiency-related quantities
    %%% Total FRET from the Blue to both Acceptors
    E1A = sum(Number_of_Photons_per_Chan(:,[3 4 5 6]),2)./sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6]),2);
    %%% Proximity Ratios (Fractional Signal)
    PGR = EGR;
    PBG = sum(Number_of_Photons_per_Chan(:,[3 4]),2)./sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6]),2);
    PBR = sum(Number_of_Photons_per_Chan(:,[5 6]),2)./sum(Number_of_Photons_per_Chan(:,[1 2 3 4 5 6]),2);
    
    
    %%% Calculate RAW Anisotropies
    rBB = (Number_of_Photons_per_Chan(:,1)-Number_of_Photons_per_Chan(:,2))./(Number_of_Photons_per_Chan(:,1)+2*Number_of_Photons_per_Chan(:,2));
    rBG = (Number_of_Photons_per_Chan(:,3)-Number_of_Photons_per_Chan(:,4))./(Number_of_Photons_per_Chan(:,3)+2*Number_of_Photons_per_Chan(:,4));
    rBR = (Number_of_Photons_per_Chan(:,5)-Number_of_Photons_per_Chan(:,6))./(Number_of_Photons_per_Chan(:,5)+2*Number_of_Photons_per_Chan(:,6));
    rGG = (Number_of_Photons_per_Chan(:,7)-Number_of_Photons_per_Chan(:,8))./(Number_of_Photons_per_Chan(:,7)+2*Number_of_Photons_per_Chan(:,8));
    rGR = (Number_of_Photons_per_Chan(:,9)-Number_of_Photons_per_Chan(:,10))./(Number_of_Photons_per_Chan(:,9)+2*Number_of_Photons_per_Chan(:,10));
    rRR = (Number_of_Photons_per_Chan(:,11)-Number_of_Photons_per_Chan(:,12))./(Number_of_Photons_per_Chan(:,11)+2*Number_of_Photons_per_Chan(:,12));
    
    %%% create placeholder arrays for lifetimes and 2CDE filter calculation
    tauBB = zeros(Number_of_Bursts,1);
    tauGG = zeros(Number_of_Bursts,1);
    tauRR = zeros(Number_of_Bursts,1);
    ALEX_2CDE_BG = zeros(Number_of_Bursts,1);
    ALEX_2CDE_BR = zeros(Number_of_Bursts,1);
    ALEX_2CDE_GR = zeros(Number_of_Bursts,1);
    FRET_2CDE_BG = zeros(Number_of_Bursts,1);
    FRET_2CDE_BR = zeros(Number_of_Bursts,1);
    FRET_2CDE_GR = zeros(Number_of_Bursts,1);
    
    Number_of_Photons_per_Color = zeros(Number_of_Bursts,6);
    for i = 1:6
        Number_of_Photons_per_Color(:,i) = Number_of_Photons_per_Chan(:,2*i-1)+Number_of_Photons_per_Chan(:,2*i);
    end
    
    for i = 1:12 %only calculate Mean Macrotime for combined channels
        Mean_Macrotime_per_Chan(:,i) = cellfun(@(x,y) mean(x(y == i)),Macrotime, Channel)*ClockPeriod;
        Duration_per_Chan(:,i) = cellfun(@(x,y) max(x(y == i))-min(x(y == i)),Macrotime,Channel,'UniformOutput',false);
    end
    
    Mean_Macrotime_per_Color = zeros(Number_of_Bursts,8);
    Duration_per_Color = cell(Number_of_Bursts,8);
    for i = 1:6 %only calculate Mean Macrotime for combined channels GG, GR, RR
        Mean_Macrotime_per_Color(:,i) = cellfun(@(x,y) mean(x(y == 2*i-1 | y == 2*i)),Macrotime, Channel)*ClockPeriod;
        Duration_per_Color(:,i) = cellfun(@(x,y) max(x(y == 2*i-1 | y == 2*i))-min(x(y == 2*i-1 | y == 2*i)),Macrotime,Channel,'UniformOutput',false);
    end
    
    %Also for BX and GX
    Mean_Macrotime_per_Color(:,7) = cellfun(@(x,y) mean(x(y == 1 | y == 2 | y == 3 | y == 4 | y == 5 | y == 6)),Macrotime, Channel)*ClockPeriod;
    Mean_Macrotime_per_Color(:,8) = cellfun(@(x,y) mean(x(y == 7 | y == 8 | y == 9 | y == 10)),Macrotime, Channel)*ClockPeriod;
    Duration_per_Color(:,7) = cellfun(@(x,y) max(x(y == 1 | y == 2 | y == 3 | y == 4 | y == 5 | y == 6)) - min(x(y == 1 | y == 2 | y == 3 | y == 4 | y == 5 | y == 6)),Macrotime,Channel,'UniformOutput',false);
    Duration_per_Color(:,8) = cellfun(@(x,y) max(x(y == 7 | y == 8 | y == 9 | y == 10)) - min(x(y == 7 | y == 8 | y == 9 | y == 10)),Macrotime,Channel,'UniformOutput',false);
    
    %there are empty cells for Duration_per_Chan if Channels are empty
    ix=cellfun('isempty',Duration_per_Chan);
    Duration_per_Chan(ix)={nan};
    Duration_per_Chan = cell2mat(Duration_per_Chan)*ClockPeriod/1E-3;
    
    ix=cellfun('isempty',Duration_per_Color);
    Duration_per_Color(ix)={nan};
    Duration_per_Color = cell2mat(Duration_per_Color)*ClockPeriod/1E-3;
    
    %Determine TGG-TGR and TGX-TRR
    TGG_TGR = abs(Mean_Macrotime_per_Color(:,4)-Mean_Macrotime_per_Color(:,5));
    TGX_TRR = abs(Mean_Macrotime_per_Color(:,8)-Mean_Macrotime_per_Color(:,6));
    TBB_TBG = abs(Mean_Macrotime_per_Color(:,1)-Mean_Macrotime_per_Color(:,2));
    TBB_TBR = abs(Mean_Macrotime_per_Color(:,1)-Mean_Macrotime_per_Color(:,3));
    TBX_TGX = abs(Mean_Macrotime_per_Color(:,7)-Mean_Macrotime_per_Color(:,8));
    TBX_TRR = abs(Mean_Macrotime_per_Color(:,7)-Mean_Macrotime_per_Color(:,6));
    %also provide normalized quantities
    TGG_TGR(:,2) = TGG_TGR(:,1)./Duration;
    TGX_TRR(:,2) = TGX_TRR(:,1)./Duration;
    TBB_TBG(:,2) = TBB_TBG(:,1)./Duration;
    TBB_TBR(:,2) = TBB_TBR(:,1)./Duration;
    TBX_TGX(:,2) = TBX_TGX(:,1)./Duration;
    TBX_TRR(:,2) = TBX_TRR(:,1)./Duration;
    %convert to ms
    TGG_TGR(:,1) = TGG_TGR(:,1)./1E-3;
    TGX_TRR(:,1) = TGX_TRR(:,1)./1E-3;
    TBB_TBG(:,1) = TBB_TBG(:,1)./1E-3;
    TBB_TBR(:,1) = TBB_TBR(:,1)./1E-3;
    TBX_TGX(:,1) = TBX_TGX(:,1)./1E-3;
    TBX_TRR(:,1) = TBX_TRR(:,1)./1E-3;
    
    % take the APBS burst duration as the duration
    if h.Burst.ConstantDuration_Checkbox.Value
        for i = 1:12
            Duration_per_Chan(:,i) = Duration;
        end
        for i = 1:6
            Duration_per_Color(:,i) = Duration;
        end
    end
    
    Countrate_per_Chan = zeros(Number_of_Bursts,12);
    for i = 1:12
        Countrate_per_Chan(:,i) = Number_of_Photons_per_Chan(:,i)./Duration_per_Chan(:,i);
    end
    
    Countrate_per_Color = zeros(Number_of_Bursts,3);
    for i = 1:6
        Countrate_per_Color(:,i) = Number_of_Photons_per_Color(:,i)./Duration_per_Color(:,i);
    end
elseif any(BAMethod == [5,6]) %only 3 channels
    
    Number_of_Photons_per_Color = zeros(Number_of_Bursts,3);
    for i = 1:3 %polarization resolved
        Number_of_Photons_per_Color(:,i) = cellfun(@(x) sum(x==i),Channel);
    end
    %%% Calculate RAW Efficiency and Stoichiometry
    E = Number_of_Photons_per_Color(:,2)./(Number_of_Photons_per_Color(:,1) + Number_of_Photons_per_Color(:,2));
    S = (Number_of_Photons_per_Color(:,1) + Number_of_Photons_per_Color(:,2))./Number_of_Photons;
    Proximity_Ratio = E;
    
    %%% create placeholder arrays for lifetimes and 2CDE filter calculation
    tauGG = zeros(Number_of_Bursts,1);
    tauRR = zeros(Number_of_Bursts,1);
    ALEX_2CDE = zeros(Number_of_Bursts,1);
    FRET_2CDE = zeros(Number_of_Bursts,1);
    
    Mean_Macrotime_per_Color = zeros(Number_of_Bursts,3);
    Duration_per_Color = cell(Number_of_Bursts,3);
    for i = 1:3 %only calculate Mean Macrotime for combined channels GG, GR, RR
        Mean_Macrotime_per_Color(:,i) = cellfun(@(x,y) mean(x(y == i)),Macrotime, Channel)*ClockPeriod;
        Duration_per_Color(:,i) = cellfun(@(x,y) max(x(y == i)) - min(x(y == i)),Macrotime,Channel,'UniformOutput',false);
    end
    
    %Also calculate GX
    Mean_Macrotime_per_Color(:,4) = cellfun(@(x,y) mean(x(y == 1 | y == 2)),Macrotime, Channel)*ClockPeriod;
    Duration_per_Color(:,4) = cellfun(@(x,y) max(x(y == 1 | y == 2)) - min(x(y == 1 | y == 2)),Macrotime,Channel,'UniformOutput',false);
    
    %there are empty cells for Duration_per_Chan if Channels are empty
    ix=cellfun('isempty',Duration_per_Color);
    Duration_per_Color(ix)={nan};
    Duration_per_Color = cell2mat(Duration_per_Color)*ClockPeriod/1E-3;
    
    %Determine TGG-TGR and TGX-TRR
    TGG_TGR = abs(Mean_Macrotime_per_Color(:,1)-Mean_Macrotime_per_Color(:,2));
    TGX_TRR = abs(Mean_Macrotime_per_Color(:,4)-Mean_Macrotime_per_Color(:,3));
    %also provide normalized quantities
    TGG_TGR(:,2) = TGG_TGR(:,1)./Duration;
    TGX_TRR(:,2) = TGX_TRR(:,1)./Duration;
    TGG_TGR(:,1) = TGG_TGR(:,1)./1E-3;
    TGX_TRR(:,1) = TGX_TRR(:,1)./1E-3;
    
    % take the APBS burst duration as the duration
    if h.Burst.ConstantDuration_Checkbox.Value
        for i = 1:4
            Duration_per_Color(:,i) = Duration;
        end
    end
    
    %Countrate per chan
    Countrate_per_Color = zeros(Number_of_Bursts,3);
    for i = 1:3
        Countrate_per_Color(:,i) = Number_of_Photons_per_Color(:,i)./Duration_per_Color(:,i);
    end
    
    
end

Countrate = Number_of_Photons./Duration;

%% Save BurstSearch Results
%%% The result is saved in a simple data array with dimensions
%%% (NumberOfBurst x NumberOfParamters), DataArray. The column names are saved in a
%%% cell array of strings, NameArray.

%%% The Parameters are listed in the following order:
%%% (1) Efficiency and Stoichiometry (corrected values)
%%% (2) Efficiency and Stoichiometry (raw values)
%%% (3) Lifetimes
%%% (4) Ansiotropies (the relevant ones)
%%% (5) Parameters for cleanup/selection (TGX-TRR, ALEX_2CDE..)
%%% (6) Parameters for identifying dynamic events(TGG-TGR,FRET_2CDE...)
%%% (7) Other useful parameters (Duration, Time of Burst, Countrates..)
if any(BAMethod == [1 2])
    BurstData.DataArray = [...
        E...
        S...
        Proximity_Ratio...
        S...
        tauGG...
        tauRR...
        rGG...
        rRR...
        ALEX_2CDE...
        FRET_2CDE...
        TGX_TRR(:,1)...
        TGG_TGR(:,1)...
        Duration...
        Mean_Macrotime...
        Number_of_Photons...
        Countrate...
        Countrate_per_Color...
        Countrate_per_Chan...
        Number_of_Photons_per_Color...
        Number_of_Photons_per_Chan];
    
    BurstData.NameArray = {'FRET Efficiency',...
        'Stoichiometry',...
        'Proximity Ratio',...
        'Stoichiometry (raw)',...
        'Lifetime D [ns]',...
        'Lifetime A [ns]',...
        'Anisotropy D',...
        'Anisotropy A',...
        'ALEX 2CDE Filter',...
        'FRET 2CDE Filter',...
        '|TDX-TAA| Filter',...
        '|TDD-TDA| Filter',...
        'Duration [ms]',...
        'Mean Macrotime [s]',...
        'Number of Photons',...
        'Count rate [kHz]',...
        'Count rate (DD) [kHz]',...
        'Count rate (DA) [kHz]',...
        'Count rate (AA) [kHz]',...
        'Count rate (DD par) [kHz]',...
        'Count rate (DD perp) [kHz]',...
        'Count rate (DA par) [kHz]',...
        'Count rate (DA perp) [kHz]',...
        'Count rate (AA par) [kHz]',...
        'Count rate (AA perp) [kHz]',...
        'Number of Photons (DD)',...
        'Number of Photons (DA)',...
        'Number of Photons (AA)'...
        'Number of Photons (DD par)',...
        'Number of Photons (DD perp)',...
        'Number of Photons (DA par)',...
        'Number of Photons (DA perp)',...
        'Number of Photons (AA par)',...
        'Number of Photons (AA perp)',...
        };
elseif any(BAMethod == [3 4])
    BurstData.DataArray = [...
        EGR EBG EBR E1A SGR SBG SBR...
        PGR PBG PBR E1A SGR SBG SBR...
        tauBB tauGG tauRR...
        rBB rGG rRR...
        TBX_TGX(:,1) TBX_TRR(:,1) TGX_TRR(:,1)...
        ALEX_2CDE_BG ALEX_2CDE_BR ALEX_2CDE_GR...
        TBB_TBG(:,1) TBB_TBR(:,1) TGG_TGR(:,1)...
        FRET_2CDE_BG FRET_2CDE_BR FRET_2CDE_GR...
        Duration...
        Mean_Macrotime...
        Number_of_Photons...
        Countrate...
        Countrate_per_Color...
        Countrate_per_Chan...
        Number_of_Photons_per_Color...
        Number_of_Photons_per_Chan...
        ];
    BurstData.NameArray = {'FRET Efficiency GR','FRET Efficiency BG','FRET Efficiency BR','FRET Efficiency B->G+R'...
        'Stoichiometry GR','Stoichiometry BG','Stoichiometry BR',...
        'Proximity Ratio GR','Proximity Ratio BG','Proximity Ratio BR','Proximity Ratio B->G+R'...
        'Stoichiometry GR (raw)','Stoichiometry BG (raw)','Stoichiometry BR (raw)',...
        'Lifetime BB [ns]','Lifetime GG [ns]','Lifetime RR [ns]',...
        'Anisotropy BB','Anisotropy GG','Anisotropy RR',...
        '|TBX-TGX| Filter','|TBX-TRR| Filter','|TGX-TRR| Filter',...
        'ALEX 2CDE BG Filter','ALEX 2CDE BR Filter','ALEX 2CDE GR Filter',...
        '|TBB-TBG| Filter','|TBB-TBR| Filter','|TGG-TGR| Filter',...
        'FRET 2CDE BG Filter','FRET 2CDE BR Filter','FRET 2CDE GR Filter',...
        'Duration [ms]',...
        'Mean Macrotime [s]',...
        'Number of Photons',...
        'Count rate [kHz]',...
        'Count rate (BB) [kHz]',...
        'Count rate (BG) [kHz]',...
        'Count rate (BR) [kHz]',...
        'Count rate (GG) [kHz]',...
        'Count rate (GR) [kHz]',...
        'Count rate (RR) [kHz]',...
        'Count rate (BB par) [kHz]',...
        'Count rate (BB perp) [kHz]',...
        'Count rate (BG par) [kHz]',...
        'Count rate (BG perp) [kHz]',...
        'Count rate (BR par) [kHz]',...
        'Count rate (BR perp) [kHz]',...
        'Count rate (GG par) [kHz]',...
        'Count rate (GG perp) [kHz]',...
        'Count rate (GR par) [kHz]',...
        'Count rate (GR perp) [kHz]',...
        'Count rate (RR par) [kHz]',...
        'Count rate (RR perp) [kHz]',...
        'Number of Photons (BB)',...
        'Number of Photons (BG)',...
        'Number of Photons (BR)',...
        'Number of Photons (GG)',...
        'Number of Photons (GR)',...
        'Number of Photons (RR)',...
        'Number of Photons (BB par)',...
        'Number of Photons (BB perp)',...
        'Number of Photons (BG par)',...
        'Number of Photons (BG perp)',...
        'Number of Photons (BR par)',...
        'Number of Photons (BR perp)',...
        'Number of Photons (GG par)',...
        'Number of Photons (GG perp)',...
        'Number of Photons (GR par)',...
        'Number of Photons (GR perp)',...
        'Number of Photons (RR par)',...
        'Number of Photons (RR perp)'...
        };
elseif any (BAMethod == [5,6])
    BurstData.DataArray = [...
        E...
        S...
        Proximity_Ratio...
        S...
        tauGG...
        tauRR...
        TGX_TRR(:,1)...
        ALEX_2CDE...
        TGG_TGR(:,1)...
        FRET_2CDE...
        Duration...
        Mean_Macrotime...
        Countrate...
        Countrate_per_Color(:,1:3)...
        Number_of_Photons...
        Number_of_Photons_per_Color...
        ];
    
    BurstData.NameArray = {'FRET Efficiency',...
        'Stoichiometry',...
        'Proximity Ratio',...
        'Stoichiometry (raw)',...
        'Lifetime GG [ns]',...
        'Lifetime RR [ns]',...
        '|TGX-TRR| Filter',...
        'ALEX 2CDE Filter',...
        '|TGG-TGR| Filter',...
        'FRET 2CDE Filter',...
        'Duration [ms]',...
        'Mean Macrotime [s]',...
        'Count rate [kHz]',...
        'Count rate (GG) [kHz]',...
        'Count rate (GR) [kHz]',...
        'Count rate (RR) [kHz]',...
        'Number of Photons',...
        'Number of Photons (GG)',...
        'Number of Photons (GR)',...
        'Number of Photons (RR)'...
        };
end