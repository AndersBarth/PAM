How to compile .c(pp) files with mex in matlab:

mex [Options] .c_source_file(s) 
Example:

From the NewPam Directory, the current build for files is:
Windows:
mex -largeArrayDims -v -O -I"C Files\src" "C Files\src\eval_prob_3c_bg.c" "C Files\src\randist\binomial.c" "C Files\src\randist\multinomial.c" "C Files\src\randist\specfunc\gamma.c" "C Files\src\sys\numcores.c" "C Files\src\sys\memalloc.c"
Mac OS X/UNIX:
mex -largeArrayDims -v -O -I"C Files/src" "C Files/src/eval_prob_3c_bg.c" "C Files/src/randist/binomial.c" "C Files/src/randist/multinomial.c" "C Files/src/randist/specfunc/gamma.c" "C Files/src/sys/numcores.c" "C Files/src/sys/memalloc.c"

mex -largeArrayDims -v -O -I"C Files/src" "tcPDA C-Code/C Files/src/eval_prob_3c_bg.c" "tcPDA C-Code/C Files/src/randist/binomial.c" "tcPDA C-Code/C Files/src/randist/multinomial.c" "tcPDA C-Code/C Files/src/randist/specfunc/gamma.c" "tcPDA C-Code/C Files/src/sys/numcores.c" "tcPDA C-Code/C Files/src/sys/memalloc.c"


Options: -v: verbose
	-g 	Debug Symbols
	-O 	Optimizations:
	-O 	is equal to: /O2 /Oy- /DNDEBUG in Visual Studio. See https://msdn.microsoft.com/en-us/library/k1ack8f1.aspx for possible FLAGS.
		To use in MATLAB, an example: mex -largeArrayDims -v OPTIMFLAGS="/Ox" -I"C Files\src" "C Files\src\eval_prob_3c_bg.c" "C Files\src\randist\binomial.c" "C Files\src\randist\multinomial.c" "C Files\src\randist\specfunc\gamma.c" "C Files\src\sys\numcores.c" "C Files\src\sys\memalloc.c"
	
	-I"PATH" 	Location of Header files (.h)
	-L"PATH" 	Location of compiled libary (.lib)
	
	-largeArrayDims 	necessary for large double (Matrix)

Old:
Compile with GSL (Gnu Scientific Library):
mex -largeArrayDims -O "C Files\src\eval_prob_3c_bg.c" -I"C:\gsl-1.16" -L"C:\gsl-1.16\lib\x64\Release" cblas.lib gsl.lib

___________________________________________________________________________________________________________________________________________________________________________________
For CUDA Devices:
For compiling CUDA C code, the file mex_CUDA_win64.xml has to be in your current working directory as it defines compiler and linker settings.
The file has to be updated for every new CUDA Version, also for new Windows/Visual Studio SDKs.

Also for debugging, one has to specifiy the -g (host debugging) and/or -G (device debugging) options to the nvcc compiler.

To compile the source in matlab, type:
mex -largeArrayDims -v -O -I"C Files\src" "C Files\src\eval_prob_3c_bg_cuda.cu"
